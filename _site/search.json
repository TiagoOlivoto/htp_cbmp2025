[
  {
    "objectID": "dia_02.html",
    "href": "dia_02.html",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "In this material, the mosaics used for application are described as follows:\n\n\n\nName\nWidth\nHeight\nBands\nDescription\nSource\n\n\n\n\n\n\n\n\ndsm folder\n\n\n\n\n\n\n\n\n\n\n\ndsm.tif\n2837\n2770\nSingle layer\nDigital Surface Model\nArthur Bernardeli\n\n\n\n\n\n\ndtm.tif\n2837\n2770\nSingle layer\nDigital Terrain Model\nArthur Bernardeli\n\n\n\n\n\n\nmask.tif\n2837\n2770\nSingle layer\nDSM Mask\nArthur Bernardeli\n\n\n\n\n\n\northo.tif\n5669\n6026\nR, G, B\nMosaic of a soybean breeding field\nArthur Bernardeli\n\n\n\n\n\n\ngrowth_models folder\n\n\n\n\n\n\n\n\n\n\n\nDAP_4_05-11-2021.tif\n-\n-\nSingle layer\nDigital Surface Model\nFilipe Mathias\n\n\n\n\n\n\n...\n…\n…\n…\n…\n\n\n\n\n\n\n\nDAP_80_07-26-2021.tif\n-\n-\nSingle layer\nDigital Surface Model\nFilipe Matias\n\n\n\n\n\n\nlettuce folder\n\n\n\n\n\n\n\n\n\n\n\nlettuce.tif\n1456\n2998\nR,G,B\nOrthomosaic of a lettuce experiment\nThis paper\n\n\n\n\n\n\nmaturity folder (10 rasters)\n\n\n\n\n\n\n\n\n\n\n\ncropped_09-10-2024\n10812\n1460\nR,G,B\nTime series of a soybean field\nArthur Bernardeli\n\n\n\n\n\n\n...\n…\n…\n…\n…\n…\n\n\n\n\n\n\ncropped_10-11-2024\n10812\n1460\nR,G,B\n\n\n\nTime series of a soybean field\n\n\n\n\npotato folder\n\n\n\n\n\n\n\n\n\n\n\npotato.tif\n5202\n4665\nR, G, B\nMosaic of a potato breeding field\nGustavo Nandi\n\n\n\n\n\n\nwheat folder\n\n\n\n\n\n\n\n\n\n\n\nwheat_ndsu.tif\n768\n3120\nB, G, R, RE, NIR\nMosaic of a wheat breeding area\nFilipe Matias\n\n\n\n\n\n\nwheat_ufv.tif\n2029\n2120\nR,G,B,RE,NIR\n\nMaicon Nardino\n\n\n\n\n\n\n\nIn this material, I will show some examples that uses functions from {pliman} package, but all the practical exercices will be made using {plimanshiny}.\n\n\nOrthomosaic (SpatRasters) objects can be imported and exported using the functions provided by the package. First, an orthomosaic image is imported as a SpatRaster object using the mosaic_input() function. The image can then be visualized in RGB format using the mosaic_plot_rgb() function. For interactive mapping, the mosaic_view() function can be used, specifying the RGB bands (e.g., R = 3, G = 2, B = 1) to adjust the display of the map. Additionally, the orthomosaic can be exported to a file using the mosaic_export() function.\n\nlibrary(pliman)\n\n╭ Welcome to pliman version \"3.1.1\"! ──────────────────────────────╮\n│                                                                  │\n│   Developed collaboratively by NEPEM &lt;https://nepemufsc.com&gt;     │\n│   Group lead: Prof. Tiago Olivoto                                │\n│   For citation, type `citation('pliman')`                        │\n│   We welcome your feedback and suggestions!                      │\n│                                                                  │\n╰────────────── Simplifying high-throughput plant phenotyping in R ╯\n\n# Import an orthomosaic image as a SpatRaster object\nmosaic &lt;- mosaic_input(\"wheat/wheat_ndsu.tif\")\n\nclass       : SpatRaster \nsize        : 3120, 768, 5  (nrow, ncol, nlyr)\nresolution  : 0.02771201, 0.02771201  (x, y)\nextent      : 755755.9, 755777.2, 5176788, 5176875  (xmin, xmax, ymin, ymax)\ncoord. ref. : +proj=aeqd +lat_0=90 +lon_0=1.35 +x_0=0 +y_0=0 +ellps=sphere +units=m +no_defs \nsource      : wheat_ndsu.tif \nnames       : ndsu_1, ndsu_2, ndsu_3, ndsu_4, ndsu_5 \nmin values  :    299,    548,    513,    574,   2387 \nmax values  :  13511,  13468,   9192,  20950,  48265 \n\nmosaic_plot_rgb(mosaic, stretch = \"lin\")\n\n\n\n\n\n\n\n# Create an interactive map using the RGB bands (R = 3, G = 2, B = 1)\nbm &lt;- mosaic_view(mosaic, \n                  quantiles = c(0, .97),\n                  max_pixels = 4e6,\n                  r = 3, # Red channel\n                  g = 2, # Green channel\n                  b = 1) # Blue channel\n\nℹ The number of pixels is very high, which might slow the rendering process.\n\n\nWarning in CPL_crs_from_input(x): GDAL Message 1: +init=epsg:XXXX syntax is\ndeprecated. It might return a CRS with a non-EPSG compliant axis order. Further\nmessages of this type will be suppressed.\n\nbm\n\n\n\n\n# Export the mosaic to a file (uncomment the line below to run)\n# mosaic_export(mosaic, \"my_mosaic.tif\")\n\n\n\n\n\n\nTo create a shapefile grid over the mosaic, the shapefile_build() function is used, specifying the number of rows and columns for the grid. This allows for the segmentation of the mosaic into plots that can be individually analyzed.\n\n# Create a shapefile grid over the mosaic with specified rows and columns\nshp &lt;- shapefile_build(mosaic,\n                       basemap = bm,\n                       layout = \"btlr\",\n                       plot_width = 1.2,\n                       plot_height = 2,\n                       ncol = 11, # Number of columns\n                       nrow = 20) # Number of rows\n\nbm + shapefile_view(shp, attribute = \"plot_id\")\n\n# see the size of plots\nshapefile_measures(shp)\nshapefile_export(shp, \"myfirsshape.shp\")\n\n\n\n\nShapefiles can be imported using the shapefile_input() function, which reads shapefile objects from a file. After importing the shapefile, the mosaic can be plotted in RGB using mosaic_plot_rgb(), and the shapefile can be overlaid on the mosaic using the shapefile_plot() function, which allows customization of the line width and other graphical parameters.\n\n# Import a shapefile object from a file\nshp &lt;- shapefile_input(\"wheat/wheat_ndsu_shp.rds\")\n\nSimple feature collection with 220 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 755757.8 ymin: 5176793 xmax: 755775.2 ymax: 5176870\nProjected CRS: PROJCRS[\"unknown\",\n    BASEGEOGCRS[\"unknown\",\n        DATUM[\"Unknown based on Normal Sphere (r=6370997) ellipsoid\",\n            ELLIPSOID[\"Normal Sphere (r=6370997)\",6370997,0,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]]],\n    CONVERSION[\"Modified Azimuthal Equidistant\",\n        METHOD[\"Modified Azimuthal Equidistant\",\n            ID[\"EPSG\",9832]],\n        PARAMETER[\"Latitude of natural origin\",90,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",1.35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"northing\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\nFirst 10 features:\n   unique_id block plot_id row column                       geometry\n1          1   B01   P0001   1      1 POLYGON ((755775.2 5176793,...\n2          2   B01   P0022   2      1 POLYGON ((755775.2 5176797,...\n3          3   B01   P0023   3      1 POLYGON ((755775.2 5176801,...\n4          4   B01   P0044   4      1 POLYGON ((755775.2 5176805,...\n5          5   B01   P0045   5      1 POLYGON ((755775.2 5176809,...\n6          6   B01   P0066   6      1 POLYGON ((755775.2 5176813,...\n7          7   B01   P0067   7      1 POLYGON ((755775.2 5176817,...\n8          8   B01   P0088   8      1 POLYGON ((755775.2 5176821,...\n9          9   B01   P0089   9      1 POLYGON ((755775.2 5176824,...\n10        10   B01   P0110  10      1 POLYGON ((755775.2 5176828,...\n\n# Plot the mosaic in RGB\nmosaic_plot_rgb(mosaic, stretch = \"lin\")\n\n# Overlay the imported shapefile on the mosaic with customized line width\nshapefile_plot(shp, add = TRUE, lwd = 2, col = \"red\")\n\n\n\n\n\n\n\nbm + shapefile_view(shp, attribute = \"plot_id\")\n\n\n\n\n\n\n\n\n\nA variety of vegetation indexes are available in pliman, as detailed on Tiago Olivoto’s website. These indexes can be computed using the mosaic_index() function. By specifying the RGB channels of the mosaic (e.g., R = 1, G = 2, B = 3) and selecting the desired indexes (e.g., “NGRDI” and “GLI”), the function calculates the indexes, which can be used for further analysis.\n\n# Calculate vegetation indexes (e.g., NGRDI and GLI) using the mosaic's RGB channels\nind &lt;- mosaic_index(mosaic, \n                    b = 1, # Blue channel\n                    g = 2, # Green channel\n                    r = 3, # Red channel\n                    re = 4, # Red Edge channel\n                    nir = 5, # Near-Infrared channel\n                    index = c(\"NDVI\", \"NDRE\", \"(NIR-R) / (NIR+R)\")) # List of vegetation indexes to compute\n\n── Computing rasters for 3 indices ──────────────────── Started at \"17:38:32\" ──\n\n\nWarning: Index \"(NIR-R) / (NIR+R)\" not available. Trying to compute your own\nindex.\n\n\n── 3 vegetation indices computed ─────────── Ended at \"2025-09-02 | 17:38:33\" ──\n\n\n\n\n\n\n\n\nmosaic_plot(ind[[1]])\n\n\n\n\n\n\n\nmosaic_hist(ind[[1]])\n\nWarning: [hist] a sample of 42% of the cells was used\n\n\n\n\n\n\n\n\n# segment a mosaic\nsegmented &lt;- \n  mosaic_segment(mosaic, \n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 index = \"NDVI\")\n\nmosaic_plot_rgb(segmented, stretch = \"lin\")\n\n\n\n\n\n\n\n# segment a mosaic and return a mask\nsegmented &lt;- \n  mosaic_segment(mosaic, \n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 index = \"NDVI\",\n                 invert = TRUE,\n                 return = \"mask\")\nmosaic_plot(segmented)\n\n\n\n\n\n\n\n# extract values for each plot\nindexes &lt;- mosaic_extract(ind, shp)\n\nWarning in .local(x, y, ...): Polygons transformed to raster CRS (EPSG:NA)\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |==                                                                    |   2%\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |===                                                                   |   5%\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |==========                                                            |  15%\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |============                                                          |  18%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |===============                                                       |  22%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |================                                                      |  23%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |========================                                              |  35%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |==========================                                            |  38%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |==============================                                        |  42%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |=================================                                     |  48%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |=====================================                                 |  52%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |======================================                                |  55%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |========================================                              |  58%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |============================================                          |  62%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |=============================================                         |  65%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |===============================================                       |  68%\n  |                                                                            \n  |================================================                      |  68%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |==================================================                    |  72%\n  |                                                                            \n  |===================================================                   |  72%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |====================================================                  |  75%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |======================================================                |  78%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=========================================================             |  81%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |==========================================================            |  82%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |============================================================          |  85%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |==============================================================        |  88%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |=================================================================     |  92%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |==================================================================    |  95%\n  |                                                                            \n  |===================================================================   |  95%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |====================================================================  |  98%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\nindexes\n\nSimple feature collection with 220 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 755757.8 ymin: 5176793 xmax: 755775.2 ymax: 5176870\nProjected CRS: PROJCRS[\"unknown\",\n    BASEGEOGCRS[\"unknown\",\n        DATUM[\"Unknown based on Normal Sphere (r=6370997) ellipsoid\",\n            ELLIPSOID[\"Normal Sphere (r=6370997)\",6370997,0,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]]],\n    CONVERSION[\"Modified Azimuthal Equidistant\",\n        METHOD[\"Modified Azimuthal Equidistant\",\n            ID[\"EPSG\",9832]],\n        PARAMETER[\"Latitude of natural origin\",90,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",1.35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"northing\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\nFirst 10 features:\n   unique_id block plot_id row column median.NDVI median.NDRE\n1          1   B01   P0001   1      1   0.9063697   0.6897340\n2          2   B01   P0022   2      1   0.8729471   0.6278511\n3          3   B01   P0023   3      1   0.8523978   0.5689529\n4          4   B01   P0044   4      1   0.8694811   0.5859919\n5          5   B01   P0045   5      1   0.8880474   0.6595912\n6          6   B01   P0066   6      1   0.9029454   0.6866557\n7          7   B01   P0067   7      1   0.8824696   0.6411043\n8          8   B01   P0088   8      1   0.9076901   0.6771331\n9          9   B01   P0089   9      1   0.9114776   0.6916510\n10        10   B01   P0110  10      1   0.9060094   0.6885610\n   median.(NIR-R) / (NIR+R)                       geometry\n1                 0.9063697 POLYGON ((755775.2 5176793,...\n2                 0.8729471 POLYGON ((755775.2 5176797,...\n3                 0.8523978 POLYGON ((755775.2 5176801,...\n4                 0.8694811 POLYGON ((755775.2 5176805,...\n5                 0.8880474 POLYGON ((755775.2 5176809,...\n6                 0.9029454 POLYGON ((755775.2 5176813,...\n7                 0.8824696 POLYGON ((755775.2 5176817,...\n8                 0.9076901 POLYGON ((755775.2 5176821,...\n9                 0.9114776 POLYGON ((755775.2 5176824,...\n10                0.9060094 POLYGON ((755775.2 5176828,...\n\n\n\n\n\nmosaic_analyze() is the cornerstone function in pliman for high-throughput phenotyping. It enables users to efficiently process orthomosaics and extract a wealth of data from satellite or drone imagery with just a few lines of code. In most cases, all you need is an orthomosaic (or even a .jpg image from a cellphone) and the right function parameters to unlock its full potential.\n\n# Analyze the mosaic using the defined shapefile and vegetation indexes\nres &lt;- \n  mosaic_analyze(mosaic,\n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 basemap = bm,                      # Basemap for visualization\n                 shapefile = shp,                   # Shapefile with plots\n                 plot_index = c(\"NDVI\", \"NDRE\"),    # Vegetation indexes to compute\n                 summarize_fun = c(\"median\", \"mean\", \"min\", \"max\"), # Summary statistics for each plot\n                 attribute = \"median.NDVI\")        # Attribute for mapping (e.g., NGRDI color scale)\n\n── Analyzing the mosaic ──────────────────── Started on 2025-09-02 | 17:38:40 ──\n\n\nℹ Cropping the mosaic to the shapefile extent...\n\n\n✔ Cropping the mosaic to the shapefile extent [415ms]\n\n\n\n\n\nℹ Computing vegetation indexes...\n\n\n✔ Computing vegetation indexes [545ms]\n\n\n\n\n\n── Analyzing block 1 ──\n\n\n\n\n\nℹ Extracting plot-level features...\n\n\n✔ Extracting plot-level features [929ms]\n\n\n\n\n\nℹ Binding the extracted features...\n\n\n✔ Binding the extracted features [170ms]\n\n\n\n\n\nℹ Summarizing the results...\n\n\n── Mosaic successfully analyzed ─────────── Finished on 2025-09-02 | 17:38:43 ──\n\n\nℹ Summarizing the results...\n✔ Summarizing the results [468ms]\n\n# Display the result plot\nres$result_plot\n\nSimple feature collection with 220 features and 13 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 755757.8 ymin: 5176793 xmax: 755775.2 ymax: 5176870\nProjected CRS: PROJCRS[\"unknown\",\n    BASEGEOGCRS[\"unknown\",\n        DATUM[\"Unknown based on Normal Sphere (r=6370997) ellipsoid\",\n            ELLIPSOID[\"Normal Sphere (r=6370997)\",6370997,0,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]]],\n    CONVERSION[\"Azimuthal Equidistant\",\n        METHOD[\"Azimuthal Equidistant\",\n            ID[\"EPSG\",1125]],\n        PARAMETER[\"Latitude of natural origin\",90,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",1.35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"northing\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\nFirst 10 features:\n   unique_id block plot_id row column median.NDVI median.NDRE mean.NDVI\n1          1   B01   P0001   1      1   0.9063697   0.6897340 0.9038250\n2          2   B01   P0022   2      1   0.8729471   0.6278511 0.8675194\n3          3   B01   P0023   3      1   0.8523978   0.5689529 0.8472388\n4          4   B01   P0044   4      1   0.8694811   0.5859919 0.8657323\n5          5   B01   P0045   5      1   0.8880474   0.6595912 0.8829148\n6          6   B01   P0066   6      1   0.9029454   0.6866557 0.8993441\n7          7   B01   P0067   7      1   0.8824696   0.6411043 0.8783972\n8          8   B01   P0088   8      1   0.9076901   0.6771331 0.9051014\n9          9   B01   P0089   9      1   0.9114776   0.6916510 0.9052048\n10        10   B01   P0110  10      1   0.9060094   0.6885610 0.9008401\n   mean.NDRE  min.NDVI  min.NDRE  max.NDVI  max.NDRE\n1  0.6871165 0.7621962 0.5361932 0.9345099 0.7634687\n2  0.6247696 0.6205863 0.4595068 0.9209868 0.7154057\n3  0.5668365 0.6182213 0.3848066 0.9107233 0.6940876\n4  0.5837736 0.6504017 0.4302001 0.9132165 0.6815384\n5  0.6548557 0.6766334 0.4856216 0.9194713 0.7331700\n6  0.6817299 0.7367124 0.4884622 0.9332923 0.7663096\n7  0.6382736 0.6655113 0.4731745 0.9233408 0.7468863\n8  0.6745363 0.6969521 0.4251380 0.9326490 0.7383555\n9  0.6846186 0.6435085 0.3790271 0.9324402 0.7592227\n10 0.6857442 0.6479207 0.4932948 0.9335911 0.7672631\n                         geometry\n1  POLYGON ((755775.2 5176793,...\n2  POLYGON ((755775.2 5176797,...\n3  POLYGON ((755775.2 5176801,...\n4  POLYGON ((755775.2 5176805,...\n5  POLYGON ((755775.2 5176809,...\n6  POLYGON ((755775.2 5176813,...\n7  POLYGON ((755775.2 5176817,...\n8  POLYGON ((755775.2 5176821,...\n9  POLYGON ((755775.2 5176824,...\n10 POLYGON ((755775.2 5176828,...\n\n# ndvi plus shapefile\nbm + shapefile_view(res$result_plot, attribute = \"median.NDVI\")\n\n\n\n\n\n\n\n\n\nres &lt;- \n  mosaic_analyze(mosaic,\n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 basemap = bm,  # Basemap for visualization\n                 shapefile = shp,\n                 plot_index = \"NDVI\",   \n                 attribute = \"median.NDVI\",\n                 segment_plot = TRUE)   # compute a mask and canopy coverage\n\n── Analyzing the mosaic ──────────────────── Started on 2025-09-02 | 17:38:45 ──\n\n\nℹ Cropping the mosaic to the shapefile extent...\n\n\n✔ Cropping the mosaic to the shapefile extent [288ms]\n\n\n\n\n\nℹ Computing vegetation indexes...\n\n\n✔ Computing vegetation indexes [276ms]\n\n\n\n\n\n── Analyzing block 1 ──\n\n\n\n\n\nℹ Masking vegetation from ground...\n\n\n✔ Vegetation masking completed [729ms]\n\n\n\n\n\nℹ Extracting plot-level features...\n\n\n✔ Extracting plot-level features [276ms]\n\n\n\n\n\nℹ Binding the extracted features...\n\n\n✔ Binding the extracted features [116ms]\n\n\n\n\n\nℹ Summarizing the results...\n\n\n── Mosaic successfully analyzed ─────────── Finished on 2025-09-02 | 17:38:47 ──\n\n\nℹ Summarizing the results...\n✔ Summarizing the results [318ms]\n\nbm +\n  shapefile_view(res$result_plot, attribute = \"coverage\")\n\n\n\n\n\n\n\n\nIn the example below, mosaic_analyze() is used to count, measure, and extract image indices at the block, plot, and individual levels in a lettuce trial. This process is based on an orthomosaic image, as described in this paper.\n\nA big thank you to the authors for providing the full-resolution .tif file, which enabled me to advance several functionalities in pliman, including high-throughput image analysis and data extraction at multiple levels. This kind of data sharing is invaluable for driving further innovation and tool development.\n\nThe trial was conducted using a randomized complete block design with four blocks. The researchers tested the effects of Aspergillus niger application (six different levels, combining both concentration and formulation) and three levels of phosphorus (0%, 50%, 100%) on lettuce growth.\n\n\n\nField Experiment\n\n\nIn the plimans shapefile, each plot within the four blocks is represented by a unique plot_id, such as “P0001,” “P0002,” etc. These correspond to the following treatments:\n\n\n\nPlot ID\nInoculant\nPhosphorus (%)\n\n\n\n\nP0001\nNI\n0\n\n\nP0002\nNI\n50\n\n\nP0003\nNI\n100\n\n\nP0004\nTS\n0\n\n\nP0005\nTS\n50\n\n\nP0006\nTS\n100\n\n\nP0007\nGR2\n0\n\n\nP0008\nGR2\n50\n\n\nP0009\nGR2\n100\n\n\nP0010\nGR6\n0\n\n\nP0011\nGR6\n50\n\n\nP0012\nGR6\n100\n\n\nP0013\nSC2\n0\n\n\nP0014\nSC2\n50\n\n\nP0015\nSC2\n100\n\n\nP0016\nSC6\n0\n\n\nP0017\nSC6\n50\n\n\nP0018\nSC6\n100\n\n\n\n\n\nThe mosaic_input() function is used to load the mosaic of a lettuce field, and the shapefile_input() function is used to load the corresponding shapefile that delineates the plots. You can also create a shapefile with shapefile_build() (as in the previous section) or simply define the nrow and ncol arguments in mosaic_analyze().\nIn this example, a basemap is created using a mosaic image to serve as the foundation for further visualizations. While creating a basemap is not mandatory, it can significantly speed up the process, as functions like mosaic_analyze(), shapefile_build(), and shapefile_edit() will automatically render a leaflet map if one is not provided. By pre-creating the basemap, you avoid the overhead of rendering multiple maps, making the workflow more efficient.\nAdditionally, a shapefile layer is overlaid on top of the basemap to display the levels of the inoculante factor.\n\nmos &lt;-    mosaic_input(\"lettuce/lettuce.tif\")\n\nclass       : SpatRaster \nsize        : 2998, 1456, 3  (nrow, ncol, nlyr)\nresolution  : 0.01, 0.01  (x, y)\nextent      : 236480.6, 236495.2, 7929165, 7929195  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 23S (EPSG:32723) \nsource      : lettuce.tif \nnames       : lettuce_1, lettuce_2, lettuce_3 \nmin values  :         1,         0,         0 \nmax values  :       255,       255,       255 \n\nshp &lt;- shapefile_input(\"lettuce/lettuce.rds\")\n\nSimple feature collection with 72 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 236484.2 ymin: 7929167 xmax: 236491.5 ymax: 7929194\nProjected CRS: WGS 84 / UTM zone 23S\nFirst 10 features:\n   unique_id block plot_id row column inoculante   p\n1          1    B1   B0016   1      1        SC6   0\n2          2    B1   B0011   2      1        GR6  50\n3          3    B1   B0006   3      1         TS 100\n4          4    B1   B0003   4      1         NI 100\n5          5    B1   B0013   5      1        SC2   0\n6          6    B1   B0017   6      1        SC6  50\n7          7    B1   B0009   7      1        GR2 100\n8          8    B1   B0015   8      1        SC2 100\n9          9    B1   B0010   9      1        GR6   0\n10        10    B1   B0005  10      1         TS  50\n                         geometry\n1  POLYGON ((236484.2 7929194,...\n2  POLYGON ((236484.2 7929192,...\n3  POLYGON ((236484.3 7929191,...\n4  POLYGON ((236484.4 7929189,...\n5  POLYGON ((236484.5 7929188,...\n6  POLYGON ((236484.6 7929186,...\n7  POLYGON ((236484.7 7929185,...\n8  POLYGON ((236484.8 7929183,...\n9  POLYGON ((236484.9 7929182,...\n10 POLYGON ((236485 7929180, 2...\n\n# create a basemap\nbm &lt;- mosaic_view(mos, \n                  r = 1, g = 2, b = 3,\n                  max_pixels = 2e6) # defaults is 1e6.. so here, a bit higher resolution is used\n\nℹ Using `downsample = 2` to match the max_pixels constraint.\n\nbm + shapefile_view(shp, attribute = \"p\", color_regions = ggplot_color(3))\n\n\n\n\n\n\n\n\nThere function mosaic_analyze() is all you need now. The vegetation indexes computed for each plant are defined in the object indexes. Here, the Normalized Green Red Difference Index (NGRDI), Green Leaf Index (GLI), and Blue Green Index (BGI) are used. You can find a list with all build-in vegetation indexes in pliman here.\nBy setting segment_individuals = TRUE, mosaic_analyze() shifts its focus to the individual plant level. Using a threshold-based segmentation method, it isolates each plant within a plot, enabling precise counting and measurement, provided that a higher contrast between plant and soi. While the function can also handle complex backgrounds with additional arguments, that’s not the focus here. Instead, the power of this approach lies in its ability to break down each plot into individual components, providing a detailed analysis of plant morphology, size, and distribution. This transforms high-throughput phenotyping by moving from a broad plot-level perspective to an in-depth examination of each plant, unlocking a new level of precision and insight.\n\nFor context, in the original study, the researchers manually measured the diameter of the four central plants in each plot. With mosaic_analyze(), this process is not only automated but also expanded to include every plant in the plot, providing more comprehensive data in a fraction of the time.\n\nUsing segment_index = \"GLI\", we configure the analysis to segment soil and identify individual plants based on the GLI index. The analysis will return both summary statistics for each plot and a map showing the segmented individual plants.\n\nindexes &lt;- c(\"NGRDI\", \"vNDVI\")\nan &lt;- mosaic_analyze(\n  mosaic = mos,\n  basemap = bm,\n  r = 1,\n  g = 2,\n  b = 3,\n  shapefile = shp,\n  plot_index = indexes,\n  segment_individuals = TRUE,\n  segment_index = \"GLI\"\n)\n\n── Analyzing the mosaic ──────────────────── Started on 2025-09-02 | 17:38:58 ──\n\n\nℹ Cropping the mosaic to the shapefile extent...\n\n\nWarning: ! ``segment_plot`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``segment_individuals`` must have length 1 or 4 (the number of drawn\n  polygons).\n\n\nWarning: ! ``threshold`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``watershed`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``segment_index`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``invert`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``includeopt`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``opening`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``closing`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``filter`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``erode`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``dilate`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``grid`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``lower_noise`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\n✔ Cropping the mosaic to the shapefile extent [703ms]\n\n\n\n\n\nℹ Computing vegetation indexes...\n\n\n✔ Computing vegetation indexes [1.9s]\n\n\n\n\n\n── Analyzing block 1 ──\n\n\n\n\n\nℹ Segmenting individuals within plots...\n\n\n✔ Segmenting individuals within plots [1.8s]\n\n\n\n\n\nℹ Extracting features from segmented individuals...\n\n\n✔ Extracting features from segmented individuals [233ms]\n\n\n\n\n\nℹ Extracting plot-level features...\n\n\n✔ Extracting plot-level features [192ms]\n\n\n\n\n\nℹ Binding the extracted features...\n\n\n── Analyzing block 2 ──\n\n\nℹ Binding the extracted features...\nℹ Binding the extracted features...\nℹ Binding the extracted features...\n✔ Binding the extracted features [312ms]\n\nℹ Segmenting individuals within plots...\n✔ Segmenting individuals within plots [1.5s]\n\nℹ Extracting features from segmented individuals...\n✔ Extracting features from segmented individuals [244ms]\n\nℹ Extracting plot-level features...\n✔ Extracting plot-level features [198ms]\n\nℹ Binding the extracted features...\n── Analyzing block 3 ──\nℹ Binding the extracted features...\nℹ Binding the extracted features...\n✔ Binding the extracted features [273ms]\n\nℹ Segmenting individuals within plots...\n✔ Segmenting individuals within plots [1.6s]\n\nℹ Extracting features from segmented individuals...\n✔ Extracting features from segmented individuals [257ms]\n\nℹ Extracting plot-level features...\n✔ Extracting plot-level features [237ms]\n\nℹ Binding the extracted features...\n── Analyzing block 4 ──\nℹ Binding the extracted features...\nℹ Binding the extracted features...\n✔ Binding the extracted features [276ms]\n\nℹ Segmenting individuals within plots...\n✔ Segmenting individuals within plots [1.3s]\n\nℹ Extracting features from segmented individuals...\n✔ Extracting features from segmented individuals [243ms]\n\nℹ Extracting plot-level features...\n✔ Extracting plot-level features [187ms]\n\nℹ Binding the extracted features...\n✔ Binding the extracted features [116ms]\n\nℹ Summarizing the results...\n── Mosaic successfully analyzed ─────────── Finished on 2025-09-02 | 17:39:10 ──\nℹ Summarizing the results...\n✔ Summarizing the results [974ms]\n\nbm + shapefile_view(an$result_indiv,\n                    attribute = \"diam_mean\")\n\n\n\n\n\nBelow, you can see the results at the individual plant level. Each plant within a plot is identified, segmented, and color-coded based on its measured characteristics (e.g., mean vegetation indices). While you can use the attribute argument in mosaic_analyze() to control these visualizations, there’s no need to worry—new plots can easily be generated after the results are computed, giving you full flexibility in how the data is displayed.\nFor each plot, detailed summary statistics are also returned, allowing for in-depth analysis of plant performance across the entire experiment.\n\nan$map_indiv\n\n\n\n\n\nWe can gain deeper insights by utilizing the results generated from mosaic_analyze(). Below, the data is grouped by the different levels of the inoculante factor to explore how it influences the analysis.\n\n# see the results averaged by the combination of inoculante and p factors\nlibrary(dplyr)\n\n\nAnexando pacote: 'dplyr'\n\n\nO seguinte objeto é mascarado por 'package:pliman':\n\n    %&gt;%\n\n\nOs seguintes objetos são mascarados por 'package:stats':\n\n    filter, lag\n\n\nOs seguintes objetos são mascarados por 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(emmeans)\n\nWelcome to emmeans.\nCaution: You lose important information if you filter this package's results.\nSee '? untidy'\n\nlibrary(ggplot2)\ndfino &lt;- \n  an$result_plot_summ |&gt; \n  group_by(plot_id, inoculante, p) |&gt; \n  summarise(across(where(is.numeric), mean))\n\n`summarise()` has grouped output by 'plot_id', 'inoculante'. You can override\nusing the `.groups` argument.\n\n# inoculante levels\nbm + shapefile_view(dfino, attribute = \"inoculante\", color_regions = ggplot_color(6))\n\n\n\n\n# phospurus level\nbm + shapefile_view(dfino, attribute = \"p\", color_regions = ggplot_color(3))\n\n\n\n\n# Analysis of variance\ndfanova &lt;- \n  an$result_plot_summ |&gt; \n  mutate(across(c(p, column, inoculante), as.factor))\n\nmod &lt;- aov(diam_mean ~ inoculante * p + column, data = dfanova)\nanova(mod)\n\nAnalysis of Variance Table\n\nResponse: diam_mean\n             Df   Sum Sq   Mean Sq  F value    Pr(&gt;F)    \ninoculante    5 0.001806 0.0003612   4.0183 0.0037715 ** \np             2 0.055823 0.0279113 310.4862 &lt; 2.2e-16 ***\ncolumn        3 0.001750 0.0005832   6.4875 0.0008372 ***\ninoculante:p 10 0.001330 0.0001330   1.4799 0.1742390    \nResiduals    51 0.004585 0.0000899                       \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nemm_ino &lt;- emmeans(mod, ~ inoculante)\n\nNOTE: Results may be misleading due to involvement in interactions\n\nemm_p &lt;- emmeans(mod, ~ p)\n\nNOTE: Results may be misleading due to involvement in interactions\n\npin &lt;- \n  plot(emm_ino, comparisons = TRUE, CIs = FALSE) +\n  xlim(0.15, 0.23) +\n  labs(x = \"Mean diameter (cm)\", y = \"Inoculante\")\n\npp &lt;- \n  plot(emm_p, comparisons = TRUE, CIs = FALSE) +\n  xlim(0.15, 0.23) +\n  labs(x = \"Mean diameter (cm)\", y = \"Phosphorus level (%)\")\n\nlibrary(patchwork)\npin/ pp\n\n\n\n\n\n\n\n\n\n\n\n\nIn this example, we use an RGB orthomosaic from a potato field to analyze and segment individual plants within the plots. The analysis involves loading the mosaic and corresponding shapefile, cropping the mosaic to the area defined by the shapefile, and then segmenting individual plants using a custom vegetation index. When map_individuals = TRUE is used, important metrics such as the average distance between plants and the coefficient of variation for each cropping row are also computed.\n\n# Load orthomosaic and shapefile\nmos &lt;-    mosaic_input(\"potato/potato.tif\")\nshp &lt;- shapefile_input(\"potato/potato_shp.rds\")\n\nbm &lt;- mosaic_view(mos, max_pixels = 6e6)\nbm + shapefile_view(shp)\n\nres &lt;-\n  mosaic_analyze(\n    mosaic = mos,\n    basemap = bm,\n    shapefile = shp,\n    plot_index = \"GLI\",\n    segment_individuals = TRUE,\n    map_individuals = TRUE,\n    map_direction = \"horizontal\",    # default\n    attribute = \"cv\"\n  )\n\npal &lt;- c( \"#fde725\", \"#5ec962\", \"#21918c\", \"#3b528b\", \"#440154\")\np1 &lt;- shapefile_view(res$result_plot_summ,\n                     attribute = \"cv\",\n                     color_regions = pal)\np2 &lt;- shapefile_view(res$result_indiv,\n                     type = \"centroid\",\n                     attribute = \"area\")\n\n(bm + p1) | p2\n\nThe interactive map above shows the segmented potato plants within each row. Note that some plots were not rendered due to the absence of identified plants. It is important to highlight the structure of the res object:\n\nnames(res)\n\nWhen map_individuals = TRUE is used, the result_individ_map object contains the distances between each plant within the plots. By default, the mapping occurs in the horizontal direction.\n\nres[[\"result_individ_map\"]][[\"distances\"]][[\"B01_P0001\"]]\n\nThe objects means and cvs hold the average distances and coefficients of variation, respectively.\n\n\nShow me the code\nlibrary(patchwork)\npmean &lt;-\n  ggplot(res$result_plot_summ, aes(x = mean_distance)) +\n  geom_histogram() +\n  labs(x = \"Average distance between plants\",\n       y = \"Number of plots\")\n\npcv &lt;-\n  ggplot(res$result_plot_summ, aes(x = cv)) +\n  geom_histogram(bins = 10) +\n  labs(x = \"Coefficient of variation (%)\",\n       y = \"Number of plots\")\n\npmean + pcv\n\n\nBelow, we’ll explore two contrasting plots to demonstrate how this information can be valuable for assessing plot uniformity.\n\nlibrary(dplyr)\npar(mfrow = c(2, 1))\np1 &lt;- \n  res$result_indiv |&gt; \n  filter(plot_id == \"P0184\")\n\n\n# plot \np1plot &lt;- \n  res$result_plot_summ |&gt; \n  filter(plot_id == \"P0184\")\n\n\nplot1 &lt;- mosaic_crop(mos, shapefile = p1plot, buffer = 0.2)\ncoords &lt;- p1[, c(\"x\", \"y\")] |&gt; sf::st_drop_geometry() |&gt; arrange(x)\nmosaic_plot_rgb(plot1, main = \"P0184: Average distance: 0.243 m; CV: 14.1%\")\nlines(coords, lwd = 2)\nshapefile_plot(p1plot, add = TRUE, border = \"blue\", lwd = 3)\npoints(p1$x, p1$y, pch = 16,  cex = 2, col = \"red\")\n\n\n\np2 &lt;- \n  res$result_indiv |&gt; \n  filter(plot_id == \"P0204\")\np2plot &lt;- \n  res$result_plot_summ |&gt; \n  filter(plot_id == \"P0204\")\n\nplot2 &lt;- mosaic_crop(mos, shapefile = p2plot, buffer = 0.2)\ncoords2 &lt;- p2[, c(\"x\", \"y\")] |&gt; sf::st_drop_geometry() |&gt; arrange(x)\nmosaic_plot_rgb(plot2, main = \"P0204: Average distance: 0.325 m; CV: 64.0%\")\nlines(coords2, lwd = 2)\nshapefile_plot(p2plot, add = TRUE, border = \"blue\", lwd = 3)\npoints(p2$x, p2$y, pch = 16,  cex = 2, col = \"red\")\n\n\n\n\nA Canopy Height Model (CHM) represents the height of vegetation or structures above the ground surface, making it a crucial tool for analyzing vegetation structure and biomass. It is derived by subtracting a Digital Terrain Model (DTM), which shows the bare earth surface, from a Digital Surface Model (DSM), which captures the elevation of all surface objects,like plants. By comparing these two models, the CHM provides detailed insights into the height of vegetation, enabling accurate assessments of canopy cover and plant growth in agricultural or forested landscapes.\n\n\n\n# Load DSM, DTM, mask and shapefile\ndsm &lt;- mosaic_input(\"dsm/dsm.tif\")\n\nclass       : SpatRaster \nsize        : 2770, 2834, 1  (nrow, ncol, nlyr)\nresolution  : 0.0216565, 0.0216565  (x, y)\nextent      : 734181.2, 734242.5, 4488971, 4489031  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : dsm.tif \nname        :      dsm \nmin value   : 302.4178 \nmax value   : 304.7521 \n\ndtm &lt;- mosaic_input(\"dsm/dtm.tif\")\n\nclass       : SpatRaster \nsize        : 2770, 2834, 1  (nrow, ncol, nlyr)\nresolution  : 0.0216565, 0.0216565  (x, y)\nextent      : 734181.2, 734242.5, 4488971, 4489031  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : dtm.tif \nname        :      dtm \nmin value   : 302.3617 \nmax value   : 303.6896 \n\nmsk &lt;- mosaic_input(\"dsm/mask.tif\")\n\nclass       : SpatRaster \nsize        : 6026, 5669, 1  (nrow, ncol, nlyr)\nresolution  : 0.0108282, 0.0108282  (x, y)\nextent      : 734181.2, 734242.6, 4488971, 4489036  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : mask.tif \nname        : GLI \nmin value   :   0 \nmax value   :   1 \n\northo &lt;- mosaic_input(\"dsm/ortho.tif\")\n\nclass       : SpatRaster \nsize        : 6026, 5669, 3  (nrow, ncol, nlyr)\nresolution  : 0.0108282, 0.0108282  (x, y)\nextent      : 734181.2, 734242.6, 4488971, 4489036  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : ortho.tif \ncolors RGB  : 1, 2, 3 \nnames       : ortho_1, ortho_2, ortho_3 \n\nshp &lt;- shapefile_input(\"dsm/shape.rds\")\n\nSimple feature collection with 728 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 734184.7 ymin: 4488985 xmax: 734238.9 ymax: 4489026\nProjected CRS: WGS 72BE / UTM zone 14N\nFirst 10 features:\n   unique_id block plot_id row column                       geometry\n1          1   B01   P0001   1      1 POLYGON ((734184.7 4489024,...\n2          2   B01   P0028   2      1 POLYGON ((734184.7 4489023,...\n3          3   B01   P0029   3      1 POLYGON ((734184.8 4489023,...\n4          4   B01   P0056   4      1 POLYGON ((734184.8 4489022,...\n5          5   B01   P0057   5      1 POLYGON ((734184.8 4489021,...\n6          6   B01   P0084   6      1 POLYGON ((734184.8 4489020,...\n7          7   B01   P0085   7      1 POLYGON ((734184.9 4489020,...\n8          8   B01   P0112   8      1 POLYGON ((734184.9 4489019,...\n9          9   B01   P0113   9      1 POLYGON ((734184.9 4489018,...\n10        10   B01   P0140  10      1 POLYGON ((734184.9 4489017,...\n\n# Visualize the DSM and DTM side by side. \n# The argument nc = 1 means that the plots will be displayed in a single column.\nmosaic_plot(c(dsm, dtm))\n\n\n\n\n\n\n\n# Compute the Canopy Height Model (CHM) by subtracting the DTM from the DSM.\n# The `mask` parameter specifies the regions to be used, and `mask_soil = FALSE` \n# means that areas identified by the mask are considered non-soil (i.e., representing the plants).\nres &lt;- mosaic_chm(dsm = dsm,\n                  dtm = dtm,\n                  mask = msk,\n                  mask_soil = FALSE)  \n\n── Canopy Height-Model generation ─────────────────── \"2025-09-02 | 17:39:22\" ──\n\n\nℹ Building the canopy height model...\n\n\n✔ Building the canopy height model [2s]\n\n\n\n\n# Extract canopy height values from the CHM using the provided shapefile.\n# This will associate the height values with the polygons in the shapefile.\nchmvals &lt;- mosaic_chm_extract(res, shp)\n\n# Visualize the DSM with a custom color palette to represent different elevation levels.\npal &lt;- custom_palette(c(\"#8B4513\", \"#B2DF8A\", \"forestgreen\"), n = 10)\nbm &lt;- mosaic_view(dsm, color_regions = pal)\n\nℹ Using `downsample = 3` to match the max_pixels constraint.\n\n# Overlay the shapefile on top of the DSM visualization, using the \"coverage\" attribute \n# from the shapefile to define the regions of interest.\nbm + shapefile_view(chmvals, attribute = \"q95\")\n\n\n\n\n\n\n\n\nIn field experiments, the Digital Terrain Model (DTM) is frequently obtained before sowing and represents the bare soil. But, if we could derivate DTM from DSM? If a DTM is not provided, mosaic_chm() will derive DTM from DSM using an interpolation strategy.\n\nres2 &lt;- mosaic_chm(\n  dsm,\n  mask = msk,\n  window_size = c(4, 4),\n  mask_soil = FALSE\n)\n\n── Canopy Height-Model generation ─────────────────── \"2025-09-02 | 17:39:34\" ──\n\n\nℹ Extracting ground points for each moving window...\n\n\n✔ Extracting ground points for each moving window [1.6s]\n\n\n\n\n\nℹ Interpolating ground points...\n\n\n✔ Interpolating ground points [3.4s]\n\n\n\n\n\nℹ Resampling and masking the interpolated raster...\n\n\n✔ Resampling and masking the interpolated raster [1.4s]\n\n\n\n\n\nℹ Building the canopy height model...\n\n\n✔ Building the canopy height model [2s]\n\n\n\n\n# Extract CHM values\nchmvals2 &lt;- mosaic_chm_extract(res2, shp) \n\n# Quantile 95\nbm + shapefile_view(chmvals2, attribute = \"q95\")\n\n\n\n\n# Entropy\nbm + shapefile_view(chmvals2, attribute = \"entropy\")\n\n\n\n\n# a closer look\nzoom1 &lt;- shp |&gt; filter(plot_id == \"P0267\") |&gt; sf::st_buffer(3)\nzoom2 &lt;- shp |&gt; filter(plot_id == \"P0174\") |&gt; sf::st_buffer(3)\nc1 &lt;- mosaic_crop(ortho, shapefile = zoom1)\nc2 &lt;- mosaic_crop(ortho, shapefile = zoom2)\n\npar(mfrow = c(1, 2))\nmosaic_plot_rgb(c1)\nmosaic_plot_rgb(c2)\n\n\n\n\n\n\n\npar(mfrow = c(1, 1))\n\n\n\n\n\n\nlibrary(pliman)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.3.0\n✔ purrr     1.1.0     ✔ tidyr     1.3.1\n✔ readr     2.1.5     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ forcats::%&gt;%()               masks stringr::%&gt;%(), purrr::%&gt;%(), tidyr::%&gt;%(), tibble::%&gt;%(), dplyr::%&gt;%(), pliman::%&gt;%()\n✖ tibble::column_to_rownames() masks pliman::column_to_rownames()\n✖ dplyr::filter()              masks stats::filter()\n✖ dplyr::lag()                 masks stats::lag()\n✖ tibble::remove_rownames()    masks pliman::remove_rownames()\n✖ tibble::rownames_to_column() masks pliman::rownames_to_column()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmosaic &lt;- mosaic_input(\"maturity/cropped_09-17-2024.tif\")\n\nclass       : SpatRaster \nsize        : 1435, 10627, 3  (nrow, ncol, nlyr)\nresolution  : 0.03520265, 0.03521962  (x, y)\nextent      : 532444.6, 532818.7, 4575464, 4575514  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 14N (EPSG:32614) \nsource      : cropped_09-17-2024.tif \ncolors RGB  : 1, 2, 3 \nnames       : tmp_aggregate_small_1, tmp_aggregate_small_2, tmp_aggregate_small_3 \nmin values  :                     1,                     1,                     1 \nmax values  :                   254,                   254,                   235 \n\nshapefile &lt;- shapefile_input(\"maturity/shape_mat.rds\")\n\nSimple feature collection with 576 features and 11 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 532449.6 ymin: 4575469 xmax: 532813.7 ymax: 4575509\nProjected CRS: WGS 84 / UTM zone 14N\nFirst 10 features:\n   unique_id block plot_id column row column_field row_field Maturity Date\n1       1345   B02   P0001      1   1            3        19            32\n2       1346   B02   P0007      2   1            4        19            22\n3       1347   B02   P0013      3   1            5        19            27\n4       1348   B02   P0019      4   1            6        19            27\n5       1349   B02   P0025      5   1            7        19            28\n6       1350   B02   P0031      6   1            8        19            27\n7       1351   B02   P0037      7   1            9        19            32\n8       1352   B02   P0043      8   1           10        19            33\n9       1353   B02   P0049      9   1           11        19            30\n10      1354   B02   P0055     10   1           12        19            31\n   Planting Date Baseline Maturity maturity_ground\n1     2024-05-28        2024-08-31             127\n2     2024-05-28        2024-08-31             117\n3     2024-05-28        2024-08-31             122\n4     2024-05-28        2024-08-31             122\n5     2024-05-28        2024-08-31             123\n6     2024-05-28        2024-08-31             122\n7     2024-05-28        2024-08-31             127\n8     2024-05-28        2024-08-31             128\n9     2024-05-28        2024-08-31             125\n10    2024-05-28        2024-08-31             126\n                         geometry\n1  POLYGON ((532449.6 4575484,...\n2  POLYGON ((532453.5 4575484,...\n3  POLYGON ((532457.3 4575484,...\n4  POLYGON ((532461.1 4575485,...\n5  POLYGON ((532464.9 4575485,...\n6  POLYGON ((532468.7 4575485,...\n7  POLYGON ((532472.5 4575485,...\n8  POLYGON ((532476.3 4575486,...\n9  POLYGON ((532480.1 4575486,...\n10 POLYGON ((532483.9 4575486,...\n\nngrdi &lt;-\n  rio::import(\"maturity/time_series_maturity_vndvi5.xlsx\", setclass = \"tbl\") |&gt;\n  select(block, plot_id, maturity) |&gt;\n  rename(mat_vndvi = maturity)\n\n\nmat &lt;-\n  left_join(shapefile, ngrdi) |&gt;\n  mutate(mat_vndvi = mat_vndvi,\n         diff = (mat_vndvi) - maturity_ground) |&gt;\n  mutate(diff_class = case_when(\n    between(abs(diff), 0, 3) ~ \"0 a 3\",\n    between(abs(diff), 3, 6) ~ \"3 a 6\",\n    between(abs(diff), 6, 9) ~ \"6 a 9\",\n    FALSE ~ \"&gt; 9\"\n  )) |&gt;\n  drop_na()\n\nJoining with `by = join_by(block, plot_id)`\n\ndfccc &lt;-\n  mat |&gt;\n  sf::st_drop_geometry() |&gt;\n  as.data.frame() |&gt;\n  ccc(maturity_ground, mat_vndvi) |&gt;\n  mutate(rho = paste0(\"rho[c]:~\", round(ccc, 4)),\n         rmse = paste0(\"RMSE:~\", round(rmse, 4)),\n         r = paste0(\"r:~~~\", round(r, 4)))\n\n\nmatplot &lt;- \n  mat |&gt;\n  ggplot(aes(maturity_ground, mat_vndvi)) +\n  geom_point(size = 3, alpha = 0.7, aes( color = diff_class)) +\n  scale_y_continuous(limits = c(110, 135)) +\n  scale_x_continuous(limits = c(110, 135)) +\n  geom_abline(intercept = 0, slope = 1) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Dias para maturação (observado)\",\n       y = \"Dias para maturação (predito)\") +\n  coord_equal() +\n  theme_minimal(base_size = 20) +\n  geom_text(aes(label=rho),\n            x = 112,\n            y = 135,\n            hjust = 0,\n            size = 4,\n            data = dfccc[1, ],\n            parse = TRUE) +\n  geom_text(aes(label=rmse),\n            x = 112,\n            y = 134,\n            hjust = 0,\n            size = 4,\n            data = dfccc[1, ],\n            parse = TRUE) +\n  geom_text(aes(label=r),\n            x = 112,\n            y = 133,\n            hjust = 0,\n            size = 4,\n            data = dfccc[1, ],\n            parse = TRUE)\n\nmaterr &lt;-\n  mat |&gt;\n  sf::st_drop_geometry() |&gt;\n  as.data.frame() |&gt;\n  group_by(diff_class) |&gt;\n  summarise(n = n())\n\nmaterrp &lt;- \nggplot(materr, aes(\"A\", n, fill = diff_class)) +\n  geom_col() +\n  geom_text(aes(label = n), position = \"stack\",\n            vjust = 1) +\n  theme_minimal(base_size = 14) +\n  theme(axis.text.x = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.x = element_blank()) +\n  labs(y = \"Número de parcelas experimentais\",\n       title = \"Proporção do erro de predição\",\n       fill = \"abs(dias)\")\n\nmatplot + materrp +\n  plot_layout(widths = c(0.8, 0.2))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n# criar shape\n\nbm &lt;- mosaic_view(mosaic,\n                  r = 1, g = 2, b = 3,\n                  max_pixels = 5e6)\n\nℹ The number of pixels is very high, which might slow the rendering process.\nℹ Using `downsample = 2` to match the max_pixels constraint.\n\nbm + shapefile_view(mat |&gt; sf::st_buffer(0.22), attribute = \"mat_vndvi\")\n\n\n\n\n\n\n\n\nThe plimanshiny package provides a user-friendly interface for analyzing time series data. The package allows users to import, visualize, and analyze time series data, such as satellite images, drone images, and other remote sensing data.\n\ninstall.packages(\"pak\")\npak::pkg_install(\"NEPEM-UFSC/pliman\")\npak::pkg_install(\"NEPEM-UFSC/plimanshiny\")\n\n# Open the app\nlibrary(plimanshiny)\nrun_app()",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "dia_02.html#orthomosaics",
    "href": "dia_02.html#orthomosaics",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "Orthomosaic (SpatRasters) objects can be imported and exported using the functions provided by the package. First, an orthomosaic image is imported as a SpatRaster object using the mosaic_input() function. The image can then be visualized in RGB format using the mosaic_plot_rgb() function. For interactive mapping, the mosaic_view() function can be used, specifying the RGB bands (e.g., R = 3, G = 2, B = 1) to adjust the display of the map. Additionally, the orthomosaic can be exported to a file using the mosaic_export() function.\n\nlibrary(pliman)\n\n╭ Welcome to pliman version \"3.1.1\"! ──────────────────────────────╮\n│                                                                  │\n│   Developed collaboratively by NEPEM &lt;https://nepemufsc.com&gt;     │\n│   Group lead: Prof. Tiago Olivoto                                │\n│   For citation, type `citation('pliman')`                        │\n│   We welcome your feedback and suggestions!                      │\n│                                                                  │\n╰────────────── Simplifying high-throughput plant phenotyping in R ╯\n\n# Import an orthomosaic image as a SpatRaster object\nmosaic &lt;- mosaic_input(\"wheat/wheat_ndsu.tif\")\n\nclass       : SpatRaster \nsize        : 3120, 768, 5  (nrow, ncol, nlyr)\nresolution  : 0.02771201, 0.02771201  (x, y)\nextent      : 755755.9, 755777.2, 5176788, 5176875  (xmin, xmax, ymin, ymax)\ncoord. ref. : +proj=aeqd +lat_0=90 +lon_0=1.35 +x_0=0 +y_0=0 +ellps=sphere +units=m +no_defs \nsource      : wheat_ndsu.tif \nnames       : ndsu_1, ndsu_2, ndsu_3, ndsu_4, ndsu_5 \nmin values  :    299,    548,    513,    574,   2387 \nmax values  :  13511,  13468,   9192,  20950,  48265 \n\nmosaic_plot_rgb(mosaic, stretch = \"lin\")\n\n\n\n\n\n\n\n# Create an interactive map using the RGB bands (R = 3, G = 2, B = 1)\nbm &lt;- mosaic_view(mosaic, \n                  quantiles = c(0, .97),\n                  max_pixels = 4e6,\n                  r = 3, # Red channel\n                  g = 2, # Green channel\n                  b = 1) # Blue channel\n\nℹ The number of pixels is very high, which might slow the rendering process.\n\n\nWarning in CPL_crs_from_input(x): GDAL Message 1: +init=epsg:XXXX syntax is\ndeprecated. It might return a CRS with a non-EPSG compliant axis order. Further\nmessages of this type will be suppressed.\n\nbm\n\n\n\n\n# Export the mosaic to a file (uncomment the line below to run)\n# mosaic_export(mosaic, \"my_mosaic.tif\")",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "dia_02.html#shapefile",
    "href": "dia_02.html#shapefile",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "To create a shapefile grid over the mosaic, the shapefile_build() function is used, specifying the number of rows and columns for the grid. This allows for the segmentation of the mosaic into plots that can be individually analyzed.\n\n# Create a shapefile grid over the mosaic with specified rows and columns\nshp &lt;- shapefile_build(mosaic,\n                       basemap = bm,\n                       layout = \"btlr\",\n                       plot_width = 1.2,\n                       plot_height = 2,\n                       ncol = 11, # Number of columns\n                       nrow = 20) # Number of rows\n\nbm + shapefile_view(shp, attribute = \"plot_id\")\n\n# see the size of plots\nshapefile_measures(shp)\nshapefile_export(shp, \"myfirsshape.shp\")\n\n\n\n\nShapefiles can be imported using the shapefile_input() function, which reads shapefile objects from a file. After importing the shapefile, the mosaic can be plotted in RGB using mosaic_plot_rgb(), and the shapefile can be overlaid on the mosaic using the shapefile_plot() function, which allows customization of the line width and other graphical parameters.\n\n# Import a shapefile object from a file\nshp &lt;- shapefile_input(\"wheat/wheat_ndsu_shp.rds\")\n\nSimple feature collection with 220 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 755757.8 ymin: 5176793 xmax: 755775.2 ymax: 5176870\nProjected CRS: PROJCRS[\"unknown\",\n    BASEGEOGCRS[\"unknown\",\n        DATUM[\"Unknown based on Normal Sphere (r=6370997) ellipsoid\",\n            ELLIPSOID[\"Normal Sphere (r=6370997)\",6370997,0,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]]],\n    CONVERSION[\"Modified Azimuthal Equidistant\",\n        METHOD[\"Modified Azimuthal Equidistant\",\n            ID[\"EPSG\",9832]],\n        PARAMETER[\"Latitude of natural origin\",90,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",1.35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"northing\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\nFirst 10 features:\n   unique_id block plot_id row column                       geometry\n1          1   B01   P0001   1      1 POLYGON ((755775.2 5176793,...\n2          2   B01   P0022   2      1 POLYGON ((755775.2 5176797,...\n3          3   B01   P0023   3      1 POLYGON ((755775.2 5176801,...\n4          4   B01   P0044   4      1 POLYGON ((755775.2 5176805,...\n5          5   B01   P0045   5      1 POLYGON ((755775.2 5176809,...\n6          6   B01   P0066   6      1 POLYGON ((755775.2 5176813,...\n7          7   B01   P0067   7      1 POLYGON ((755775.2 5176817,...\n8          8   B01   P0088   8      1 POLYGON ((755775.2 5176821,...\n9          9   B01   P0089   9      1 POLYGON ((755775.2 5176824,...\n10        10   B01   P0110  10      1 POLYGON ((755775.2 5176828,...\n\n# Plot the mosaic in RGB\nmosaic_plot_rgb(mosaic, stretch = \"lin\")\n\n# Overlay the imported shapefile on the mosaic with customized line width\nshapefile_plot(shp, add = TRUE, lwd = 2, col = \"red\")\n\n\n\n\n\n\n\nbm + shapefile_view(shp, attribute = \"plot_id\")",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "dia_02.html#vegetation-indexes",
    "href": "dia_02.html#vegetation-indexes",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "A variety of vegetation indexes are available in pliman, as detailed on Tiago Olivoto’s website. These indexes can be computed using the mosaic_index() function. By specifying the RGB channels of the mosaic (e.g., R = 1, G = 2, B = 3) and selecting the desired indexes (e.g., “NGRDI” and “GLI”), the function calculates the indexes, which can be used for further analysis.\n\n# Calculate vegetation indexes (e.g., NGRDI and GLI) using the mosaic's RGB channels\nind &lt;- mosaic_index(mosaic, \n                    b = 1, # Blue channel\n                    g = 2, # Green channel\n                    r = 3, # Red channel\n                    re = 4, # Red Edge channel\n                    nir = 5, # Near-Infrared channel\n                    index = c(\"NDVI\", \"NDRE\", \"(NIR-R) / (NIR+R)\")) # List of vegetation indexes to compute\n\n── Computing rasters for 3 indices ──────────────────── Started at \"17:38:32\" ──\n\n\nWarning: Index \"(NIR-R) / (NIR+R)\" not available. Trying to compute your own\nindex.\n\n\n── 3 vegetation indices computed ─────────── Ended at \"2025-09-02 | 17:38:33\" ──\n\n\n\n\n\n\n\n\nmosaic_plot(ind[[1]])\n\n\n\n\n\n\n\nmosaic_hist(ind[[1]])\n\nWarning: [hist] a sample of 42% of the cells was used\n\n\n\n\n\n\n\n\n# segment a mosaic\nsegmented &lt;- \n  mosaic_segment(mosaic, \n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 index = \"NDVI\")\n\nmosaic_plot_rgb(segmented, stretch = \"lin\")\n\n\n\n\n\n\n\n# segment a mosaic and return a mask\nsegmented &lt;- \n  mosaic_segment(mosaic, \n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 index = \"NDVI\",\n                 invert = TRUE,\n                 return = \"mask\")\nmosaic_plot(segmented)\n\n\n\n\n\n\n\n# extract values for each plot\nindexes &lt;- mosaic_extract(ind, shp)\n\nWarning in .local(x, y, ...): Polygons transformed to raster CRS (EPSG:NA)\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |==                                                                    |   2%\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |===                                                                   |   5%\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |==========                                                            |  15%\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |============                                                          |  18%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |===============                                                       |  22%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |================                                                      |  23%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |========================                                              |  35%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |==========================                                            |  38%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |==============================                                        |  42%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |=================================                                     |  48%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |=====================================                                 |  52%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |======================================                                |  55%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |========================================                              |  58%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |============================================                          |  62%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |=============================================                         |  65%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |===============================================                       |  68%\n  |                                                                            \n  |================================================                      |  68%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |==================================================                    |  72%\n  |                                                                            \n  |===================================================                   |  72%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |====================================================                  |  75%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |======================================================                |  78%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=========================================================             |  81%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |==========================================================            |  82%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |============================================================          |  85%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |==============================================================        |  88%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |=================================================================     |  92%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |==================================================================    |  95%\n  |                                                                            \n  |===================================================================   |  95%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |====================================================================  |  98%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\nindexes\n\nSimple feature collection with 220 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 755757.8 ymin: 5176793 xmax: 755775.2 ymax: 5176870\nProjected CRS: PROJCRS[\"unknown\",\n    BASEGEOGCRS[\"unknown\",\n        DATUM[\"Unknown based on Normal Sphere (r=6370997) ellipsoid\",\n            ELLIPSOID[\"Normal Sphere (r=6370997)\",6370997,0,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]]],\n    CONVERSION[\"Modified Azimuthal Equidistant\",\n        METHOD[\"Modified Azimuthal Equidistant\",\n            ID[\"EPSG\",9832]],\n        PARAMETER[\"Latitude of natural origin\",90,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",1.35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"northing\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\nFirst 10 features:\n   unique_id block plot_id row column median.NDVI median.NDRE\n1          1   B01   P0001   1      1   0.9063697   0.6897340\n2          2   B01   P0022   2      1   0.8729471   0.6278511\n3          3   B01   P0023   3      1   0.8523978   0.5689529\n4          4   B01   P0044   4      1   0.8694811   0.5859919\n5          5   B01   P0045   5      1   0.8880474   0.6595912\n6          6   B01   P0066   6      1   0.9029454   0.6866557\n7          7   B01   P0067   7      1   0.8824696   0.6411043\n8          8   B01   P0088   8      1   0.9076901   0.6771331\n9          9   B01   P0089   9      1   0.9114776   0.6916510\n10        10   B01   P0110  10      1   0.9060094   0.6885610\n   median.(NIR-R) / (NIR+R)                       geometry\n1                 0.9063697 POLYGON ((755775.2 5176793,...\n2                 0.8729471 POLYGON ((755775.2 5176797,...\n3                 0.8523978 POLYGON ((755775.2 5176801,...\n4                 0.8694811 POLYGON ((755775.2 5176805,...\n5                 0.8880474 POLYGON ((755775.2 5176809,...\n6                 0.9029454 POLYGON ((755775.2 5176813,...\n7                 0.8824696 POLYGON ((755775.2 5176817,...\n8                 0.9076901 POLYGON ((755775.2 5176821,...\n9                 0.9114776 POLYGON ((755775.2 5176824,...\n10                0.9060094 POLYGON ((755775.2 5176828,...",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "dia_02.html#the-mosaic_analyze-function",
    "href": "dia_02.html#the-mosaic_analyze-function",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "mosaic_analyze() is the cornerstone function in pliman for high-throughput phenotyping. It enables users to efficiently process orthomosaics and extract a wealth of data from satellite or drone imagery with just a few lines of code. In most cases, all you need is an orthomosaic (or even a .jpg image from a cellphone) and the right function parameters to unlock its full potential.\n\n# Analyze the mosaic using the defined shapefile and vegetation indexes\nres &lt;- \n  mosaic_analyze(mosaic,\n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 basemap = bm,                      # Basemap for visualization\n                 shapefile = shp,                   # Shapefile with plots\n                 plot_index = c(\"NDVI\", \"NDRE\"),    # Vegetation indexes to compute\n                 summarize_fun = c(\"median\", \"mean\", \"min\", \"max\"), # Summary statistics for each plot\n                 attribute = \"median.NDVI\")        # Attribute for mapping (e.g., NGRDI color scale)\n\n── Analyzing the mosaic ──────────────────── Started on 2025-09-02 | 17:38:40 ──\n\n\nℹ Cropping the mosaic to the shapefile extent...\n\n\n✔ Cropping the mosaic to the shapefile extent [415ms]\n\n\n\n\n\nℹ Computing vegetation indexes...\n\n\n✔ Computing vegetation indexes [545ms]\n\n\n\n\n\n── Analyzing block 1 ──\n\n\n\n\n\nℹ Extracting plot-level features...\n\n\n✔ Extracting plot-level features [929ms]\n\n\n\n\n\nℹ Binding the extracted features...\n\n\n✔ Binding the extracted features [170ms]\n\n\n\n\n\nℹ Summarizing the results...\n\n\n── Mosaic successfully analyzed ─────────── Finished on 2025-09-02 | 17:38:43 ──\n\n\nℹ Summarizing the results...\n✔ Summarizing the results [468ms]\n\n# Display the result plot\nres$result_plot\n\nSimple feature collection with 220 features and 13 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 755757.8 ymin: 5176793 xmax: 755775.2 ymax: 5176870\nProjected CRS: PROJCRS[\"unknown\",\n    BASEGEOGCRS[\"unknown\",\n        DATUM[\"Unknown based on Normal Sphere (r=6370997) ellipsoid\",\n            ELLIPSOID[\"Normal Sphere (r=6370997)\",6370997,0,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]]],\n    CONVERSION[\"Azimuthal Equidistant\",\n        METHOD[\"Azimuthal Equidistant\",\n            ID[\"EPSG\",1125]],\n        PARAMETER[\"Latitude of natural origin\",90,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",1.35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"northing\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\nFirst 10 features:\n   unique_id block plot_id row column median.NDVI median.NDRE mean.NDVI\n1          1   B01   P0001   1      1   0.9063697   0.6897340 0.9038250\n2          2   B01   P0022   2      1   0.8729471   0.6278511 0.8675194\n3          3   B01   P0023   3      1   0.8523978   0.5689529 0.8472388\n4          4   B01   P0044   4      1   0.8694811   0.5859919 0.8657323\n5          5   B01   P0045   5      1   0.8880474   0.6595912 0.8829148\n6          6   B01   P0066   6      1   0.9029454   0.6866557 0.8993441\n7          7   B01   P0067   7      1   0.8824696   0.6411043 0.8783972\n8          8   B01   P0088   8      1   0.9076901   0.6771331 0.9051014\n9          9   B01   P0089   9      1   0.9114776   0.6916510 0.9052048\n10        10   B01   P0110  10      1   0.9060094   0.6885610 0.9008401\n   mean.NDRE  min.NDVI  min.NDRE  max.NDVI  max.NDRE\n1  0.6871165 0.7621962 0.5361932 0.9345099 0.7634687\n2  0.6247696 0.6205863 0.4595068 0.9209868 0.7154057\n3  0.5668365 0.6182213 0.3848066 0.9107233 0.6940876\n4  0.5837736 0.6504017 0.4302001 0.9132165 0.6815384\n5  0.6548557 0.6766334 0.4856216 0.9194713 0.7331700\n6  0.6817299 0.7367124 0.4884622 0.9332923 0.7663096\n7  0.6382736 0.6655113 0.4731745 0.9233408 0.7468863\n8  0.6745363 0.6969521 0.4251380 0.9326490 0.7383555\n9  0.6846186 0.6435085 0.3790271 0.9324402 0.7592227\n10 0.6857442 0.6479207 0.4932948 0.9335911 0.7672631\n                         geometry\n1  POLYGON ((755775.2 5176793,...\n2  POLYGON ((755775.2 5176797,...\n3  POLYGON ((755775.2 5176801,...\n4  POLYGON ((755775.2 5176805,...\n5  POLYGON ((755775.2 5176809,...\n6  POLYGON ((755775.2 5176813,...\n7  POLYGON ((755775.2 5176817,...\n8  POLYGON ((755775.2 5176821,...\n9  POLYGON ((755775.2 5176824,...\n10 POLYGON ((755775.2 5176828,...\n\n# ndvi plus shapefile\nbm + shapefile_view(res$result_plot, attribute = \"median.NDVI\")",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "dia_02.html#segment-the-plots",
    "href": "dia_02.html#segment-the-plots",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "res &lt;- \n  mosaic_analyze(mosaic,\n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 basemap = bm,  # Basemap for visualization\n                 shapefile = shp,\n                 plot_index = \"NDVI\",   \n                 attribute = \"median.NDVI\",\n                 segment_plot = TRUE)   # compute a mask and canopy coverage\n\n── Analyzing the mosaic ──────────────────── Started on 2025-09-02 | 17:38:45 ──\n\n\nℹ Cropping the mosaic to the shapefile extent...\n\n\n✔ Cropping the mosaic to the shapefile extent [288ms]\n\n\n\n\n\nℹ Computing vegetation indexes...\n\n\n✔ Computing vegetation indexes [276ms]\n\n\n\n\n\n── Analyzing block 1 ──\n\n\n\n\n\nℹ Masking vegetation from ground...\n\n\n✔ Vegetation masking completed [729ms]\n\n\n\n\n\nℹ Extracting plot-level features...\n\n\n✔ Extracting plot-level features [276ms]\n\n\n\n\n\nℹ Binding the extracted features...\n\n\n✔ Binding the extracted features [116ms]\n\n\n\n\n\nℹ Summarizing the results...\n\n\n── Mosaic successfully analyzed ─────────── Finished on 2025-09-02 | 17:38:47 ──\n\n\nℹ Summarizing the results...\n✔ Summarizing the results [318ms]\n\nbm +\n  shapefile_view(res$result_plot, attribute = \"coverage\")",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "dia_02.html#count-and-measure-plants",
    "href": "dia_02.html#count-and-measure-plants",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "In the example below, mosaic_analyze() is used to count, measure, and extract image indices at the block, plot, and individual levels in a lettuce trial. This process is based on an orthomosaic image, as described in this paper.\n\nA big thank you to the authors for providing the full-resolution .tif file, which enabled me to advance several functionalities in pliman, including high-throughput image analysis and data extraction at multiple levels. This kind of data sharing is invaluable for driving further innovation and tool development.\n\nThe trial was conducted using a randomized complete block design with four blocks. The researchers tested the effects of Aspergillus niger application (six different levels, combining both concentration and formulation) and three levels of phosphorus (0%, 50%, 100%) on lettuce growth.\n\n\n\nField Experiment\n\n\nIn the plimans shapefile, each plot within the four blocks is represented by a unique plot_id, such as “P0001,” “P0002,” etc. These correspond to the following treatments:\n\n\n\nPlot ID\nInoculant\nPhosphorus (%)\n\n\n\n\nP0001\nNI\n0\n\n\nP0002\nNI\n50\n\n\nP0003\nNI\n100\n\n\nP0004\nTS\n0\n\n\nP0005\nTS\n50\n\n\nP0006\nTS\n100\n\n\nP0007\nGR2\n0\n\n\nP0008\nGR2\n50\n\n\nP0009\nGR2\n100\n\n\nP0010\nGR6\n0\n\n\nP0011\nGR6\n50\n\n\nP0012\nGR6\n100\n\n\nP0013\nSC2\n0\n\n\nP0014\nSC2\n50\n\n\nP0015\nSC2\n100\n\n\nP0016\nSC6\n0\n\n\nP0017\nSC6\n50\n\n\nP0018\nSC6\n100\n\n\n\n\n\nThe mosaic_input() function is used to load the mosaic of a lettuce field, and the shapefile_input() function is used to load the corresponding shapefile that delineates the plots. You can also create a shapefile with shapefile_build() (as in the previous section) or simply define the nrow and ncol arguments in mosaic_analyze().\nIn this example, a basemap is created using a mosaic image to serve as the foundation for further visualizations. While creating a basemap is not mandatory, it can significantly speed up the process, as functions like mosaic_analyze(), shapefile_build(), and shapefile_edit() will automatically render a leaflet map if one is not provided. By pre-creating the basemap, you avoid the overhead of rendering multiple maps, making the workflow more efficient.\nAdditionally, a shapefile layer is overlaid on top of the basemap to display the levels of the inoculante factor.\n\nmos &lt;-    mosaic_input(\"lettuce/lettuce.tif\")\n\nclass       : SpatRaster \nsize        : 2998, 1456, 3  (nrow, ncol, nlyr)\nresolution  : 0.01, 0.01  (x, y)\nextent      : 236480.6, 236495.2, 7929165, 7929195  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 23S (EPSG:32723) \nsource      : lettuce.tif \nnames       : lettuce_1, lettuce_2, lettuce_3 \nmin values  :         1,         0,         0 \nmax values  :       255,       255,       255 \n\nshp &lt;- shapefile_input(\"lettuce/lettuce.rds\")\n\nSimple feature collection with 72 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 236484.2 ymin: 7929167 xmax: 236491.5 ymax: 7929194\nProjected CRS: WGS 84 / UTM zone 23S\nFirst 10 features:\n   unique_id block plot_id row column inoculante   p\n1          1    B1   B0016   1      1        SC6   0\n2          2    B1   B0011   2      1        GR6  50\n3          3    B1   B0006   3      1         TS 100\n4          4    B1   B0003   4      1         NI 100\n5          5    B1   B0013   5      1        SC2   0\n6          6    B1   B0017   6      1        SC6  50\n7          7    B1   B0009   7      1        GR2 100\n8          8    B1   B0015   8      1        SC2 100\n9          9    B1   B0010   9      1        GR6   0\n10        10    B1   B0005  10      1         TS  50\n                         geometry\n1  POLYGON ((236484.2 7929194,...\n2  POLYGON ((236484.2 7929192,...\n3  POLYGON ((236484.3 7929191,...\n4  POLYGON ((236484.4 7929189,...\n5  POLYGON ((236484.5 7929188,...\n6  POLYGON ((236484.6 7929186,...\n7  POLYGON ((236484.7 7929185,...\n8  POLYGON ((236484.8 7929183,...\n9  POLYGON ((236484.9 7929182,...\n10 POLYGON ((236485 7929180, 2...\n\n# create a basemap\nbm &lt;- mosaic_view(mos, \n                  r = 1, g = 2, b = 3,\n                  max_pixels = 2e6) # defaults is 1e6.. so here, a bit higher resolution is used\n\nℹ Using `downsample = 2` to match the max_pixels constraint.\n\nbm + shapefile_view(shp, attribute = \"p\", color_regions = ggplot_color(3))\n\n\n\n\n\n\n\n\nThere function mosaic_analyze() is all you need now. The vegetation indexes computed for each plant are defined in the object indexes. Here, the Normalized Green Red Difference Index (NGRDI), Green Leaf Index (GLI), and Blue Green Index (BGI) are used. You can find a list with all build-in vegetation indexes in pliman here.\nBy setting segment_individuals = TRUE, mosaic_analyze() shifts its focus to the individual plant level. Using a threshold-based segmentation method, it isolates each plant within a plot, enabling precise counting and measurement, provided that a higher contrast between plant and soi. While the function can also handle complex backgrounds with additional arguments, that’s not the focus here. Instead, the power of this approach lies in its ability to break down each plot into individual components, providing a detailed analysis of plant morphology, size, and distribution. This transforms high-throughput phenotyping by moving from a broad plot-level perspective to an in-depth examination of each plant, unlocking a new level of precision and insight.\n\nFor context, in the original study, the researchers manually measured the diameter of the four central plants in each plot. With mosaic_analyze(), this process is not only automated but also expanded to include every plant in the plot, providing more comprehensive data in a fraction of the time.\n\nUsing segment_index = \"GLI\", we configure the analysis to segment soil and identify individual plants based on the GLI index. The analysis will return both summary statistics for each plot and a map showing the segmented individual plants.\n\nindexes &lt;- c(\"NGRDI\", \"vNDVI\")\nan &lt;- mosaic_analyze(\n  mosaic = mos,\n  basemap = bm,\n  r = 1,\n  g = 2,\n  b = 3,\n  shapefile = shp,\n  plot_index = indexes,\n  segment_individuals = TRUE,\n  segment_index = \"GLI\"\n)\n\n── Analyzing the mosaic ──────────────────── Started on 2025-09-02 | 17:38:58 ──\n\n\nℹ Cropping the mosaic to the shapefile extent...\n\n\nWarning: ! ``segment_plot`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``segment_individuals`` must have length 1 or 4 (the number of drawn\n  polygons).\n\n\nWarning: ! ``threshold`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``watershed`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``segment_index`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``invert`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``includeopt`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``opening`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``closing`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``filter`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``erode`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``dilate`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``grid`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``lower_noise`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\n✔ Cropping the mosaic to the shapefile extent [703ms]\n\n\n\n\n\nℹ Computing vegetation indexes...\n\n\n✔ Computing vegetation indexes [1.9s]\n\n\n\n\n\n── Analyzing block 1 ──\n\n\n\n\n\nℹ Segmenting individuals within plots...\n\n\n✔ Segmenting individuals within plots [1.8s]\n\n\n\n\n\nℹ Extracting features from segmented individuals...\n\n\n✔ Extracting features from segmented individuals [233ms]\n\n\n\n\n\nℹ Extracting plot-level features...\n\n\n✔ Extracting plot-level features [192ms]\n\n\n\n\n\nℹ Binding the extracted features...\n\n\n── Analyzing block 2 ──\n\n\nℹ Binding the extracted features...\nℹ Binding the extracted features...\nℹ Binding the extracted features...\n✔ Binding the extracted features [312ms]\n\nℹ Segmenting individuals within plots...\n✔ Segmenting individuals within plots [1.5s]\n\nℹ Extracting features from segmented individuals...\n✔ Extracting features from segmented individuals [244ms]\n\nℹ Extracting plot-level features...\n✔ Extracting plot-level features [198ms]\n\nℹ Binding the extracted features...\n── Analyzing block 3 ──\nℹ Binding the extracted features...\nℹ Binding the extracted features...\n✔ Binding the extracted features [273ms]\n\nℹ Segmenting individuals within plots...\n✔ Segmenting individuals within plots [1.6s]\n\nℹ Extracting features from segmented individuals...\n✔ Extracting features from segmented individuals [257ms]\n\nℹ Extracting plot-level features...\n✔ Extracting plot-level features [237ms]\n\nℹ Binding the extracted features...\n── Analyzing block 4 ──\nℹ Binding the extracted features...\nℹ Binding the extracted features...\n✔ Binding the extracted features [276ms]\n\nℹ Segmenting individuals within plots...\n✔ Segmenting individuals within plots [1.3s]\n\nℹ Extracting features from segmented individuals...\n✔ Extracting features from segmented individuals [243ms]\n\nℹ Extracting plot-level features...\n✔ Extracting plot-level features [187ms]\n\nℹ Binding the extracted features...\n✔ Binding the extracted features [116ms]\n\nℹ Summarizing the results...\n── Mosaic successfully analyzed ─────────── Finished on 2025-09-02 | 17:39:10 ──\nℹ Summarizing the results...\n✔ Summarizing the results [974ms]\n\nbm + shapefile_view(an$result_indiv,\n                    attribute = \"diam_mean\")\n\n\n\n\n\nBelow, you can see the results at the individual plant level. Each plant within a plot is identified, segmented, and color-coded based on its measured characteristics (e.g., mean vegetation indices). While you can use the attribute argument in mosaic_analyze() to control these visualizations, there’s no need to worry—new plots can easily be generated after the results are computed, giving you full flexibility in how the data is displayed.\nFor each plot, detailed summary statistics are also returned, allowing for in-depth analysis of plant performance across the entire experiment.\n\nan$map_indiv\n\n\n\n\n\nWe can gain deeper insights by utilizing the results generated from mosaic_analyze(). Below, the data is grouped by the different levels of the inoculante factor to explore how it influences the analysis.\n\n# see the results averaged by the combination of inoculante and p factors\nlibrary(dplyr)\n\n\nAnexando pacote: 'dplyr'\n\n\nO seguinte objeto é mascarado por 'package:pliman':\n\n    %&gt;%\n\n\nOs seguintes objetos são mascarados por 'package:stats':\n\n    filter, lag\n\n\nOs seguintes objetos são mascarados por 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(emmeans)\n\nWelcome to emmeans.\nCaution: You lose important information if you filter this package's results.\nSee '? untidy'\n\nlibrary(ggplot2)\ndfino &lt;- \n  an$result_plot_summ |&gt; \n  group_by(plot_id, inoculante, p) |&gt; \n  summarise(across(where(is.numeric), mean))\n\n`summarise()` has grouped output by 'plot_id', 'inoculante'. You can override\nusing the `.groups` argument.\n\n# inoculante levels\nbm + shapefile_view(dfino, attribute = \"inoculante\", color_regions = ggplot_color(6))\n\n\n\n\n# phospurus level\nbm + shapefile_view(dfino, attribute = \"p\", color_regions = ggplot_color(3))\n\n\n\n\n# Analysis of variance\ndfanova &lt;- \n  an$result_plot_summ |&gt; \n  mutate(across(c(p, column, inoculante), as.factor))\n\nmod &lt;- aov(diam_mean ~ inoculante * p + column, data = dfanova)\nanova(mod)\n\nAnalysis of Variance Table\n\nResponse: diam_mean\n             Df   Sum Sq   Mean Sq  F value    Pr(&gt;F)    \ninoculante    5 0.001806 0.0003612   4.0183 0.0037715 ** \np             2 0.055823 0.0279113 310.4862 &lt; 2.2e-16 ***\ncolumn        3 0.001750 0.0005832   6.4875 0.0008372 ***\ninoculante:p 10 0.001330 0.0001330   1.4799 0.1742390    \nResiduals    51 0.004585 0.0000899                       \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nemm_ino &lt;- emmeans(mod, ~ inoculante)\n\nNOTE: Results may be misleading due to involvement in interactions\n\nemm_p &lt;- emmeans(mod, ~ p)\n\nNOTE: Results may be misleading due to involvement in interactions\n\npin &lt;- \n  plot(emm_ino, comparisons = TRUE, CIs = FALSE) +\n  xlim(0.15, 0.23) +\n  labs(x = \"Mean diameter (cm)\", y = \"Inoculante\")\n\npp &lt;- \n  plot(emm_p, comparisons = TRUE, CIs = FALSE) +\n  xlim(0.15, 0.23) +\n  labs(x = \"Mean diameter (cm)\", y = \"Phosphorus level (%)\")\n\nlibrary(patchwork)\npin/ pp",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "dia_02.html#mapping-plants-within-plots",
    "href": "dia_02.html#mapping-plants-within-plots",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "In this example, we use an RGB orthomosaic from a potato field to analyze and segment individual plants within the plots. The analysis involves loading the mosaic and corresponding shapefile, cropping the mosaic to the area defined by the shapefile, and then segmenting individual plants using a custom vegetation index. When map_individuals = TRUE is used, important metrics such as the average distance between plants and the coefficient of variation for each cropping row are also computed.\n\n# Load orthomosaic and shapefile\nmos &lt;-    mosaic_input(\"potato/potato.tif\")\nshp &lt;- shapefile_input(\"potato/potato_shp.rds\")\n\nbm &lt;- mosaic_view(mos, max_pixels = 6e6)\nbm + shapefile_view(shp)\n\nres &lt;-\n  mosaic_analyze(\n    mosaic = mos,\n    basemap = bm,\n    shapefile = shp,\n    plot_index = \"GLI\",\n    segment_individuals = TRUE,\n    map_individuals = TRUE,\n    map_direction = \"horizontal\",    # default\n    attribute = \"cv\"\n  )\n\npal &lt;- c( \"#fde725\", \"#5ec962\", \"#21918c\", \"#3b528b\", \"#440154\")\np1 &lt;- shapefile_view(res$result_plot_summ,\n                     attribute = \"cv\",\n                     color_regions = pal)\np2 &lt;- shapefile_view(res$result_indiv,\n                     type = \"centroid\",\n                     attribute = \"area\")\n\n(bm + p1) | p2\n\nThe interactive map above shows the segmented potato plants within each row. Note that some plots were not rendered due to the absence of identified plants. It is important to highlight the structure of the res object:\n\nnames(res)\n\nWhen map_individuals = TRUE is used, the result_individ_map object contains the distances between each plant within the plots. By default, the mapping occurs in the horizontal direction.\n\nres[[\"result_individ_map\"]][[\"distances\"]][[\"B01_P0001\"]]\n\nThe objects means and cvs hold the average distances and coefficients of variation, respectively.\n\n\nShow me the code\nlibrary(patchwork)\npmean &lt;-\n  ggplot(res$result_plot_summ, aes(x = mean_distance)) +\n  geom_histogram() +\n  labs(x = \"Average distance between plants\",\n       y = \"Number of plots\")\n\npcv &lt;-\n  ggplot(res$result_plot_summ, aes(x = cv)) +\n  geom_histogram(bins = 10) +\n  labs(x = \"Coefficient of variation (%)\",\n       y = \"Number of plots\")\n\npmean + pcv\n\n\nBelow, we’ll explore two contrasting plots to demonstrate how this information can be valuable for assessing plot uniformity.\n\nlibrary(dplyr)\npar(mfrow = c(2, 1))\np1 &lt;- \n  res$result_indiv |&gt; \n  filter(plot_id == \"P0184\")\n\n\n# plot \np1plot &lt;- \n  res$result_plot_summ |&gt; \n  filter(plot_id == \"P0184\")\n\n\nplot1 &lt;- mosaic_crop(mos, shapefile = p1plot, buffer = 0.2)\ncoords &lt;- p1[, c(\"x\", \"y\")] |&gt; sf::st_drop_geometry() |&gt; arrange(x)\nmosaic_plot_rgb(plot1, main = \"P0184: Average distance: 0.243 m; CV: 14.1%\")\nlines(coords, lwd = 2)\nshapefile_plot(p1plot, add = TRUE, border = \"blue\", lwd = 3)\npoints(p1$x, p1$y, pch = 16,  cex = 2, col = \"red\")\n\n\n\np2 &lt;- \n  res$result_indiv |&gt; \n  filter(plot_id == \"P0204\")\np2plot &lt;- \n  res$result_plot_summ |&gt; \n  filter(plot_id == \"P0204\")\n\nplot2 &lt;- mosaic_crop(mos, shapefile = p2plot, buffer = 0.2)\ncoords2 &lt;- p2[, c(\"x\", \"y\")] |&gt; sf::st_drop_geometry() |&gt; arrange(x)\nmosaic_plot_rgb(plot2, main = \"P0204: Average distance: 0.325 m; CV: 64.0%\")\nlines(coords2, lwd = 2)\nshapefile_plot(p2plot, add = TRUE, border = \"blue\", lwd = 3)\npoints(p2$x, p2$y, pch = 16,  cex = 2, col = \"red\")",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "dia_02.html#canopy-height-models",
    "href": "dia_02.html#canopy-height-models",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "A Canopy Height Model (CHM) represents the height of vegetation or structures above the ground surface, making it a crucial tool for analyzing vegetation structure and biomass. It is derived by subtracting a Digital Terrain Model (DTM), which shows the bare earth surface, from a Digital Surface Model (DSM), which captures the elevation of all surface objects,like plants. By comparing these two models, the CHM provides detailed insights into the height of vegetation, enabling accurate assessments of canopy cover and plant growth in agricultural or forested landscapes.\n\n\n\n# Load DSM, DTM, mask and shapefile\ndsm &lt;- mosaic_input(\"dsm/dsm.tif\")\n\nclass       : SpatRaster \nsize        : 2770, 2834, 1  (nrow, ncol, nlyr)\nresolution  : 0.0216565, 0.0216565  (x, y)\nextent      : 734181.2, 734242.5, 4488971, 4489031  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : dsm.tif \nname        :      dsm \nmin value   : 302.4178 \nmax value   : 304.7521 \n\ndtm &lt;- mosaic_input(\"dsm/dtm.tif\")\n\nclass       : SpatRaster \nsize        : 2770, 2834, 1  (nrow, ncol, nlyr)\nresolution  : 0.0216565, 0.0216565  (x, y)\nextent      : 734181.2, 734242.5, 4488971, 4489031  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : dtm.tif \nname        :      dtm \nmin value   : 302.3617 \nmax value   : 303.6896 \n\nmsk &lt;- mosaic_input(\"dsm/mask.tif\")\n\nclass       : SpatRaster \nsize        : 6026, 5669, 1  (nrow, ncol, nlyr)\nresolution  : 0.0108282, 0.0108282  (x, y)\nextent      : 734181.2, 734242.6, 4488971, 4489036  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : mask.tif \nname        : GLI \nmin value   :   0 \nmax value   :   1 \n\northo &lt;- mosaic_input(\"dsm/ortho.tif\")\n\nclass       : SpatRaster \nsize        : 6026, 5669, 3  (nrow, ncol, nlyr)\nresolution  : 0.0108282, 0.0108282  (x, y)\nextent      : 734181.2, 734242.6, 4488971, 4489036  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : ortho.tif \ncolors RGB  : 1, 2, 3 \nnames       : ortho_1, ortho_2, ortho_3 \n\nshp &lt;- shapefile_input(\"dsm/shape.rds\")\n\nSimple feature collection with 728 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 734184.7 ymin: 4488985 xmax: 734238.9 ymax: 4489026\nProjected CRS: WGS 72BE / UTM zone 14N\nFirst 10 features:\n   unique_id block plot_id row column                       geometry\n1          1   B01   P0001   1      1 POLYGON ((734184.7 4489024,...\n2          2   B01   P0028   2      1 POLYGON ((734184.7 4489023,...\n3          3   B01   P0029   3      1 POLYGON ((734184.8 4489023,...\n4          4   B01   P0056   4      1 POLYGON ((734184.8 4489022,...\n5          5   B01   P0057   5      1 POLYGON ((734184.8 4489021,...\n6          6   B01   P0084   6      1 POLYGON ((734184.8 4489020,...\n7          7   B01   P0085   7      1 POLYGON ((734184.9 4489020,...\n8          8   B01   P0112   8      1 POLYGON ((734184.9 4489019,...\n9          9   B01   P0113   9      1 POLYGON ((734184.9 4489018,...\n10        10   B01   P0140  10      1 POLYGON ((734184.9 4489017,...\n\n# Visualize the DSM and DTM side by side. \n# The argument nc = 1 means that the plots will be displayed in a single column.\nmosaic_plot(c(dsm, dtm))\n\n\n\n\n\n\n\n# Compute the Canopy Height Model (CHM) by subtracting the DTM from the DSM.\n# The `mask` parameter specifies the regions to be used, and `mask_soil = FALSE` \n# means that areas identified by the mask are considered non-soil (i.e., representing the plants).\nres &lt;- mosaic_chm(dsm = dsm,\n                  dtm = dtm,\n                  mask = msk,\n                  mask_soil = FALSE)  \n\n── Canopy Height-Model generation ─────────────────── \"2025-09-02 | 17:39:22\" ──\n\n\nℹ Building the canopy height model...\n\n\n✔ Building the canopy height model [2s]\n\n\n\n\n# Extract canopy height values from the CHM using the provided shapefile.\n# This will associate the height values with the polygons in the shapefile.\nchmvals &lt;- mosaic_chm_extract(res, shp)\n\n# Visualize the DSM with a custom color palette to represent different elevation levels.\npal &lt;- custom_palette(c(\"#8B4513\", \"#B2DF8A\", \"forestgreen\"), n = 10)\nbm &lt;- mosaic_view(dsm, color_regions = pal)\n\nℹ Using `downsample = 3` to match the max_pixels constraint.\n\n# Overlay the shapefile on top of the DSM visualization, using the \"coverage\" attribute \n# from the shapefile to define the regions of interest.\nbm + shapefile_view(chmvals, attribute = \"q95\")\n\n\n\n\n\n\n\n\nIn field experiments, the Digital Terrain Model (DTM) is frequently obtained before sowing and represents the bare soil. But, if we could derivate DTM from DSM? If a DTM is not provided, mosaic_chm() will derive DTM from DSM using an interpolation strategy.\n\nres2 &lt;- mosaic_chm(\n  dsm,\n  mask = msk,\n  window_size = c(4, 4),\n  mask_soil = FALSE\n)\n\n── Canopy Height-Model generation ─────────────────── \"2025-09-02 | 17:39:34\" ──\n\n\nℹ Extracting ground points for each moving window...\n\n\n✔ Extracting ground points for each moving window [1.6s]\n\n\n\n\n\nℹ Interpolating ground points...\n\n\n✔ Interpolating ground points [3.4s]\n\n\n\n\n\nℹ Resampling and masking the interpolated raster...\n\n\n✔ Resampling and masking the interpolated raster [1.4s]\n\n\n\n\n\nℹ Building the canopy height model...\n\n\n✔ Building the canopy height model [2s]\n\n\n\n\n# Extract CHM values\nchmvals2 &lt;- mosaic_chm_extract(res2, shp) \n\n# Quantile 95\nbm + shapefile_view(chmvals2, attribute = \"q95\")\n\n\n\n\n# Entropy\nbm + shapefile_view(chmvals2, attribute = \"entropy\")\n\n\n\n\n# a closer look\nzoom1 &lt;- shp |&gt; filter(plot_id == \"P0267\") |&gt; sf::st_buffer(3)\nzoom2 &lt;- shp |&gt; filter(plot_id == \"P0174\") |&gt; sf::st_buffer(3)\nc1 &lt;- mosaic_crop(ortho, shapefile = zoom1)\nc2 &lt;- mosaic_crop(ortho, shapefile = zoom2)\n\npar(mfrow = c(1, 2))\nmosaic_plot_rgb(c1)\nmosaic_plot_rgb(c2)\n\n\n\n\n\n\n\npar(mfrow = c(1, 1))",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "dia_02.html#plant-maturity",
    "href": "dia_02.html#plant-maturity",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "library(pliman)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.3.0\n✔ purrr     1.1.0     ✔ tidyr     1.3.1\n✔ readr     2.1.5     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ forcats::%&gt;%()               masks stringr::%&gt;%(), purrr::%&gt;%(), tidyr::%&gt;%(), tibble::%&gt;%(), dplyr::%&gt;%(), pliman::%&gt;%()\n✖ tibble::column_to_rownames() masks pliman::column_to_rownames()\n✖ dplyr::filter()              masks stats::filter()\n✖ dplyr::lag()                 masks stats::lag()\n✖ tibble::remove_rownames()    masks pliman::remove_rownames()\n✖ tibble::rownames_to_column() masks pliman::rownames_to_column()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmosaic &lt;- mosaic_input(\"maturity/cropped_09-17-2024.tif\")\n\nclass       : SpatRaster \nsize        : 1435, 10627, 3  (nrow, ncol, nlyr)\nresolution  : 0.03520265, 0.03521962  (x, y)\nextent      : 532444.6, 532818.7, 4575464, 4575514  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 14N (EPSG:32614) \nsource      : cropped_09-17-2024.tif \ncolors RGB  : 1, 2, 3 \nnames       : tmp_aggregate_small_1, tmp_aggregate_small_2, tmp_aggregate_small_3 \nmin values  :                     1,                     1,                     1 \nmax values  :                   254,                   254,                   235 \n\nshapefile &lt;- shapefile_input(\"maturity/shape_mat.rds\")\n\nSimple feature collection with 576 features and 11 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 532449.6 ymin: 4575469 xmax: 532813.7 ymax: 4575509\nProjected CRS: WGS 84 / UTM zone 14N\nFirst 10 features:\n   unique_id block plot_id column row column_field row_field Maturity Date\n1       1345   B02   P0001      1   1            3        19            32\n2       1346   B02   P0007      2   1            4        19            22\n3       1347   B02   P0013      3   1            5        19            27\n4       1348   B02   P0019      4   1            6        19            27\n5       1349   B02   P0025      5   1            7        19            28\n6       1350   B02   P0031      6   1            8        19            27\n7       1351   B02   P0037      7   1            9        19            32\n8       1352   B02   P0043      8   1           10        19            33\n9       1353   B02   P0049      9   1           11        19            30\n10      1354   B02   P0055     10   1           12        19            31\n   Planting Date Baseline Maturity maturity_ground\n1     2024-05-28        2024-08-31             127\n2     2024-05-28        2024-08-31             117\n3     2024-05-28        2024-08-31             122\n4     2024-05-28        2024-08-31             122\n5     2024-05-28        2024-08-31             123\n6     2024-05-28        2024-08-31             122\n7     2024-05-28        2024-08-31             127\n8     2024-05-28        2024-08-31             128\n9     2024-05-28        2024-08-31             125\n10    2024-05-28        2024-08-31             126\n                         geometry\n1  POLYGON ((532449.6 4575484,...\n2  POLYGON ((532453.5 4575484,...\n3  POLYGON ((532457.3 4575484,...\n4  POLYGON ((532461.1 4575485,...\n5  POLYGON ((532464.9 4575485,...\n6  POLYGON ((532468.7 4575485,...\n7  POLYGON ((532472.5 4575485,...\n8  POLYGON ((532476.3 4575486,...\n9  POLYGON ((532480.1 4575486,...\n10 POLYGON ((532483.9 4575486,...\n\nngrdi &lt;-\n  rio::import(\"maturity/time_series_maturity_vndvi5.xlsx\", setclass = \"tbl\") |&gt;\n  select(block, plot_id, maturity) |&gt;\n  rename(mat_vndvi = maturity)\n\n\nmat &lt;-\n  left_join(shapefile, ngrdi) |&gt;\n  mutate(mat_vndvi = mat_vndvi,\n         diff = (mat_vndvi) - maturity_ground) |&gt;\n  mutate(diff_class = case_when(\n    between(abs(diff), 0, 3) ~ \"0 a 3\",\n    between(abs(diff), 3, 6) ~ \"3 a 6\",\n    between(abs(diff), 6, 9) ~ \"6 a 9\",\n    FALSE ~ \"&gt; 9\"\n  )) |&gt;\n  drop_na()\n\nJoining with `by = join_by(block, plot_id)`\n\ndfccc &lt;-\n  mat |&gt;\n  sf::st_drop_geometry() |&gt;\n  as.data.frame() |&gt;\n  ccc(maturity_ground, mat_vndvi) |&gt;\n  mutate(rho = paste0(\"rho[c]:~\", round(ccc, 4)),\n         rmse = paste0(\"RMSE:~\", round(rmse, 4)),\n         r = paste0(\"r:~~~\", round(r, 4)))\n\n\nmatplot &lt;- \n  mat |&gt;\n  ggplot(aes(maturity_ground, mat_vndvi)) +\n  geom_point(size = 3, alpha = 0.7, aes( color = diff_class)) +\n  scale_y_continuous(limits = c(110, 135)) +\n  scale_x_continuous(limits = c(110, 135)) +\n  geom_abline(intercept = 0, slope = 1) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Dias para maturação (observado)\",\n       y = \"Dias para maturação (predito)\") +\n  coord_equal() +\n  theme_minimal(base_size = 20) +\n  geom_text(aes(label=rho),\n            x = 112,\n            y = 135,\n            hjust = 0,\n            size = 4,\n            data = dfccc[1, ],\n            parse = TRUE) +\n  geom_text(aes(label=rmse),\n            x = 112,\n            y = 134,\n            hjust = 0,\n            size = 4,\n            data = dfccc[1, ],\n            parse = TRUE) +\n  geom_text(aes(label=r),\n            x = 112,\n            y = 133,\n            hjust = 0,\n            size = 4,\n            data = dfccc[1, ],\n            parse = TRUE)\n\nmaterr &lt;-\n  mat |&gt;\n  sf::st_drop_geometry() |&gt;\n  as.data.frame() |&gt;\n  group_by(diff_class) |&gt;\n  summarise(n = n())\n\nmaterrp &lt;- \nggplot(materr, aes(\"A\", n, fill = diff_class)) +\n  geom_col() +\n  geom_text(aes(label = n), position = \"stack\",\n            vjust = 1) +\n  theme_minimal(base_size = 14) +\n  theme(axis.text.x = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.x = element_blank()) +\n  labs(y = \"Número de parcelas experimentais\",\n       title = \"Proporção do erro de predição\",\n       fill = \"abs(dias)\")\n\nmatplot + materrp +\n  plot_layout(widths = c(0.8, 0.2))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n# criar shape\n\nbm &lt;- mosaic_view(mosaic,\n                  r = 1, g = 2, b = 3,\n                  max_pixels = 5e6)\n\nℹ The number of pixels is very high, which might slow the rendering process.\nℹ Using `downsample = 2` to match the max_pixels constraint.\n\nbm + shapefile_view(mat |&gt; sf::st_buffer(0.22), attribute = \"mat_vndvi\")",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "dia_02.html#timeseries-plimanshiny",
    "href": "dia_02.html#timeseries-plimanshiny",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "The plimanshiny package provides a user-friendly interface for analyzing time series data. The package allows users to import, visualize, and analyze time series data, such as satellite images, drone images, and other remote sensing data.\n\ninstall.packages(\"pak\")\npak::pkg_install(\"NEPEM-UFSC/pliman\")\npak::pkg_install(\"NEPEM-UFSC/plimanshiny\")\n\n# Open the app\nlibrary(plimanshiny)\nrun_app()",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "00_about.html",
    "href": "00_about.html",
    "title": "Useful Information!",
    "section": "",
    "text": "This material contains the scripts and data needed to reproduce the examples seen in the pliman and plimanshiny package for High-throughput phenotyping course held on 13º Brazilian Plant Breeding Congress\n\n1 Software\nTo reproduce the examples in this material, you will need the latest versions o R and RStudio (Portuguese).\n\n Download R\n Download RStudio\n\n2 Restoring the R environment with renv\nThis command will install all required packages with the exact versions recorded in the renv.lock file.\n\ninstall.packages(\"renv\")\nrenv::activate()\nrenv::restore()\n\nIf you later add new packages, run:\n\nrenv::snapshot()\n\n\n3 Citation\n\nTo cite the pliman package in your works, use the following reference:\n\nOlivoto T (2022). “Lights, camera, pliman! An R package for plant image analysis.” Methods in Ecology and Evolution, 13(4), 789-798. doi:10.1111/2041-210X.13803 https://doi.org/10.1111/2041-210X.13803.\n\n\ncitation(\"pliman\")\n\nPlease, support this project by citing it in your publications!\n\n  Olivoto T (2022). \"Lights, camera, pliman! An R package for plant\n  image analysis.\" _Methods in Ecology and Evolution_, *13*(4),\n  789-798. doi:10.1111/2041-210X.13803\n  &lt;https://doi.org/10.1111/2041-210X.13803&gt;.\n\nUma entrada BibTeX para usuários(as) de LaTeX é\n\n  @Article{,\n    title = {Lights, camera, pliman! An R package for plant image analysis},\n    author = {Tiago Olivoto},\n    year = {2022},\n    journal = {Methods in Ecology and Evolution},\n    volume = {13},\n    number = {4},\n    pages = {789-798},\n    doi = {10.1111/2041-210X.13803},\n  }\n\n\n\n4 Scripts\nThe .zip file contains a folder with the static website, structured as follows:\n\n\nD:/htp_cbmp2025\n├── 00_about.qmd\n├── 00_about.rmarkdown\n├── 01_dia1.qmd\n├── 02_dia2.qmd\n├── 20231001_144226.jpg\n├── 20231001_153711.jpg\n├── 20231001_160425.jpg\n├── 20231003_144448.jpg\n├── 20231005_112708.jpg\n├── 20231005_140911.jpg\n├── bacteria.jpg\n├── beans\n│   ├── G1042.jpg\n│   ├── G1080.jpg\n│   ├── G1083.jpg\n│   ├── G1106.jpg\n│   ├── G1113.jpg\n│   ├── G1149.jpg\n│   ├── G1173.jpg\n│   ├── G1205.jpg\n│   ├── G1261.jpg\n│   ├── G1264.jpg\n│   ├── G1265.jpg\n│   ├── G1320.jpg\n│   ├── G1328.jpg\n│   ├── G1354.jpg\n│   ├── G1356.jpg\n│   ├── G1358.jpg\n│   ├── G148.jpg\n│   ├── G166.jpg\n│   ├── G169.jpg\n│   ├── G229.jpg\n│   ├── G275.jpg\n│   ├── G278.jpg\n│   ├── G433.jpg\n│   ├── G478.jpg\n│   ├── G478A.jpg\n│   ├── G57.jpg\n│   ├── G623.jpg\n│   ├── G685.jpg\n│   ├── G686.jpg\n│   ├── G731.jpg\n│   ├── G734.jpg\n│   ├── G735.jpg\n│   ├── G738.jpg\n│   ├── G747.jpg\n│   ├── G753.jpg\n│   ├── G76.jpg\n│   ├── G799.jpg\n│   ├── G801.jpg\n│   ├── G803.jpg\n│   ├── G811.jpg\n│   ├── G818.jpg\n│   ├── G840.jpg\n│   ├── G842.jpg\n│   ├── G843.jpg\n│   ├── G847.jpg\n│   ├── G855.jpg\n│   ├── G857.jpg\n│   ├── G87.jpg\n│   ├── G908.jpg\n│   ├── G917.jpg\n│   ├── G92.jpg\n│   ├── G955.jpg\n│   ├── G983.jpg\n│   ├── G994.jpg\n│   └── G995.jpg\n├── capa.jpg\n├── capsulas\n│   ├── P1_Cápsulas_1_2024-11-26-11-10-10.jpg\n│   ├── P2_Cápsulas_1_2024-11-26-11-17-31.jpg\n│   ├── P3_Cápsulas_1_2024-11-26-11-34-31.jpg\n│   ├── P4_Cápsulas_1_2024-11-26-11-43-42.jpg\n│   ├── P5_Cápsulas_1_2024-11-26-11-54-12.jpg\n│   ├── P6_Cápsulas_1_2024-11-26-12-06-34.jpg\n│   └── proc\n├── capsulas.jpg\n├── dose_response\n│   ├── img_P1_0,01.JPG\n│   ├── img_P1_0,1.JPG\n│   ├── img_P1_0.JPG\n│   ├── img_P1_1.JPG\n│   ├── img_P1_10.JPG\n│   ├── img_P1_100.JPG\n│   ├── img_P1_50.JPG\n│   ├── img_P2_0,01.JPG\n│   ├── img_P2_0,1.JPG\n│   ├── img_P2_0.JPG\n│   ├── img_P2_1.JPG\n│   ├── img_P2_10.JPG\n│   ├── img_P2_100.JPG\n│   └── img_P2_50.JPG\n├── dsm\n│   ├── dsm.tif\n│   ├── dsm_small.tif\n│   ├── dtm.tif\n│   ├── mask.tif\n│   ├── ortho.tif\n│   └── shape.rds\n├── feijoes.jpg\n├── flax.jpg\n├── flax2.jpg\n├── flax_ref.JPG\n├── fungi.jpg\n├── growth_models\n│   ├── DAP_16_05-23-2021.tif\n│   ├── DAP_19_05-26-2021.tif\n│   ├── DAP_25_06-01-2021.tif\n│   ├── DAP_31_06-07-2021.tif\n│   ├── DAP_34_06-10-2021.tif\n│   ├── DAP_41_06-17-2021.tif\n│   ├── DAP_46_06-22-2021.tif\n│   ├── DAP_49_06-25-2021.tif\n│   ├── DAP_4_05-11-2021.tif\n│   ├── DAP_52_06-28-2021.tif\n│   ├── DAP_55_07-01-2021.tif\n│   ├── DAP_67_07-13-2021.tif\n│   ├── DAP_73_07-19-2021.tif\n│   ├── DAP_74_07-20-2021.tif\n│   ├── DAP_80_07-26-2021.tif\n│   └── shp_dsm.rds\n├── htp_cbmp2025.Rproj\n├── img_exported.jpg\n├── leaves.jpg\n├── lettuce\n│   ├── field.png\n│   ├── lettuce.rds\n│   └── lettuce.tif\n├── maize.jpg\n├── maturity\n│   ├── cropped_09-10-2024.tif\n│   ├── cropped_09-13-2024.tif\n│   ├── cropped_09-17-2024.tif\n│   ├── cropped_09-21-2024.tif\n│   ├── cropped_09-24-2024.tif\n│   ├── cropped_09-27-2024.tif\n│   ├── cropped_10-02-2024.tif\n│   ├── cropped_10-04-2024.tif\n│   ├── cropped_10-08-2024.tif\n│   ├── cropped_10-11-2024.tif\n│   ├── result_timeseries_vi_vndvi.xlsx\n│   ├── shape_mat.rds\n│   └── time_series_maturity_vndvi5.xlsx\n├── ortho.tif\n├── paper.png\n├── pollen.jpg\n├── potato\n│   ├── clip\n│   ├── potato.tif\n│   └── potato_shp.rds\n├── potato.jpg\n├── proc_videira.jpg\n├── renv\n│   ├── activate.R\n│   ├── library\n│   └── staging\n├── renv.lock\n├── Rplots.pdf\n├── sevsoja\n│   ├── soy_1.jpg\n│   ├── soy_10.jpg\n│   ├── soy_11.jpg\n│   ├── soy_12.jpg\n│   ├── soy_13.jpg\n│   ├── soy_14.jpg\n│   ├── soy_15.jpg\n│   ├── soy_16.jpg\n│   ├── soy_17.jpg\n│   ├── soy_18.jpg\n│   ├── soy_19.jpg\n│   ├── soy_2.jpg\n│   ├── soy_20.jpg\n│   ├── soy_21.jpg\n│   ├── soy_22.jpg\n│   ├── soy_23.jpg\n│   ├── soy_24.jpg\n│   ├── soy_25.jpg\n│   ├── soy_26.jpg\n│   ├── soy_27.jpg\n│   ├── soy_28.jpg\n│   ├── soy_29.jpg\n│   ├── soy_3.jpg\n│   ├── soy_30.jpg\n│   ├── soy_31.jpg\n│   ├── soy_32.jpg\n│   ├── soy_33.jpg\n│   ├── soy_34.jpg\n│   ├── soy_35.jpg\n│   ├── soy_36.jpg\n│   ├── soy_37.jpg\n│   ├── soy_38.jpg\n│   ├── soy_39.jpg\n│   ├── soy_4.jpg\n│   ├── soy_40.jpg\n│   ├── soy_41.jpg\n│   ├── soy_42.jpg\n│   ├── soy_43.jpg\n│   ├── soy_44.jpg\n│   ├── soy_45.jpg\n│   ├── soy_46.jpg\n│   ├── soy_47.jpg\n│   ├── soy_48.jpg\n│   ├── soy_49.jpg\n│   ├── soy_5.jpg\n│   ├── soy_50.jpg\n│   ├── soy_6.jpg\n│   ├── soy_7.jpg\n│   ├── soy_8.jpg\n│   └── soy_9.jpg\n├── sev_leaves.JPG\n├── smaller\n│   ├── 20231001_144226.jpg\n│   ├── 20231001_153711.jpg\n│   ├── 20231001_160425.jpg\n│   ├── 20231003_144448.jpg\n│   ├── 20231005_112708.jpg\n│   └── 20231005_140911.jpg\n├── videira.png\n├── videira_background.jpg\n├── videira_disease.jpg\n├── videira_healthy.jpg\n├── wheat\n│   ├── wheat_ndsu.tif\n│   ├── wheat_ndsu_shp.rds\n│   └── wheat_ufv.tif\n├── _quarto.yml\n└── _site\n    ├── 00_about.html\n    ├── capa.jpg\n    ├── dia_01.html\n    ├── dia_01_files\n    ├── dia_02.html\n    ├── dia_02_files\n    ├── index.html\n    ├── paper.png\n    ├── search.json\n    └── site_libs\n\n\nThe material in HTML (_site/index.html) will give you access to the site, where you can view all examples, with codes and outputs. To reproduce the material, simply use the *.qmd files.\nFor reproduction, it is suggested to set the htp_cbmp2025 folder as the default directory. You can easily set the directory by running the following command, assuming you have the 00_about.qmd script open.\n\npliman::set_wd_here()\n\n\n5 Acknowledgments\nThe availability of these mosaics is essential for the continued improvement of tools like {pliman}. I would like to extend my gratitude to @FilipeMathias and Alcinei Azevedo for providing various materials related to high-throughput phenotyping, and to @MaiconNardino and @CaiqueSilva from UFV for providing the multispectral orthomosaics of the wheat field.\nAdditionally, special thanks to Arthur Bernardeli for providing the digital surface models, digital terrain models, and masks related to the soybean fields, and Gustavo Nandi for providing the orthomosaic from a potato breeding field.\n\n6 Similar tools\nThis course will primarily focus on the {pliman} and {plimanShiny} R packages. However, these are not the only tools available for high-throughput phenotyping (HTP) in R. I highly recommend exploring the pioneering R package FIELDimageR, as well as its complementary extensions FIELDimageR-Extra and FIELDimageR-QGIS, which offer additional functionalities for enhanced HTP analysis.\n\n7 License\nThis content is licensed under a CC BY-NC-SA 4.0. The human-readable summary of the license states that you have the right to:\n\n\nShare — copy and redistribute the material in any medium or format.\n\nAdapt — remix, transform, and build upon the material.\n\nAttribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.\nUnder the following terms\nNon-Commercial — You may not use the material for commercial purposes.\nShareAlike — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.\nNo additional restrictions — You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits."
  },
  {
    "objectID": "dia_01.html",
    "href": "dia_01.html",
    "title": "Scripts - 03/09/2025",
    "section": "",
    "text": "library(pliman)\nlibrary(tidyverse)\nlibrary(ggridges)",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#import-and-display",
    "href": "dia_01.html#import-and-display",
    "title": "Scripts - 03/09/2025",
    "section": "\n2.1 Import and Display",
    "text": "2.1 Import and Display\n\n2.1.1 Import Images\n\nimg &lt;- image_import(\"20231001_153711.jpg\")\nplot(img)\n\n\n\n\n\n\n\nTo import a list of images, use a vector of image names or the pattern argument. In the latter case, all images matching the specified pattern will be imported into a list.\n\nimg_list1 &lt;- image_import(c(\"20231001_153711.jpg\", \"20231001_160425.jpg\"))\n\n\n2.1.2 Display Images\nIndividual images are displayed with plot(). To combine images, use the image_combine() function. Users can input a comma-separated list of objects or a list of objects of the Image class.\n\n# Individual images\nplot(img)\n\n\n\n\n\n\n\n\n# Combine images\nimage_combine(img_list1)\n\n\n\n\n\n\n\npliman provides a set of image_*() functions for performing image manipulation and transformation of single images or a list of images based on the EBImage package.",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#resolution",
    "href": "dia_01.html#resolution",
    "title": "Scripts - 03/09/2025",
    "section": "\n2.2 Resolution",
    "text": "2.2 Resolution\n\n2.2.1 Image Resolution (DPI)\nThe dpi() function performs an interactive function to calculate the image resolution based on a known distance entered by the user. To calculate the image resolution (DPI), the user should use the left mouse button to create a known distance line. This can be done, for example, using a known distance model, as follows.\n\n#  this only works in an interactive section\n(imgres &lt;- dpi(img))\n\n\n2.2.2 Resize an Image\nSometimes, it is necessary to resize high-resolution images to reduce computational effort and processing time. The image_resize() function is used to resize an image. The rel_size argument can be used to resize the image by relative size. For example, setting rel_size = 50 for a 1280 x 720 pixels image, the new image will have a size of 640 x 360 pixels.\n\nimage_dimension(img)\n\n── Image dimension ─────────────────────────────────────────────────────────────\n\n\nWidth : 799\n\n\nHeight: 600\n\nimg_resized &lt;- image_resize(img, rel_size = 50)\nimage_dimension(img_resized)\n\n── Image dimension ─────────────────────────────────────────────────────────────\n\n\nWidth : 400\n\n\nHeight: 300",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#apply-a-function-to-images",
    "href": "dia_01.html#apply-a-function-to-images",
    "title": "Scripts - 03/09/2025",
    "section": "\n2.3 Apply a Function to Images",
    "text": "2.3 Apply a Function to Images\n\napply_fun_to_imgs(pattern = \"2023\",\n                  image_resize,\n                  rel_size = 50,\n                  dir_processed = \"smaller\",\n                  plot = FALSE)\n\n── Sequential processing of 6 images ───── Started on \"2025-09-02 | 17:34:16\" ──\n\n\n── Function `image_resize()` successfully applied to the images ────────────────",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#export",
    "href": "dia_01.html#export",
    "title": "Scripts - 03/09/2025",
    "section": "\n2.4 Export",
    "text": "2.4 Export\nTo export images to the current directory, use the image_export() function. If a list of images is exported, the images will be saved considering the name and extension present in the list. If no extension is present, the images will be saved as *.jpg files.\n\nimage_export(img, \"img_exported.jpg\")\n\n# or a subfolder\nimage_export(img, \"test/img_exported.jpg\")",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#image-indexes",
    "href": "dia_01.html#image-indexes",
    "title": "Scripts - 03/09/2025",
    "section": "\n3.1 Image Indexes",
    "text": "3.1 Image Indexes\nThe image_index() function constructs image indices using Red, Green, Blue, Red-Edge, and NIR bands.\n\n# Calculate indices\nindexes &lt;- image_index(img, index = c(\"R, G, B, GRAY, L, B-G/(B+G)\"))\n\nℹ Index \"B-G/(B+G)\" is not available. Trying to compute your own index.\n\n\n\n\n\n\n\n# Create a histogram with RGB values\nplot(indexes, type = \"density\")\n\n\n\n\n\n\n\nIn the case of the R index, the two peaks represent the leaf + reference (smaller peak) and the background (larger peak). The clearer the difference between these peaks, the better the image segmentation.",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#binary-images",
    "href": "dia_01.html#binary-images",
    "title": "Scripts - 03/09/2025",
    "section": "\n3.2 Binary Images",
    "text": "3.2 Binary Images\nTo segment objects, pliman uses the threshold technique (Otsu, 1979)1, i.e., a cutoff point (considering pixel values) is chosen and the image is classified into two classes (foreground and background). Then, we have a binary image. We can produce this image with image_binary(). This binarization is the key process for all object analysis steps. The better t…\n\nimage_index(img, index = \"GRAY\")\n\n\n\n\n\n\notsu(indexes$GRAY)\n\n[1] 0.4567649\n\nbin &lt;- \n  image_binary(img,  \n               index = \"GRAY\")\n\n\n\n\n\n\n\nNote that some leaf pixels were considered background and some background pixels were considered foreground. We can improve this binarization by applying a morphological operation (such as median filter or oppening) and filling the holes with fill_hull = TRUE. See how changing the filter argument impacts the results.\n\nbin &lt;- image_binary(img, \n                    index = \"GRAY\", \n                    fill_hull = TRUE,\n                    plot =  FALSE)[[1]]\nbin2 &lt;- image_binary(img, \n                     index = \"GRAY\", \n                     fill_hull = TRUE,\n                     filter = 10,\n                     plot =  FALSE)[[1]]\nbin3 &lt;- image_binary(img, \n                     index = \"GRAY\",\n                     fill_hull = TRUE,\n                     opening = 10,\n                     plot =  FALSE)[[1]]\n\nimage_combine(bin, bin2, bin3, ncol = 3)",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#segmentation",
    "href": "dia_01.html#segmentation",
    "title": "Scripts - 03/09/2025",
    "section": "\n3.3 Segmentation",
    "text": "3.3 Segmentation\nIn pliman, the following functions can be used to segment objects in images.\nimage_segment() to produce a segmented image (objects in the image and a white background). image_segment_iter() to segment an image interactively. image_segment_kmeans() to segment an image using the k-means algorithm. image_segment_manual() to segment an image manually. image_segment_mask() to segment an image with a mask.\nBoth functions segment the image based on the value of some image index, which can be one of the RGB channels or any operation with these channels.\n\n3.3.1 Image Indices\n\nimage_segment(img,\n              index = \"G\",\n              fill_hull = TRUE,\n              opening = 5)",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#object-analysis",
    "href": "dia_01.html#object-analysis",
    "title": "Scripts - 03/09/2025",
    "section": "\n3.4 Object Analysis",
    "text": "3.4 Object Analysis\nThe key is to obtain the contour of the objects, so we work with polygons!\n\nA ‘polygon’ is a plane figure described by a finite number of straight line segments connected to form a closed chain (Singer, 1993)2.\n\nWe can then conclude that image objects can be expressed as polygons with n vertices. Pliman has a family of poly_*() functions that can be used to analyze polygons.\n\nsquare &lt;- draw_square() |&gt; poly_close()\n\n\n\n\n\n\npoly_area(square)\n\n[1] 4\n\npoly_perimeter(square)\n\n[1] 8\n\npolygon &lt;- draw_n_tagon(6)\n\n\n\n\n\n\npoly_area(polygon)\n\n[1] 2.598076\n\n\nn &lt;- c(6, 10, 50, 100, 1000, 100000)\nsapply(n, function(x){\n  draw_n_tagon(x) |&gt; poly_area()\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] 2.598076 2.938926 3.133331 3.139526 3.141572 3.141593\n\n\n\n\n3.4.1 Contour\n\nimg &lt;- image_import(\"leaves.jpg\")\nplot(img)\n\n# extract the contour\ncont &lt;- object_contour(img, index = \"B\", watershed = FALSE)\n\n\n\n\n\n\n# Number of contour pixels\nnrow(cont[[1]])\n\n[1] 980\n\n# contour coordinates\nhead(cont[[1]])\n\n     [,1] [,2]\n[1,]  195   25\n[2,]  195   26\n[3,]  194   27\n[4,]  193   27\n[5,]  192   27\n[6,]  191   27\n\n# polygon\nplot_polygon(cont[[1]])\n\n\n\n\n\n\n\n\n3.4.2 Measures\nIn the current version of pliman, you can calculate the following measures. For more details, see Chen & Wang (2005)3, Claude (2008)4, and Montero et al. (2009)5.\n\nArea\n\nThe area of a shape is calculated using the Shoelace formula (Lee and Lim, 2017)6, as follows:\n\\[\nA=\\frac{1}{2}\\left |\\sum_{i=1}^{n}\\left(x_{i} y_{i+1}-x_{i+1}y_{i}\\right)\\right|\n\\]\n\npoly_area(cont)\n\n[1] 60631.0 44430.5 44580.5 38990.0 93424.0 76965.5\n\n\n\nPerimeter\n\nThe perimeter is calculated as the sum of the Euclidean distance between all points of a shape. The distances can be obtained with poly_distpts().\n\npoly_perimeter(cont)\n\n       1        2        3        5       11       14 \n1153.798 2330.010 1139.602 1215.323 1188.651 1266.621 \n\n# perimeter of a circle with radius 2\ncircle &lt;- draw_circle(radius = 2, plot = FALSE)\npoly_perimeter(circle)\n\n[1] 12.56635\n\n# check the result\n2*pi*2\n\n[1] 12.56637\n\n\n\nCenter of mass\n\nThe center of mass of a shape, especially in two-dimensional space, represents the average position of all the points within that shape, weighted by their area (or mass if considering physical objects). It’s the point at which the entire area (or mass) of the shape can be thought to be concentrated. In practical terms, if you were to balance a cut-out of the shape on a pinpoint, the center of mass is the location where it would balance perfectly.\nIn a polygon (a shape made of straight-line segments), the center of mass is calculated by considering each segment’s contribution to the overall shape, and its coordinates (\\(C_x\\) and \\(C_y\\)) are given by\n\\[\n\\begin{aligned}\nC_x & =\\frac{1}{6 A} \\sum_{i=1}^n\\left(x_i+x_{i+1}\\right)\\left(x_i y_{i+1}-x_{i+1} y_i\\right) \\\\\nC_y & =\\frac{1}{6 A} \\sum_{i=1}^n\\left(y_i+y_{i+1}\\right)\\left(x_i y_{i+1}-x_{i+1} y_i\\right)\n\\end{aligned}\n\\] Where A, is the area given above.\n\nplot_polygon(cont[[1]])\n# centroid\ncent &lt;- apply(cont[[1]], 2, mean)\npoints(cent[1], cent[2], col = \"red\", pch = 19)  # Red dot for centroid\n\n# Center of mass\ncm &lt;- poly_mass(cont[[1]])\npoints(cm[1], cm[2], col = \"blue\", pch = 19)  # Blue dot for center of mass\nlegend(\"topright\",\n       legend = c(\"Centroid\", \"Center of Mass\"), \n       col = c(\"red\", \"blue\"), pch = 19)\n\n\n\n\n\n\n\n\nRadius\n\nThe radius of a pixel in the object’s contour is calculated as its distance to the center of mass of the object. These distances can be obtained with poly_centdist().\n\ndist &lt;- poly_centdist_mass(cont[[1]])\nx &lt;- c(cm[1], cont[[1]][1, 1])\ny &lt;- c(cm[2], cont[[1]][1, 2])\nd1 &lt;- sqrt(diff(x)^2 + diff(y)^2)\ndist[[1]]\n\n[1] 178.4624\n\nplot_polygon(cont[[1]])\npoints(cm[1], cm[2], col = \"blue\", pch = 19)  # Blue dot for center of mass\nsegments(x[1], y[1], x[2], y[2], col = \"blue\", lwd = 2)\n\n\n\n\n\n\nplot(dist, type = \"l\")\n\n\n\n\n\n\n\n\nLength and Width\n\nThe length and width of an object are calculated with poly_lw(), as the difference between the maximum and minimum of the x and y coordinates after the object has been aligned with poly_align().\n\n# wrong measures\nplot_polygon(cont[[1]])\nlw &lt;- apply(cont[[1]], 2, \\(x){range(x)})\nabline(v = lw[[1]], col = \"red\")\nabline(v = lw[[2]], col = \"red\")\nabline(h = lw[[3]], col = \"blue\")\nabline(h = lw[[4]], col = \"blue\")\n\n\n\n\n\n\n# Correct measures\naligned &lt;- poly_align(cont[[1]])\nlw &lt;- apply(aligned, 2, \\(x){range(x)})\nabline(v = lw[[1]], col = \"red\")\nabline(v = lw[[2]], col = \"red\")\nabline(h = lw[[3]], col = \"blue\")\nabline(h = lw[[4]], col = \"blue\")\n\n\n\n\n\n\ndiff(lw)\n\n         [,1]     [,2]\n[1,] 190.3641 475.6255\n\n# with poly_lw()\npoly_lw(cont[[1]])\n\n       length    width\n[1,] 475.6255 190.3641\n\n\n\nCircularity and Elongation\n\nCircularity (Montero et al. 2009)7 is also called shape compactness or a measure of the roundness of an object. It is given by \\(C = P^2 / A\\), where \\(P\\) is the perimeter and \\(A\\) is the area of the object.\n\npoly_perimeter(cont) ^2 / poly_area(cont)\n\n        1         2         3         5        11        14 \n 21.95659 122.18968  29.13142  37.88176  15.12343  20.84479 \n\npoly_circularity(cont)\n\n        1         2         3         5        11        14 \n 21.95659 122.18968  29.13142  37.88176  15.12343  20.84479 \n\n\nAs the above measurement depends on scale, normalized circularity can be used. In this case, it is assumed that a perfect circle has a circularity equal to 1. This measure is invariant under translation, rotation, and scale transformations, given by \\(Cn = P^2 / 4 \\pi A\\)\n\npoly_perimeter(circle) ^2 / (4 * pi * poly_area(circle))\n\n[1] 1.000003\n\npoly_circularity_norm(circle)\n\n[1] 0.9999967\n\npoly_circularity_norm(cont)\n\n        1         2         3         5        11        14 \n0.5723279 0.1028431 0.4313683 0.3317261 0.8309208 0.6028541 \n\n\npoly_elongation() Calculates the elongation of an object as 1 - width / length\n\npoly_elongation(circle)\n\n              [,1]\n[1,] -1.236173e-06\n\npoly_elongation(cont)\n\n           [,1]\n[1,] 0.59976047\n[2,] 0.07475182\n[3,] 0.47262292\n[4,] 0.77301835\n[5,] 0.15421772\n[6,] 0.34880080\n\n\n\nPerimeter Complexity (PVC)\n\nThe PVC is first calculated by smoothing the input contour using a specified number of iterations. The smoothed contour is then used to calculate the distances between corresponding points in the original and smoothed coordinates. These distances reflect the variations in contour shape after smoothing. The sum of these distances represents the global magnitude of the variations. Next, the sum of the distances is multiplied by the standard deviation of the distances to capture the dispersion or spread of th…\n\npoly_pcv(circle)\n\n[1] 7.878397e-05\n\npoly_pcv(cont)\n\n        1         2         3         5        11        14 \n0.4765559 2.0312072 2.2185019 0.7703953 0.3572519 0.7428847",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#known-resolution",
    "href": "dia_01.html#known-resolution",
    "title": "Scripts - 03/09/2025",
    "section": "\n5.1 Known Resolution",
    "text": "5.1 Known Resolution\n\ndpi(leaves)\ncorrected &lt;- get_measures(leaves_meas, dpi = 416)\n# plot width and length\nplot_measures(corrected,\n              measure = \"width\",\n              col = \"green\",\n              hjust = -90)\nplot_measures(corrected, \n              measure = \"length\", \n              vjust = 60,\n              col = \"red\")",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#reference-object-color",
    "href": "dia_01.html#reference-object-color",
    "title": "Scripts - 03/09/2025",
    "section": "\n5.2 Reference Object (color)",
    "text": "5.2 Reference Object (color)\nThe reference argument can now be used to correct the measurements of objects even when images with different capture distances are used. This differs from the previous example in a subtle but crucial aspect: when reference is informed, batch processing can be used! In this example, the leaf area of the leaves image is quantified and corrected considering a 4 x 5 (20 cm\\(^2\\)) rectangle as a reference object. When reference = TRUE is informed in analyze_objects(), the function will perform a two-step object segmentation process:\nThe first step consists of segmenting the foreground (leaves and reference object) from the background. For this, an image index is used and can be declared in the back_fore_index argument. The default (back_fore_index = \"R/(G/B)\") is optimized to segment white backgrounds of green leaves and a blue reference object. Let’s see the performance of this index in this example.\n\nind &lt;- image_index(leaves, index = \"R/(G/B)\", plot =  FALSE)[[1]]\n\nℹ Index \"R/(G/B)\" is not available. Trying to compute your own index.\n\nbin &lt;- image_binary(leaves, index = \"R/(G/B)\", plot =  FALSE)[[1]]\n\nℹ Index \"R/(G/B)\" is not available. Trying to compute your own index.\n\nimage_combine(ind, bin)\n\n\n\n\n\n\n# Segmenting the image\nseg1 &lt;- image_segment(leaves, index = \"R/(G/B)\")\n\n\n\n\n\n\n\nGood job! Now, we remove the background. The next step is to segment the objects and the reference model. Basically, we need to repeat the previous step isolating the reference.\n\nimage_segment(seg1, \"B-R\")\n\n\n\n\n\n\nseg2 &lt;- \n  image_binary(seg1,\n               index = \"B-R\")\n\nℹ Index \"B-R\" is not available. Trying to compute your own index.\n\n\n\n\n\n\n\n# number of pixels in the reference object\nlength(which(seg2$`B-R` != 1))\n\n[1] 517741\n\n\nNow that we know the indices to be used for each segmentation, we can use the analyze_objects function to obtain the corrected measurements based on the reference object.\n\nres2 &lt;- \n  analyze_objects(leaves, \n                  index = \"B\",\n                  reference = TRUE,\n                  reference_area = 20,\n                  back_fore_index = \"R/(G/B)\", # default\n                  fore_ref_index = \"B-R\",      # default\n                  marker = \"width\")\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [2.7s]",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#reference-object-size",
    "href": "dia_01.html#reference-object-size",
    "title": "Scripts - 03/09/2025",
    "section": "\n5.3 Reference Object (size)",
    "text": "5.3 Reference Object (size)\nA second option for correcting the measurements is to use a reference object that is smaller or larger than all the objects in the image. When this is the case, the reference_larger and reference_smaller arguments can be used to indicate when the largest/smallest object in the image should be used as a reference object. This is only valid when reference is set to TRUE and reference_area indicates the area of the reference object. IMPORTANT. When reference_smaller is used, objects with an area smaller than 1% of the average of all objects are ignored. This is used to remove possible noise in the image, such as dust. Therefore, make sure that the reference object has an area that will not be removed by this cutoff point.\n\nflaxref &lt;- image_import(\"flax_ref.jpg\", plot = TRUE)\n\n\n\n\n\n\nres2 &lt;- \n  analyze_objects(flaxref,\n                  index = \"GRAY\",\n                  reference = TRUE,\n                  reference_area = 6,\n                  reference_larger = TRUE,\n                  show_contour = FALSE,\n                  marker = \"point\")\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [714ms]\n\n\n\n\nplot(res2)\n\n\n\n\n\n\nimage_view(flaxref, object = res2)\n\nWarning in CPL_crs_from_input(x): GDAL Message 1: +init=epsg:XXXX syntax is\ndeprecated. It might return a CRS with a non-EPSG compliant axis order. Further\nmessages of this type will be suppressed.\n\n\nWarning: Found less unique colors (5) than unique zcol values (44)! \nInterpolating color vector to match number of zcol values.",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#flax-leaves",
    "href": "dia_01.html#flax-leaves",
    "title": "Scripts - 03/09/2025",
    "section": "\n7.1 Flax leaves",
    "text": "7.1 Flax leaves\nTo obtain the RGB/HSV intensity of each object in the image, use the argument object_rgb = TRUE in the function analyze_objects().In the following example, we use the R, G, and B bands and their normalized values.The function pliman_indexes() returns the indexes available in the package.\nTo calculate a specific index, simply insert a formula containing the values of R, G, or B (e.g., object_index = “B/G+R”).\n\nimg &lt;- image_import(\"flax.jpg\", plot = TRUE)\nplot(img)\n(indx &lt;- pliman_indexes_rgb())\n\n [1] \"B\"     \"BGI\"   \"BI\"    \"BI2\"   \"CI\"    \"CIVE\"  \"EGVI\"  \"ERVI\"  \"G\"    \n[10] \"GB\"    \"GD\"    \"GLAI\"  \"GLI\"   \"GR\"    \"GRAY\"  \"GRAY2\" \"HI\"    \"HUE\"  \n[19] \"HUE2\"  \"I\"     \"L\"     \"MGVRI\" \"NB\"    \"NG\"    \"NGBDI\" \"NGRDI\" \"NR\"   \n[28] \"R\"     \"RB\"    \"RI\"    \"S\"     \"SAVI\"  \"SCI\"   \"SHP\"   \"SI\"    \"VARI\" \n[37] \"BCC\"   \"BRVI\"  \"GCC\"   \"GRVI2\" \"IPCA\"  \"MVARI\" \"NDI\"   \"RCC\"   \"RGBVI\"\n[46] \"TGI\"   \"VEG\"   \"vNDVI\" \"WI\"   \n\nflax_leaves &lt;-\n  analyze_objects(img,\n                  index = \"B\",\n                  opening = 5,\n                  object_index = c(\"DGCI\", \"CIVE\", \"ERVI\", \"EGVI\", \"R\", \"G\", \"B\"),\n                  pixel_level_index = TRUE,\n                  marker = \"id\")\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [4.1s]\n\n\n\n\n# PCA with the indexes\nind &lt;- summary_index(flax_leaves, type=\"var\")\n\nWarning in sqrt(eigenvalue): NaNs produzidos\n\n\n\n\n\n\n\n\nNow, let’s plot the DGCI (Dark Green Color Index) on each object. The DGCI is based on the HSB (Hue, Saturation, and Brightness) spatial color and has been used as an indicator of green shade 9\n\nimage_view(img, \n           object = flax_leaves,\n           color_regions = custom_palette(c(\"yellow\", \"darkgreen\")),\n           attribute = \"DGCI\")\n\nℹ Using downsample = 2 so that the number of rendered pixels approximates max_pixels.\n\n\nWarning: Found less unique colors (5) than unique zcol values (170)! \nInterpolating color vector to match number of zcol values.",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#color-texture",
    "href": "dia_01.html#color-texture",
    "title": "Scripts - 03/09/2025",
    "section": "\n7.2 Color Texture",
    "text": "7.2 Color Texture\nDefinitions and interpretations of various texture features calculated from the Gray Level Co-occurrence Matrix (GLCM).\n\nASM (Angular Second Moment):\nDefinition: Measures the uniformity or energy of the texture, calculated as the sum of squared elements in the GLCM.\nInterpretation: Higher values indicate a more uniform texture; lower values suggest more variation.\nCON (Contrast):\nDefinition: Measures local variations in the GLCM, calculating intensity contrast between a pixel and its neighbor.\nInterpretation: High values indicate textures with sharp edges or strong intensity variations.\nCOR (Correlation):\nDefinition: Assesses the linear dependency of gray levels between neighboring pixels, measuring how correlated a pixel is to its neighbors.\nInterpretation: High values indicate strong correlation, suggesting a predictable texture pattern.\nVAR (Variance):\nDefinition: Measures the dispersion of gray levels in the GLCM, quantifying how much gray levels differ from the mean.\nInterpretation: High variance indicates a wide range of intensity values, suggesting a more complex texture.\nIDM (Inverse Difference Moment) or Local Homogeneity:\nDefinition: Measures the homogeneity of the texture, assigning higher weights to smaller gray-level differences.\nInterpretation: Higher values indicate a more homogenous texture.\nSAV (Sum Average):\nDefinition: Calculates the average of the sums of gray levels in the GLCM.\nInterpretation: Reflects the average intensity of pixel pairs.\nSVA (Sum Variance):\nDefinition: Measures the variability of the sum distribution in the GLCM.\nInterpretation: High values indicate a wide spread of the sum distribution.\nSEN (Sum Entropy):\nDefinition: Measures the randomness of the sum distribution in the GLCM.\nInterpretation: High values indicate high randomness in the texture.\nDVA (Difference Variance):\nDefinition: Measures the variability of the difference distribution in the GLCM.\nInterpretation: High values suggest varied and complex texture patterns.\nDEN (Difference Entropy):\nDefinition: Measures the randomness of the difference distribution in the GLCM.\nInterpretation: High values indicate high unpredictability in the texture differences.\nF12 (Difference Variance):\nDefinition: Another representation of Difference Variance, measuring the spread of differences in gray levels.\nF13 (Angular Second Moment):\nDefinition: Another representation of ASM, measuring the uniformity of the texture.\n\nThese features help in analyzing textures by quantifying uniformity, contrast, and randomness, crucial in applications like image classification and pattern recognition.\n\nimgtest &lt;- \n  image_import(c(\"beans/G166.jpg\",\n                 \"beans/G799.jpg\"),\n               plot = TRUE)\n\n\n\n\n\n\n# Gray images\nimage_index(imgtest[[1]], \"GRAY\")\n\n\n\n\n\n\nimage_index(imgtest[[2]], \"GRAY\")\n\n\n\n\n\n\n# Angular Second Moment\nres &lt;- \n  lapply(imgtest, function(x){\n    analyze_objects(x,\n                    index = \"B-R\",\n                    haralick = TRUE, # texture features\n                    har_band = \"GRAY\",\n                    marker = \"dva\",\n                    marker_col = \"green\", \n                    marker_size = 3,\n                    opening = 3,\n                    watershed = FALSE)\n  })\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [407ms]\n\n\n\n\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [467ms]\n\n\n\n\n# Batch Processing\nres &lt;- \n  analyze_objects(pattern = \"G\",\n                  dir_original = \"beans\",\n                  index = \"B-R\",\n                  haralick = TRUE, # texture features\n                  marker_col = \"green\", \n                  opening = 10,\n                  watershed = FALSE,\n                  object_index = c(\"L\", \"a\", \"b*\"),\n                  parallel = TRUE)\n\n── Parallel processing using 3 cores ─────── Started on 2025-09-02 | 17:35:16 ──\n\n\nℹ Processing 55 images found on 'D:/htp_cbmp2025/beans'. Please, wait.\n\n\n███████████████████████████████    2% | ETA: 13m\n\n\n███████████████████████████████   38% | ETA: 26s\n\n\n███████████████████████████████   56% | ETA: 15s\n\n\n███████████████████████████████   76% | ETA:  7s\n\n\n███████████████████████████████   96% | ETA:  1s\n\n\n███████████████████████████████  100% | ETA:  0s\n\n\nℹ Processing 55 images found on 'D:/htp_cbmp2025/beans'. Please, wait.\n✔ Batch processing finished [27.9s]\n\n⠙ Binding the results.\n\n\n┌ Global statistics  ──────────────────────────────────────────────┐\n│                                                                  │\n│   Total objects: 281            Total area: 7950970              │\n│   Overall mean area: 28295.27   Overall SD: 9217.13              │\n│   Min area: 6358                Max area: 51688                  │\n│                                                                  │\n└──────────────────────────────────────────────────────────────────┘\n┌ Across-image statistics (per-image averages) ────────────────────┐\n│                                                                  │\n│   Avg objects: 5.11             Avg sum area: 144563.09          │\n│   Min objects: 5                Max objects: 9                   │\n│   Avg area: 28465.66            Avg SD area: 4603.52             │\n│   Min mean area: 8219           Max mean area: 40847.6           │\n│                                                                  │\n└─────────────────────────────────────────────── Based on 0 images ┘\n\n\n── Processing successfully finished ──────────────── on 2025-09-02 | 17:35:45 ──\n⠙ Binding the results.\n✔ Binding the results. [207ms]\n\ndfpca &lt;- \n  left_join(res$results, res$object_index) |&gt; \n  select(img, L, a, `b*`, ent) |&gt; \n  group_by(img) |&gt; \n  summarise(across(where(is.numeric), mean)) |&gt; \n  column_to_rownames(\"img\")\n\nJoining with `by = join_by(img, id)`\n\nlibrary(factoextra)\n\nWelcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa\n\nlibrary(FactoMineR)\n\na &lt;- metan::clustering(dfpca, scale = TRUE)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\nfviz_dend(a$hc, k = 5)\n\nWarning: The `&lt;scale&gt;` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the factoextra package.\n  Please report the issue at &lt;https://github.com/kassambara/factoextra/issues&gt;.\n\n\n\n\n\n\n\npcam &lt;- PCA(dfpca, graph = FALSE)\nfviz_pca_biplot(pcam, repel = TRUE)\n\n\n\n\n\n\n\n\nimg &lt;- image_import(\"feijoes.jpg\", resize = 50)\nscatt &lt;-\n  object_scatter(\n    img,\n    index = \"B-R\",\n    watershed = FALSE,\n    erosion = 15,\n    filter = 10,\n    object_index = c(\"L\", \"a\", \"b*\"),\n    x = \"L\",\n    y = \"ent\",\n    haralick = TRUE,\n    show_id = FALSE,\n    xlab = \"Luminosidade\",\n    ylab = \"Entropia da GLCM\",\n    scale = 0.15,\n    xy_ratio = 1.5\n  )\n\nℹ Getting cached data...\n\n\n✔ Getting cached data... [2.2s]\n\n\n\n\n\nℹ Putting objects in their positions...\n\n\n\n\n\n\n\n\n✔ Putting objects in their positions... [300ms]",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#pollen-counting-and-viability",
    "href": "dia_01.html#pollen-counting-and-viability",
    "title": "Scripts - 03/09/2025",
    "section": "\n8.1 Pollen Counting and Viability",
    "text": "8.1 Pollen Counting and Viability\nImage available in this discussion\n\nimg &lt;- image_import(\"pollen.jpg\", plot = TRUE)\nres &lt;-\n  analyze_objects(img,\n                  filter = 2,\n                  tolerance = 0.5,\n                  lower_noise = 0.3,\n                  show_contour = FALSE,\n                  index = \"L*\")\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [1.3s]\n\n\n\n\nsize &lt;- res$results\nids &lt;- size[size$area &gt; 580, ]\nids2 &lt;- size[size$area &lt;= 580, ]\npoints(ids$x, ids$y, pch = 16)\npoints(ids2$x, ids2$y, pch = 16, col = \"yellow\")\n\n\nlegend(\"top\",\n       c(\"Viable\", \"Not Viable\"),\n       pch = 16,\n       ncol = 2,\n       col = c(\"black\", \"yellow\"))\nprop &lt;- nrow(ids) / (nrow(ids) + nrow(ids2)) * 100\ntext(1020, -100,\n     labels = paste0(\"Count:\", res$statistics$value[1]))\ntext(1100, -60,\n     labels = paste0(\"Viable Pollen: \", round(prop, 3), \"%\"))",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#counting-corn-kernels-on-cobs",
    "href": "dia_01.html#counting-corn-kernels-on-cobs",
    "title": "Scripts - 03/09/2025",
    "section": "\n8.2 Counting Corn Kernels on Cobs",
    "text": "8.2 Counting Corn Kernels on Cobs\n\nimg &lt;- image_import(\"maize.jpg\", plot = TRUE)\n\n\n\n\n\n\ncrop &lt;- \n  img |&gt; \n  image_crop(height = 52:1006,\n             plot = TRUE)\n\nres &lt;-\n  analyze_objects(crop,\n                  filter = 10,\n                  index = \"R\",\n                  show_lw = TRUE,\n                  invert = TRUE,\n                  width_at = TRUE,\n                  watershed = FALSE)\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [1.6s]\n\n\n\n\n# largura ao longo do comprimento\npar(mfrow = c(1, 4))\na &lt;- lapply(res$contours, poly_width_at, at = \"height\", plot = TRUE)\n\n\n\n\n\n\npar(mfrow = c(1,1))\n\n# Counting the Kernels\nseg &lt;- image_segment(crop,\n                     filter = 20,\n                     index = \"R-B\",\n                     col_background = \"gray\",\n                     invert = TRUE)\n\n\n\n\n\n\nimage_index(seg, \"L*\")\n\n\n\n\n\n\nres &lt;-\n  analyze_objects_shp(seg,\n                      ncol = 4,\n                      threshold = \"adaptive\",\n                      windowsize = 33,\n                      tolerance = 1,\n                      index = \"L*-a\",\n                      marker = \"point\",\n                      marker_col = \"black\",\n                      invert = TRUE,\n                      plot = TRUE,\n                      upper_size = 1200)\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [1.9s]\n\n\n\n\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [716ms]\n\n\n\n\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [628ms]\n\n\n\n\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [505ms]\n\n\n\n\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [504ms]\n\n\n\n\n# A correction factor will be needed here. Note that only nearly a half of the ear is analyzed\nres$statistics |&gt; \n  filter(stat == \"n\")\n\n   img stat value\n1 shp1    n   233\n2 shp2    n   219\n3 shp3    n   180\n4 shp4    n   202",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#fourier-descriptors",
    "href": "dia_01.html#fourier-descriptors",
    "title": "Scripts - 03/09/2025",
    "section": "\n8.3 Fourier Descriptors",
    "text": "8.3 Fourier Descriptors\nThe available functions for contour analysis using Elliptical Fourier Descriptors were adapted from Claude (2088)10\nThe following example shows how to extract Fourier descriptors from sweet potato leaves, derived from an experiment conducted by the NEOSC group at UFSC.\n\nimg &lt;- image_import(\"potato.jpg\") \n\n# Contours\ncont &lt;- object_contour(img,\n                       index = \"R\",\n                       plot = FALSE,\n                       watershed = FALSE)\n# removing the reference\nplot_polygon(cont)\n\n\n\n\n\n\ncont &lt;- cont[-which(names(cont) == \"9\")]\nplot_polygon(cont)\n\n\n\n\n\n\n# Compute the Fourier descriptors\nfourier &lt;- efourier(cont, nharm = 30)\nfourier_inv5 &lt;- efourier_inv(fourier, nharm = 5)\nfourier_inv10 &lt;- efourier_inv(fourier, nharm = 10)\nfourier_inv20 &lt;- efourier_inv(fourier, nharm = 20)\n\n# Plot the estimated contour with different harmonics\nplot(img)\nplot_contour(cont, col = \"red\", lwd = 1)\nplot_contour(fourier_inv5, col = \"blue\", lwd = 3)\nplot_contour(fourier_inv10, col = \"green\", lwd = 3)\nplot_contour(fourier_inv20, col = \"salmon\", lwd = 3)\n\n\n\n\n\n\n# or using the analyze_objects() function\n# Contours\nres &lt;- \n  analyze_objects(img, \n                  marker = \"id\",\n                  watershed = FALSE,\n                  reference = TRUE,\n                  reference_area = 20,\n                  efourier = TRUE,\n                  nharm = 15,\n                  plot = FALSE)\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [2.6s]\n\n\n\n\nimage_view(img,\n           object = res,\n           alpha = 0.3,\n           attribute = \"solidity\")\n\nℹ Using downsample = 2 so that the number of rendered pixels approximates max_pixels.\n\n\nWarning: Found less unique colors (5) than unique zcol values (7)! \nInterpolating color vector to match number of zcol values.\n\n\n\n\n\ncoefs &lt;- res$efourier_norm\n\npca &lt;- \n  coefs |&gt; \n  select(id:D15) |&gt; \n  pliman::column_to_rownames(\"id\") |&gt; \n  select(-A1)\n\nlibrary(factoextra)\nlibrary(FactoMineR)\npcam &lt;- PCA(pca, graph = FALSE)\nfviz_pca_ind(pcam)",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#using-color-palettes",
    "href": "dia_01.html#using-color-palettes",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.1 Using Color Palettes",
    "text": "9.1 Using Color Palettes\nColor palettes can be created simply by manually sampling small areas of representative images and producing a composite image representing each desired class (background, healthy tissue, and symptomatic tissue). The following image11 shows symptoms of anthracnose (Elsinoë ampelina) on grape leaves.\n\nimg &lt;- image_import(pattern = \"videira\", plot = TRUE)\n\n\n\n\n\n\n# putting image names into quotes \"\" says to pliman to search such image in the working directory\nsev &lt;- measure_disease(\"videira\",\n                       img_healthy = \"videira_healthy\",\n                       img_symptoms = \"videira_disease\",\n                       img_background = \"videira_background\")\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [1.2s]\n\n\n\n\nsev$severity\n\n   healthy symptomatic\n1 85.02614    14.97386",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#using-image-indices",
    "href": "dia_01.html#using-image-indices",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.2 Using Image Indices",
    "text": "9.2 Using Image Indices\n\ngrape &lt;- img$videira.png\nimage_index(grape, c(\"B\", \"R\", \"G\", \"NGRDI\"))\n\n\n\n\n\n\nseg &lt;- image_segment(as_image(grape@.Data[,,1:3]), \"B\",\n                     fill_hull = TRUE)\n\n\n\n\n\n\nsev2 &lt;-\n  measure_disease(\"videira\",\n                  index_lb = \"G\",\n                  index_dh = \"NGRDI\",\n                  contour_col = \"red\",\n                  opening = c(0, 5),\n                  threshold = c(\"Otsu\", 0),\n                  # show_original = FALSE,\n                  show_features = TRUE,\n                  save_image = TRUE,\n                  show_segmentation = TRUE,\n                  watershed = TRUE)\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [1.3s]\n\n\n\n\nsev2$severity\n\n   healthy symptomatic\n1 89.55889    10.44111",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#batch-processing-1",
    "href": "dia_01.html#batch-processing-1",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.3 Batch Processing",
    "text": "9.3 Batch Processing\nTo analyze multiple images from a directory, use the pattern argument to declare a pattern for file names. Here, 50 soybean leaves available in the repository https://osf.io/4hbr6, a database of plant disease severity annotation images, will be used. Thanks to Emerson M. Del Ponte and his collaborators for making this project publicly available. Using the save_image = TRUE argument saves the processed images in a temporary directory defined by tempdir().\n\n# create a temporary directory\n\nsev_batch &lt;-\n  measure_disease(pattern = \"soy\",\n                  dir_original = \"sevsoja\",\n                  dir_processed = \"sevproc\",\n                  index_lb = \"B\",\n                  index_dh = \"NGRDI\",\n                  threshold = c(\"Otsu\", -0.03),\n                  plot =  FALSE,\n                  # save_image = TRUE,\n                  parallel = TRUE)\n\n── Parallel processing using 3 cores ───── Started on \"2025-09-02 | 17:36:28\" ──\n\n\nℹ Processing 50 images in parallel...\n\n\n███████████████████████████████    2% | ETA: 13m\n\n\n███████████████████████████████   42% | ETA: 25s\n\n\n███████████████████████████████   66% | ETA: 11s\n\n\n███████████████████████████████  100% | ETA:  0s\n\n\nℹ Processing 50 images in parallel...\n── Processing successfully finished ──────────────── on 2025-09-02 | 17:36:53 ──\nℹ Processing 50 images in parallel...\n✔ Batch processing finished [25.5s]\n\nsev_batch$severity |&gt;\n  ggplot(aes(x = symptomatic)) +\n  geom_histogram(bins = 8)",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#leafhopper",
    "href": "dia_01.html#leafhopper",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.4 Leafhopper",
    "text": "9.4 Leafhopper",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#multiple-leaves-in-an-image",
    "href": "dia_01.html#multiple-leaves-in-an-image",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.5 Multiple Leaves in an Image",
    "text": "9.5 Multiple Leaves in an Image\nWhen multiple leaves are present in an image, the measure_disease function returns the average severity of the leaves in the image. To quantify severity per leaf, the measure_disease_byl() function can be used.\nThis function calculates the percentage of symptomatic leaf area using color palettes or RGB indices for each leaf (byl) in an image. This allows, for example, processing replicates of the same treatment and obtaining results for each replicate with a single image.\nIn the following example, images of orange leaves, kindly provided by Gabriele de Jesus, are processed.\n\nimg &lt;- image_import(\"sev_leaves.jpg\", plot = TRUE)\n\n\n\n\n\n\nsev &lt;-\n  measure_disease_byl(img,\n                      index = \"B\",\n                      index_lb = \"B\",\n                      index_dh = \"NGRDI\")\n\nℹ Processing a single image. Please, wait.\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [554ms]\n\n\n\n\n\nℹ Processing a single image. Please, wait.\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [609ms]\n\nℹ Processing a single image. Please, wait.\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [581ms]\n\nℹ Processing a single image. Please, wait.\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [582ms]\n\nℹ Processing a single image. Please, wait.\n✔ Image Successfully analyzed! [4s]\n\nsev$severity\n\n  img leaf  healthy symptomatic\n1 img    1 59.26646    40.73354\n2 img    2 59.62619    40.37381\n3 img    3 60.08614    39.91386\n4 img    4 57.36590    42.63410",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#dose-response-curves",
    "href": "dia_01.html#dose-response-curves",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.6 Dose-Response Curves",
    "text": "9.6 Dose-Response Curves\nThe provided script deals with data analysis of a dose-response experiment to evaluate the effectiveness of different products in reducing the severity of a plant disease. The use of images is authorized by SUMITOMO-SA.\nThe first step is to quantify the severity within each petri dish, which represents a dose of a particular product. Subsequently, to fit the curves, the analysis is performed using the drda library in R, which is a tool for dose-response data analysis.\nThe script fits nonlinear regression models to dose-response data using the drda() function for each product. The specified model is a 4-parameter log-logistic regression (“ll4”).\n\n# DOSE-RESPONSE\n# Compute severity per leaf\nsev &lt;-\n  measure_disease_byl(pattern = \"img\",\n                      index = \"B\",\n                      index_dh = \"NGRDI\",\n                      dir_original = \"dose_response\",\n                      parallel = TRUE,\n                      opening = c(25, 0))\n\n── Parallel processing of 14 images ────── Started at \"2025-09-02 | 17:37:00\" ──\n\n\nℹ Dispatching batches...\n\n\n███████████████████████████████    7% | ETA:  6m\n\n\n███████████████████████████████  100% | ETA:  0s\n\n\nℹ Dispatching batches...\n✔ All batches complete! [29.8s]\n\nres &lt;- \n  map_dfr(sev, function(x){\n    x$severity\n  })\n\nsevres &lt;- \n  res |&gt;\n  separate(img, into = c(\"img\", \"product\", \"dose\"), sep = \"_\") |&gt;\n  mutate(dose = as.numeric(str_replace_all(dose, \",\", \".\")),\n         symptomatic = symptomatic / 100)\n\nmodels &lt;-\n  sevres |&gt;\n  group_by(product) |&gt;\n  nest() |&gt;\n  mutate(models = map(data,\n                      ~drda(symptomatic ~ dose,\n                            data = .,\n                            mean_function = \"ll4\"))) |&gt; # define the model here\n  dplyr::select(-data)\n\n# function to obtain the coefficients\nget_results &lt;- function(model,\n                        resplevel = 0.5,\n                        type = \"relative\"){\n  coefs &lt;- coef(model) |&gt; t()\n  ed &lt;- effective_dose(model, y = resplevel) |&gt; as.data.frame()\n  integ &lt;- data.frame(nauc = nauc(model, range(model$model[[2]])))\n  cbind(coefs, ed, integ)\n}\n\n# Obtain the coefficients\n# alpha:  the value of the function at x = 0\n# delta: height of the curve\n# eta: the steepness (growth rate) of the curve\n# phi: the x value at which the curve is equal to its mid-point\n\ncoefs &lt;-\n  models |&gt;\n  mutate(coefs = map_dfr(\n    .x = models,\n    .f = ~get_results(., resplevel = 0.5)) # DL50\n  ) |&gt;\n  dplyr::select(-models) |&gt;\n  unnest(coefs) |&gt;\n  ungroup() |&gt;\n  as.data.frame()\n\ncoefs\n\n  product     alpha      delta       eta       phi  Estimate Lower .95\n1      P1 0.3968639 -0.3864929 1.3703455 1.8071352 1.8071352 1.1849347\n2      P2 0.3821491 -0.3715773 0.9932846 0.4335226 0.4335226 0.2893241\n  Upper .95       nauc\n1 2.4293356 0.02744016\n2 0.5777211 0.01948812\n\nplot(models$models[[1]], models$models[[2]],\n     level = 0,\n     base = \"10\",\n     ylim = c(0, 0.5),\n     xlim = c(0, 100),\n     legend = c(\"P1\", \"P2\"),\n     xlab = \"Dose (ppm)\",\n     ylab = \"Disease Severity\",\n     col = metan::ggplot_color(2),\n     cex = 2)\n\n\n\n\n\n\n# derivative with respect to dose of the model\nD(expression(alpha + delta * x^eta / (x^eta + phi^eta)), \"x\")\n\ndelta * (x^(eta - 1) * eta)/(x^eta + phi^eta) - delta * x^eta * \n    (x^(eta - 1) * eta)/(x^eta + phi^eta)^2\n\ndy &lt;- function(x,alpha,  delta,   eta,   phi){\n  delta * (x^(eta - 1) * eta)/(x^eta + phi^eta) - delta * x^eta *\n    (x^(eta - 1) * eta)/(x^eta + phi^eta)^2\n}\n\n# First derivative\nggplot(data.frame(x = c(0, 5)), aes(x = x)) +\n  pmap(coefs |&gt; select(product:phi), function(product, alpha, delta, eta, phi) {\n    stat_function(fun = function(x) dy(x, alpha, delta, eta, phi),\n                  aes(color = product),\n                  linewidth = 1)\n  }) +\n  geom_vline(aes(xintercept = phi,\n                 color = product),\n             data = coefs,\n             linetype = 2) +\n  labs(x = \"Dose (ppm)\",\n       y = \"Severity Reduction Rate (% per ppm)\",\n       color = \"Product\") +\n  ggthemes::theme_base()\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_function()`).",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#fungi-in-petri-dishes",
    "href": "dia_01.html#fungi-in-petri-dishes",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.7 Fungi in Petri Dishes",
    "text": "9.7 Fungi in Petri Dishes\n\n# fungi in petri dish\nfungi &lt;- image_import(\"fungi.jpg\", plot = TRUE)\n\n\n\n\n\n\nimage_index(fungi, \"L\")\n\n\n\n\n\n\nanalyze_objects(fungi,\n                index = \"L\",\n                filter  = 15,\n                watershed = FALSE,\n                contour_size  = 3,\n                invert = TRUE) |&gt;\n  get_measures(dpi = 90) |&gt;\n  plot_measures(measure = \"area\",\n                col = \"black\",\n                size = 2)\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [710ms]",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#bacteria",
    "href": "dia_01.html#bacteria",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.8 Bacteria",
    "text": "9.8 Bacteria\n\nbac &lt;- image_import(\"bacteria.jpg\", plot = TRUE)\nres &lt;- \n  analyze_objects(bac,\n                  index = \"L*\",\n                  threshold = 0.3,\n                  marker = \"point\")\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [557ms]\n\n\n\n\nres$statistics\n\n       stat        value\n1         n 1.780000e+02\n2  min_area 3.000000e+00\n3 mean_area 2.754494e+01\n4  max_area 8.200000e+01\n5   sd_area 1.467735e+01\n6  sum_area 4.903000e+03\n7  coverage 3.064375e-02",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "dia_01.html#footnotes",
    "href": "dia_01.html#footnotes",
    "title": "Scripts - 03/09/2025",
    "section": "Footnotes",
    "text": "Footnotes\n\nOtsu, N. 1979. Threshold selection method from gray-level histograms. IEEE Trans Syst Man Cybern SMC-9(1): 62–66. doi: 10.1109/tsmc.1979.4310076.↩︎\nSource: http://gazeta-rs.com.br/as-principais-doencas-da-videira-na-primavera/#prettyPhoto↩︎\nKarcher, D.E., and M.D. Richardson. 2003. Quantifying Turfgrass Color Using Digital Image Analysis. Crop Science 43(3): 943–951. doi: 10.2135/cropsci2003.9430↩︎\nClaude, J. 2008. Morphometrics with R https://link.springer.com/book/10.1007/978-0-387-77789-4↩︎\nMontero, RS, E. Bribiesca, R. Santiago, and E. Bribiesca. 2009. State of the Art of Compactness and Circularity Measures. International Mathematical Forum 4(27): 1305–1335.↩︎\nLee, Y., and W. Lim. 2017. Shoelace Formula: Connecting the Area of a Polygon and the Vector Cross Product. The Mathematics Teacher 110(8): 631–636. doi: 10.5951/MATHTEACHER.110.8.0631.↩︎\nMontero, R.S., E. Bribiesca, R. Santiago, and E. Bribiesca. 2009. State of the Art of Compactness and Circularity Measures. International Mathematical Forum 4(27): 1305–1335↩︎\nSource: http://gazeta-rs.com.br/as-principais-doencas-da-videira-na-primavera/#prettyPhoto↩︎\nKarcher, D.E., and M.D. Richardson. 2003. Quantifying Turfgrass Color Using Digital Image Analysis. Crop Science 43(3): 943–951. doi: 10.2135/cropsci2003.9430↩︎\nClaude, J. 2008. Morphometrics with R https://link.springer.com/book/10.1007/978-0-387-77789-4↩︎\nSource: http://gazeta-rs.com.br/as-principais-doencas-da-videira-na-primavera/#prettyPhoto↩︎",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "02_dia2.html",
    "href": "02_dia2.html",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "In this material, the mosaics used for application are described as follows:\n\n\nName\nWidth\nHeight\nBands\nDescription\nSource\n\n\n\n\n\n\n\ndsm folder\n\n\n\n\n\n\n\n\n\n\n\ndsm.tif\n2837\n2770\nSingle layer\nDigital Surface Model\nArthur Bernardeli\n\n\n\n\n\n\ndtm.tif\n2837\n2770\nSingle layer\nDigital Terrain Model\nArthur Bernardeli\n\n\n\n\n\n\nmask.tif\n2837\n2770\nSingle layer\nDSM Mask\nArthur Bernardeli\n\n\n\n\n\n\northo.tif\n5669\n6026\nR, G, B\nMosaic of a soybean breeding field\nArthur Bernardeli\n\n\n\n\n\n\ngrowth_models folder\n\n\n\n\n\n\n\n\n\n\n\nDAP_4_05-11-2021.tif\n-\n-\nSingle layer\nDigital Surface Model\nFilipe Mathias\n\n\n\n\n\n\n...\n…\n…\n…\n…\n\n\n\n\n\n\n\nDAP_80_07-26-2021.tif\n-\n-\nSingle layer\nDigital Surface Model\nFilipe Matias\n\n\n\n\n\n\nlettuce folder\n\n\n\n\n\n\n\n\n\n\n\nlettuce.tif\n1456\n2998\nR,G,B\nOrthomosaic of a lettuce experiment\nThis paper\n\n\n\n\n\n\nmaturity folder (10 rasters)\n\n\n\n\n\n\n\n\n\n\n\ncropped_09-10-2024\n10812\n1460\nR,G,B\nTime series of a soybean field\nArthur Bernardeli\n\n\n\n\n\n\n...\n…\n…\n…\n…\n…\n\n\n\n\n\n\ncropped_10-11-2024\n10812\n1460\nR,G,B\n\n\n\nTime series of a soybean field\n\n\n\n\npotato folder\n\n\n\n\n\n\n\n\n\n\n\npotato.tif\n5202\n4665\nR, G, B\nMosaic of a potato breeding field\nGustavo Nandi\n\n\n\n\n\n\nwheat folder\n\n\n\n\n\n\n\n\n\n\n\nwheat_ndsu.tif\n768\n3120\nB, G, R, RE, NIR\nMosaic of a wheat breeding area\nFilipe Matias\n\n\n\n\n\n\nwheat_ufv.tif\n2029\n2120\nR,G,B,RE,NIR\n\nMaicon Nardino\n\n\n\n\n\n\n\nIn this material, I will show some examples that uses functions from {pliman} package, but all the practical exercices will be made using {plimanshiny}.\n\nOrthomosaic (SpatRasters) objects can be imported and exported using the functions provided by the package. First, an orthomosaic image is imported as a SpatRaster object using the mosaic_input() function. The image can then be visualized in RGB format using the mosaic_plot_rgb() function. For interactive mapping, the mosaic_view() function can be used, specifying the RGB bands (e.g., R = 3, G = 2, B = 1) to adjust the display of the map. Additionally, the orthomosaic can be exported to a file using the mosaic_export() function.\n\nlibrary(pliman)\n\n╭ Welcome to pliman version \"3.1.1\"! ──────────────────────────────╮\n│                                                                  │\n│   Developed collaboratively by NEPEM &lt;https://nepemufsc.com&gt;     │\n│   Group lead: Prof. Tiago Olivoto                                │\n│   For citation, type `citation('pliman')`                        │\n│   We welcome your feedback and suggestions!                      │\n│                                                                  │\n╰────────────── Simplifying high-throughput plant phenotyping in R ╯\n\n# Import an orthomosaic image as a SpatRaster object\nmosaic &lt;- mosaic_input(\"wheat/wheat_ndsu.tif\")\n\nclass       : SpatRaster \nsize        : 3120, 768, 5  (nrow, ncol, nlyr)\nresolution  : 0.02771201, 0.02771201  (x, y)\nextent      : 755755.9, 755777.2, 5176788, 5176875  (xmin, xmax, ymin, ymax)\ncoord. ref. : +proj=aeqd +lat_0=90 +lon_0=1.35 +x_0=0 +y_0=0 +ellps=sphere +units=m +no_defs \nsource      : wheat_ndsu.tif \nnames       : ndsu_1, ndsu_2, ndsu_3, ndsu_4, ndsu_5 \nmin values  :    299,    548,    513,    574,   2387 \nmax values  :  13511,  13468,   9192,  20950,  48265 \n\nmosaic_plot_rgb(mosaic, stretch = \"lin\")\n\n\n\n\n\n\n# Create an interactive map using the RGB bands (R = 3, G = 2, B = 1)\nbm &lt;- mosaic_view(mosaic, \n                  quantiles = c(0, .97),\n                  max_pixels = 4e6,\n                  r = 3, # Red channel\n                  g = 2, # Green channel\n                  b = 1) # Blue channel\n\nℹ The number of pixels is very high, which might slow the rendering process.\n\n\nWarning in CPL_crs_from_input(x): GDAL Message 1: +init=epsg:XXXX syntax is\ndeprecated. It might return a CRS with a non-EPSG compliant axis order. Further\nmessages of this type will be suppressed.\n\nbm\n\n\n\n\n# Export the mosaic to a file (uncomment the line below to run)\n# mosaic_export(mosaic, \"my_mosaic.tif\")\n\n\n\nTo create a shapefile grid over the mosaic, the shapefile_build() function is used, specifying the number of rows and columns for the grid. This allows for the segmentation of the mosaic into plots that can be individually analyzed.\n\n# Create a shapefile grid over the mosaic with specified rows and columns\nshp &lt;- shapefile_build(mosaic,\n                       basemap = bm,\n                       layout = \"btlr\",\n                       plot_width = 1.2,\n                       plot_height = 2,\n                       ncol = 11, # Number of columns\n                       nrow = 20) # Number of rows\n\nbm + shapefile_view(shp, attribute = \"plot_id\")\n\n# see the size of plots\nshapefile_measures(shp)\nshapefile_export(shp, \"myfirsshape.shp\")\n\n\nShapefiles can be imported using the shapefile_input() function, which reads shapefile objects from a file. After importing the shapefile, the mosaic can be plotted in RGB using mosaic_plot_rgb(), and the shapefile can be overlaid on the mosaic using the shapefile_plot() function, which allows customization of the line width and other graphical parameters.\n\n# Import a shapefile object from a file\nshp &lt;- shapefile_input(\"wheat/wheat_ndsu_shp.rds\")\n\nSimple feature collection with 220 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 755757.8 ymin: 5176793 xmax: 755775.2 ymax: 5176870\nProjected CRS: PROJCRS[\"unknown\",\n    BASEGEOGCRS[\"unknown\",\n        DATUM[\"Unknown based on Normal Sphere (r=6370997) ellipsoid\",\n            ELLIPSOID[\"Normal Sphere (r=6370997)\",6370997,0,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]]],\n    CONVERSION[\"Modified Azimuthal Equidistant\",\n        METHOD[\"Modified Azimuthal Equidistant\",\n            ID[\"EPSG\",9832]],\n        PARAMETER[\"Latitude of natural origin\",90,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",1.35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"northing\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\nFirst 10 features:\n   unique_id block plot_id row column                       geometry\n1          1   B01   P0001   1      1 POLYGON ((755775.2 5176793,...\n2          2   B01   P0022   2      1 POLYGON ((755775.2 5176797,...\n3          3   B01   P0023   3      1 POLYGON ((755775.2 5176801,...\n4          4   B01   P0044   4      1 POLYGON ((755775.2 5176805,...\n5          5   B01   P0045   5      1 POLYGON ((755775.2 5176809,...\n6          6   B01   P0066   6      1 POLYGON ((755775.2 5176813,...\n7          7   B01   P0067   7      1 POLYGON ((755775.2 5176817,...\n8          8   B01   P0088   8      1 POLYGON ((755775.2 5176821,...\n9          9   B01   P0089   9      1 POLYGON ((755775.2 5176824,...\n10        10   B01   P0110  10      1 POLYGON ((755775.2 5176828,...\n\n# Plot the mosaic in RGB\nmosaic_plot_rgb(mosaic, stretch = \"lin\")\n\n# Overlay the imported shapefile on the mosaic with customized line width\nshapefile_plot(shp, add = TRUE, lwd = 2, col = \"red\")\n\n\n\n\n\n\nbm + shapefile_view(shp, attribute = \"plot_id\")\n\n\n\n\n\n\nA variety of vegetation indexes are available in pliman, as detailed on Tiago Olivoto’s website. These indexes can be computed using the mosaic_index() function. By specifying the RGB channels of the mosaic (e.g., R = 1, G = 2, B = 3) and selecting the desired indexes (e.g., “NGRDI” and “GLI”), the function calculates the indexes, which can be used for further analysis.\n\n# Calculate vegetation indexes (e.g., NGRDI and GLI) using the mosaic's RGB channels\nind &lt;- mosaic_index(mosaic, \n                    b = 1, # Blue channel\n                    g = 2, # Green channel\n                    r = 3, # Red channel\n                    re = 4, # Red Edge channel\n                    nir = 5, # Near-Infrared channel\n                    index = c(\"NDVI\", \"NDRE\", \"(NIR-R) / (NIR+R)\")) # List of vegetation indexes to compute\n\n── Computing rasters for 3 indices ──────────────────── Started at \"10:26:32\" ──\n\n\nWarning: Index \"(NIR-R) / (NIR+R)\" not available. Trying to compute your own\nindex.\n\n\n── 3 vegetation indices computed ─────────── Ended at \"2025-09-03 | 10:26:34\" ──\n\n\n\n\n\n\n\nmosaic_plot(ind[[1]])\n\n\n\n\n\n\nmosaic_hist(ind[[1]])\n\nWarning: [hist] a sample of 42% of the cells was used\n\n\n\n\n\n\n\n# segment a mosaic\nsegmented &lt;- \n  mosaic_segment(mosaic, \n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 index = \"NDVI\")\n\nmosaic_plot_rgb(segmented, stretch = \"lin\")\n\n\n\n\n\n\n# segment a mosaic and return a mask\nsegmented &lt;- \n  mosaic_segment(mosaic, \n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 index = \"NDVI\",\n                 invert = TRUE,\n                 return = \"mask\")\nmosaic_plot(segmented)\n\n\n\n\n\n\n# extract values for each plot\nindexes &lt;- mosaic_extract(ind, shp)\n\nWarning in .local(x, y, ...): Polygons transformed to raster CRS (EPSG:NA)\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |==                                                                    |   2%\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |===                                                                   |   5%\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |==========                                                            |  15%\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |============                                                          |  18%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |===============                                                       |  22%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |================                                                      |  23%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |========================                                              |  35%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |==========================                                            |  38%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |==============================                                        |  42%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |=================================                                     |  48%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |=====================================                                 |  52%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |======================================                                |  55%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |========================================                              |  58%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |============================================                          |  62%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |=============================================                         |  65%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |===============================================                       |  68%\n  |                                                                            \n  |================================================                      |  68%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |==================================================                    |  72%\n  |                                                                            \n  |===================================================                   |  72%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |====================================================                  |  75%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |======================================================                |  78%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=========================================================             |  81%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |==========================================================            |  82%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |============================================================          |  85%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |==============================================================        |  88%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |=================================================================     |  92%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |==================================================================    |  95%\n  |                                                                            \n  |===================================================================   |  95%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |====================================================================  |  98%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\nindexes\n\nSimple feature collection with 220 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 755757.8 ymin: 5176793 xmax: 755775.2 ymax: 5176870\nProjected CRS: PROJCRS[\"unknown\",\n    BASEGEOGCRS[\"unknown\",\n        DATUM[\"Unknown based on Normal Sphere (r=6370997) ellipsoid\",\n            ELLIPSOID[\"Normal Sphere (r=6370997)\",6370997,0,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]]],\n    CONVERSION[\"Modified Azimuthal Equidistant\",\n        METHOD[\"Modified Azimuthal Equidistant\",\n            ID[\"EPSG\",9832]],\n        PARAMETER[\"Latitude of natural origin\",90,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",1.35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"northing\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\nFirst 10 features:\n   unique_id block plot_id row column median.NDVI median.NDRE\n1          1   B01   P0001   1      1   0.9063697   0.6897340\n2          2   B01   P0022   2      1   0.8729471   0.6278511\n3          3   B01   P0023   3      1   0.8523978   0.5689529\n4          4   B01   P0044   4      1   0.8694811   0.5859919\n5          5   B01   P0045   5      1   0.8880474   0.6595912\n6          6   B01   P0066   6      1   0.9029454   0.6866557\n7          7   B01   P0067   7      1   0.8824696   0.6411043\n8          8   B01   P0088   8      1   0.9076901   0.6771331\n9          9   B01   P0089   9      1   0.9114776   0.6916510\n10        10   B01   P0110  10      1   0.9060094   0.6885610\n   median.(NIR-R) / (NIR+R)                       geometry\n1                 0.9063697 POLYGON ((755775.2 5176793,...\n2                 0.8729471 POLYGON ((755775.2 5176797,...\n3                 0.8523978 POLYGON ((755775.2 5176801,...\n4                 0.8694811 POLYGON ((755775.2 5176805,...\n5                 0.8880474 POLYGON ((755775.2 5176809,...\n6                 0.9029454 POLYGON ((755775.2 5176813,...\n7                 0.8824696 POLYGON ((755775.2 5176817,...\n8                 0.9076901 POLYGON ((755775.2 5176821,...\n9                 0.9114776 POLYGON ((755775.2 5176824,...\n10                0.9060094 POLYGON ((755775.2 5176828,...\n\n\n\nmosaic_analyze() is the cornerstone function in pliman for high-throughput phenotyping. It enables users to efficiently process orthomosaics and extract a wealth of data from satellite or drone imagery with just a few lines of code. In most cases, all you need is an orthomosaic (or even a .jpg image from a cellphone) and the right function parameters to unlock its full potential.\n\n# Analyze the mosaic using the defined shapefile and vegetation indexes\nres &lt;- \n  mosaic_analyze(mosaic,\n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 basemap = bm,                      # Basemap for visualization\n                 shapefile = shp,                   # Shapefile with plots\n                 plot_index = c(\"NDVI\", \"NDRE\"),    # Vegetation indexes to compute\n                 summarize_fun = c(\"median\", \"mean\", \"min\", \"max\"), # Summary statistics for each plot\n                 attribute = \"median.NDVI\")        # Attribute for mapping (e.g., NGRDI color scale)\n\n── Analyzing the mosaic ──────────────────── Started on 2025-09-03 | 10:26:42 ──\n\n\nℹ Cropping the mosaic to the shapefile extent...\n\n\n✔ Cropping the mosaic to the shapefile extent [603ms]\n\n\n\n\n\nℹ Computing vegetation indexes...\n\n\n✔ Computing vegetation indexes [956ms]\n\n\n\n\n\n── Analyzing block 1 ──\n\n\n\n\n\nℹ Extracting plot-level features...\n\n\n✔ Extracting plot-level features [1.3s]\n\n\n\n\n\nℹ Binding the extracted features...\n\n\n✔ Binding the extracted features [227ms]\n\n\n\n\n\nℹ Summarizing the results...\n\n\n── Mosaic successfully analyzed ─────────── Finished on 2025-09-03 | 10:26:46 ──\n\n\nℹ Summarizing the results...\n✔ Summarizing the results [924ms]\n\n# Display the result plot\nres$result_plot\n\nSimple feature collection with 220 features and 13 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 755757.8 ymin: 5176793 xmax: 755775.2 ymax: 5176870\nProjected CRS: PROJCRS[\"unknown\",\n    BASEGEOGCRS[\"unknown\",\n        DATUM[\"Unknown based on Normal Sphere (r=6370997) ellipsoid\",\n            ELLIPSOID[\"Normal Sphere (r=6370997)\",6370997,0,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]]],\n    CONVERSION[\"Azimuthal Equidistant\",\n        METHOD[\"Azimuthal Equidistant\",\n            ID[\"EPSG\",1125]],\n        PARAMETER[\"Latitude of natural origin\",90,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",1.35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"northing\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\nFirst 10 features:\n   unique_id block plot_id row column median.NDVI median.NDRE mean.NDVI\n1          1   B01   P0001   1      1   0.9063697   0.6897340 0.9038250\n2          2   B01   P0022   2      1   0.8729471   0.6278511 0.8675194\n3          3   B01   P0023   3      1   0.8523978   0.5689529 0.8472388\n4          4   B01   P0044   4      1   0.8694811   0.5859919 0.8657323\n5          5   B01   P0045   5      1   0.8880474   0.6595912 0.8829148\n6          6   B01   P0066   6      1   0.9029454   0.6866557 0.8993441\n7          7   B01   P0067   7      1   0.8824696   0.6411043 0.8783972\n8          8   B01   P0088   8      1   0.9076901   0.6771331 0.9051014\n9          9   B01   P0089   9      1   0.9114776   0.6916510 0.9052048\n10        10   B01   P0110  10      1   0.9060094   0.6885610 0.9008401\n   mean.NDRE  min.NDVI  min.NDRE  max.NDVI  max.NDRE\n1  0.6871165 0.7621962 0.5361932 0.9345099 0.7634687\n2  0.6247696 0.6205863 0.4595068 0.9209868 0.7154057\n3  0.5668365 0.6182213 0.3848066 0.9107233 0.6940876\n4  0.5837736 0.6504017 0.4302001 0.9132165 0.6815384\n5  0.6548557 0.6766334 0.4856216 0.9194713 0.7331700\n6  0.6817299 0.7367124 0.4884622 0.9332923 0.7663096\n7  0.6382736 0.6655113 0.4731745 0.9233408 0.7468863\n8  0.6745363 0.6969521 0.4251380 0.9326490 0.7383555\n9  0.6846186 0.6435085 0.3790271 0.9324402 0.7592227\n10 0.6857442 0.6479207 0.4932948 0.9335911 0.7672631\n                         geometry\n1  POLYGON ((755775.2 5176793,...\n2  POLYGON ((755775.2 5176797,...\n3  POLYGON ((755775.2 5176801,...\n4  POLYGON ((755775.2 5176805,...\n5  POLYGON ((755775.2 5176809,...\n6  POLYGON ((755775.2 5176813,...\n7  POLYGON ((755775.2 5176817,...\n8  POLYGON ((755775.2 5176821,...\n9  POLYGON ((755775.2 5176824,...\n10 POLYGON ((755775.2 5176828,...\n\n# ndvi plus shapefile\nbm + shapefile_view(res$result_plot, attribute = \"median.NDVI\")\n\n\n\n\n\n\n\nres &lt;- \n  mosaic_analyze(mosaic,\n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 basemap = bm,  # Basemap for visualization\n                 shapefile = shp,\n                 plot_index = \"NDVI\",   \n                 attribute = \"median.NDVI\",\n                 segment_plot = TRUE)   # compute a mask and canopy coverage\n\n── Analyzing the mosaic ──────────────────── Started on 2025-09-03 | 10:26:49 ──\n\n\nℹ Cropping the mosaic to the shapefile extent...\n\n\n✔ Cropping the mosaic to the shapefile extent [374ms]\n\n\n\n\n\nℹ Computing vegetation indexes...\n\n\n✔ Computing vegetation indexes [334ms]\n\n\n\n\n\n── Analyzing block 1 ──\n\n\n\n\n\nℹ Masking vegetation from ground...\n\n\n✔ Vegetation masking completed [1.4s]\n\n\n\n\n\nℹ Extracting plot-level features...\n\n\n✔ Extracting plot-level features [322ms]\n\n\n\n\n\nℹ Binding the extracted features...\n\n\n✔ Binding the extracted features [133ms]\n\n\n\n\n\nℹ Summarizing the results...\n\n\n── Mosaic successfully analyzed ─────────── Finished on 2025-09-03 | 10:26:52 ──\n\n\nℹ Summarizing the results...\n✔ Summarizing the results [343ms]\n\nbm +\n  shapefile_view(res$result_plot, attribute = \"coverage\")\n\n\n\n\n\n\nIn the example below, mosaic_analyze() is used to count, measure, and extract image indices at the block, plot, and individual levels in a lettuce trial. This process is based on an orthomosaic image, as described in this paper.\n\nA big thank you to the authors for providing the full-resolution .tif file, which enabled me to advance several functionalities in pliman, including high-throughput image analysis and data extraction at multiple levels. This kind of data sharing is invaluable for driving further innovation and tool development.\n\nThe trial was conducted using a randomized complete block design with four blocks. The researchers tested the effects of Aspergillus niger application (six different levels, combining both concentration and formulation) and three levels of phosphorus (0%, 50%, 100%) on lettuce growth.\n\n\nField Experiment\n\nIn the plimans shapefile, each plot within the four blocks is represented by a unique plot_id, such as “P0001,” “P0002,” etc. These correspond to the following treatments:\n\n\nPlot ID\nInoculant\nPhosphorus (%)\n\n\n\nP0001\nNI\n0\n\n\nP0002\nNI\n50\n\n\nP0003\nNI\n100\n\n\nP0004\nTS\n0\n\n\nP0005\nTS\n50\n\n\nP0006\nTS\n100\n\n\nP0007\nGR2\n0\n\n\nP0008\nGR2\n50\n\n\nP0009\nGR2\n100\n\n\nP0010\nGR6\n0\n\n\nP0011\nGR6\n50\n\n\nP0012\nGR6\n100\n\n\nP0013\nSC2\n0\n\n\nP0014\nSC2\n50\n\n\nP0015\nSC2\n100\n\n\nP0016\nSC6\n0\n\n\nP0017\nSC6\n50\n\n\nP0018\nSC6\n100\n\n\n\n\nThe mosaic_input() function is used to load the mosaic of a lettuce field, and the shapefile_input() function is used to load the corresponding shapefile that delineates the plots. You can also create a shapefile with shapefile_build() (as in the previous section) or simply define the nrow and ncol arguments in mosaic_analyze().\nIn this example, a basemap is created using a mosaic image to serve as the foundation for further visualizations. While creating a basemap is not mandatory, it can significantly speed up the process, as functions like mosaic_analyze(), shapefile_build(), and shapefile_edit() will automatically render a leaflet map if one is not provided. By pre-creating the basemap, you avoid the overhead of rendering multiple maps, making the workflow more efficient.\nAdditionally, a shapefile layer is overlaid on top of the basemap to display the levels of the inoculante factor.\n\nmos &lt;-    mosaic_input(\"lettuce/lettuce.tif\")\n\nclass       : SpatRaster \nsize        : 2998, 1456, 3  (nrow, ncol, nlyr)\nresolution  : 0.01, 0.01  (x, y)\nextent      : 236480.6, 236495.2, 7929165, 7929195  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 23S (EPSG:32723) \nsource      : lettuce.tif \nnames       : lettuce_1, lettuce_2, lettuce_3 \nmin values  :         1,         0,         0 \nmax values  :       255,       255,       255 \n\nshp &lt;- shapefile_input(\"lettuce/lettuce.rds\")\n\nSimple feature collection with 72 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 236484.2 ymin: 7929167 xmax: 236491.5 ymax: 7929194\nProjected CRS: WGS 84 / UTM zone 23S\nFirst 10 features:\n   unique_id block plot_id row column inoculante   p\n1          1    B1   B0016   1      1        SC6   0\n2          2    B1   B0011   2      1        GR6  50\n3          3    B1   B0006   3      1         TS 100\n4          4    B1   B0003   4      1         NI 100\n5          5    B1   B0013   5      1        SC2   0\n6          6    B1   B0017   6      1        SC6  50\n7          7    B1   B0009   7      1        GR2 100\n8          8    B1   B0015   8      1        SC2 100\n9          9    B1   B0010   9      1        GR6   0\n10        10    B1   B0005  10      1         TS  50\n                         geometry\n1  POLYGON ((236484.2 7929194,...\n2  POLYGON ((236484.2 7929192,...\n3  POLYGON ((236484.3 7929191,...\n4  POLYGON ((236484.4 7929189,...\n5  POLYGON ((236484.5 7929188,...\n6  POLYGON ((236484.6 7929186,...\n7  POLYGON ((236484.7 7929185,...\n8  POLYGON ((236484.8 7929183,...\n9  POLYGON ((236484.9 7929182,...\n10 POLYGON ((236485 7929180, 2...\n\n# create a basemap\nbm &lt;- mosaic_view(mos, \n                  r = 1, g = 2, b = 3,\n                  max_pixels = 2e6) # defaults is 1e6.. so here, a bit higher resolution is used\n\nℹ Using `downsample = 2` to match the max_pixels constraint.\n\nbm + shapefile_view(shp, attribute = \"p\", color_regions = ggplot_color(3))\n\n\n\n\n\n\nThere function mosaic_analyze() is all you need now. The vegetation indexes computed for each plant are defined in the object indexes. Here, the Normalized Green Red Difference Index (NGRDI), Green Leaf Index (GLI), and Blue Green Index (BGI) are used. You can find a list with all build-in vegetation indexes in pliman here.\nBy setting segment_individuals = TRUE, mosaic_analyze() shifts its focus to the individual plant level. Using a threshold-based segmentation method, it isolates each plant within a plot, enabling precise counting and measurement, provided that a higher contrast between plant and soi. While the function can also handle complex backgrounds with additional arguments, that’s not the focus here. Instead, the power of this approach lies in its ability to break down each plot into individual components, providing a detailed analysis of plant morphology, size, and distribution. This transforms high-throughput phenotyping by moving from a broad plot-level perspective to an in-depth examination of each plant, unlocking a new level of precision and insight.\n\nFor context, in the original study, the researchers manually measured the diameter of the four central plants in each plot. With mosaic_analyze(), this process is not only automated but also expanded to include every plant in the plot, providing more comprehensive data in a fraction of the time.\n\nUsing segment_index = \"GLI\", we configure the analysis to segment soil and identify individual plants based on the GLI index. The analysis will return both summary statistics for each plot and a map showing the segmented individual plants.\n\nindexes &lt;- c(\"NGRDI\", \"vNDVI\")\nan &lt;- mosaic_analyze(\n  mosaic = mos,\n  basemap = bm,\n  r = 1,\n  g = 2,\n  b = 3,\n  shapefile = shp,\n  plot_index = indexes,\n  segment_individuals = TRUE,\n  segment_index = \"GLI\"\n)\n\n── Analyzing the mosaic ──────────────────── Started on 2025-09-03 | 10:27:05 ──\n\n\nℹ Cropping the mosaic to the shapefile extent...\n\n\nWarning: ! ``segment_plot`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``segment_individuals`` must have length 1 or 4 (the number of drawn\n  polygons).\n\n\nWarning: ! ``threshold`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``watershed`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``segment_index`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``invert`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``includeopt`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``opening`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``closing`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``filter`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``erode`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``dilate`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``grid`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``lower_noise`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\n✔ Cropping the mosaic to the shapefile extent [833ms]\n\n\n\n\n\nℹ Computing vegetation indexes...\n\n\n✔ Computing vegetation indexes [2s]\n\n\n\n\n\n── Analyzing block 1 ──\n\n\n\n\n\nℹ Segmenting individuals within plots...\n\n\n✔ Segmenting individuals within plots [2.3s]\n\n\n\n\n\nℹ Extracting features from segmented individuals...\n\n\n✔ Extracting features from segmented individuals [258ms]\n\n\n\n\n\nℹ Extracting plot-level features...\n\n\n✔ Extracting plot-level features [201ms]\n\n\n\n\n\nℹ Binding the extracted features...\n\n\n── Analyzing block 2 ──\n\n\nℹ Binding the extracted features...\nℹ Binding the extracted features...\n✔ Binding the extracted features [294ms]\n\nℹ Segmenting individuals within plots...\n✔ Segmenting individuals within plots [1.8s]\n\nℹ Extracting features from segmented individuals...\n✔ Extracting features from segmented individuals [353ms]\n\nℹ Extracting plot-level features...\n✔ Extracting plot-level features [276ms]\n\nℹ Binding the extracted features...\n── Analyzing block 3 ──\nℹ Binding the extracted features...\nℹ Binding the extracted features...\n✔ Binding the extracted features [419ms]\n\nℹ Segmenting individuals within plots...\n✔ Segmenting individuals within plots [2.3s]\n\nℹ Extracting features from segmented individuals...\n✔ Extracting features from segmented individuals [266ms]\n\nℹ Extracting plot-level features...\n✔ Extracting plot-level features [192ms]\n\nℹ Binding the extracted features...\n── Analyzing block 4 ──\nℹ Binding the extracted features...\nℹ Binding the extracted features...\n✔ Binding the extracted features [317ms]\n\nℹ Segmenting individuals within plots...\n✔ Segmenting individuals within plots [1.8s]\n\nℹ Extracting features from segmented individuals...\n✔ Extracting features from segmented individuals [266ms]\n\nℹ Extracting plot-level features...\n✔ Extracting plot-level features [208ms]\n\nℹ Binding the extracted features...\n✔ Binding the extracted features [121ms]\n\nℹ Summarizing the results...\n── Mosaic successfully analyzed ─────────── Finished on 2025-09-03 | 10:27:20 ──\nℹ Summarizing the results...\n✔ Summarizing the results [1.2s]\n\nbm + shapefile_view(an$result_indiv,\n                    attribute = \"diam_mean\")\n\n\n\n\n\nBelow, you can see the results at the individual plant level. Each plant within a plot is identified, segmented, and color-coded based on its measured characteristics (e.g., mean vegetation indices). While you can use the attribute argument in mosaic_analyze() to control these visualizations, there’s no need to worry—new plots can easily be generated after the results are computed, giving you full flexibility in how the data is displayed.\nFor each plot, detailed summary statistics are also returned, allowing for in-depth analysis of plant performance across the entire experiment.\n\nan$map_indiv\n\n\n\n\n\nWe can gain deeper insights by utilizing the results generated from mosaic_analyze(). Below, the data is grouped by the different levels of the inoculante factor to explore how it influences the analysis.\n\n# see the results averaged by the combination of inoculante and p factors\nlibrary(dplyr)\n\n\nAnexando pacote: 'dplyr'\n\n\nO seguinte objeto é mascarado por 'package:pliman':\n\n    %&gt;%\n\n\nOs seguintes objetos são mascarados por 'package:stats':\n\n    filter, lag\n\n\nOs seguintes objetos são mascarados por 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(emmeans)\n\nWelcome to emmeans.\nCaution: You lose important information if you filter this package's results.\nSee '? untidy'\n\nlibrary(ggplot2)\ndfino &lt;- \n  an$result_plot_summ |&gt; \n  group_by(plot_id, inoculante, p) |&gt; \n  summarise(across(where(is.numeric), mean))\n\n`summarise()` has grouped output by 'plot_id', 'inoculante'. You can override\nusing the `.groups` argument.\n\n# inoculante levels\nbm + shapefile_view(dfino, attribute = \"inoculante\", color_regions = ggplot_color(6))\n\n\n\n\n# phospurus level\nbm + shapefile_view(dfino, attribute = \"p\", color_regions = ggplot_color(3))\n\n\n\n\n# Analysis of variance\ndfanova &lt;- \n  an$result_plot_summ |&gt; \n  mutate(across(c(p, column, inoculante), as.factor))\n\nmod &lt;- aov(diam_mean ~ inoculante * p + column, data = dfanova)\nanova(mod)\n\nAnalysis of Variance Table\n\nResponse: diam_mean\n             Df   Sum Sq   Mean Sq  F value    Pr(&gt;F)    \ninoculante    5 0.001806 0.0003612   4.0183 0.0037715 ** \np             2 0.055823 0.0279113 310.4862 &lt; 2.2e-16 ***\ncolumn        3 0.001750 0.0005832   6.4875 0.0008372 ***\ninoculante:p 10 0.001330 0.0001330   1.4799 0.1742390    \nResiduals    51 0.004585 0.0000899                       \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nemm_ino &lt;- emmeans(mod, ~ inoculante)\n\nNOTE: Results may be misleading due to involvement in interactions\n\nemm_p &lt;- emmeans(mod, ~ p)\n\nNOTE: Results may be misleading due to involvement in interactions\n\npin &lt;- \n  plot(emm_ino, comparisons = TRUE, CIs = FALSE) +\n  xlim(0.15, 0.23) +\n  labs(x = \"Mean diameter (cm)\", y = \"Inoculante\")\n\npp &lt;- \n  plot(emm_p, comparisons = TRUE, CIs = FALSE) +\n  xlim(0.15, 0.23) +\n  labs(x = \"Mean diameter (cm)\", y = \"Phosphorus level (%)\")\n\nlibrary(patchwork)\npin/ pp\n\n\n\n\n\n\n\n\nIn this example, we use an RGB orthomosaic from a potato field to analyze and segment individual plants within the plots. The analysis involves loading the mosaic and corresponding shapefile, cropping the mosaic to the area defined by the shapefile, and then segmenting individual plants using a custom vegetation index. When map_individuals = TRUE is used, important metrics such as the average distance between plants and the coefficient of variation for each cropping row are also computed.\n\n# Load orthomosaic and shapefile\nmos &lt;-    mosaic_input(\"potato/potato.tif\")\nshp &lt;- shapefile_input(\"potato/potato_shp.rds\")\n\nbm &lt;- mosaic_view(mos, max_pixels = 6e6)\nbm + shapefile_view(shp)\n\nres &lt;-\n  mosaic_analyze(\n    mosaic = mos,\n    basemap = bm,\n    shapefile = shp,\n    plot_index = \"GLI\",\n    segment_individuals = TRUE,\n    map_individuals = TRUE,\n    map_direction = \"horizontal\",    # default\n    attribute = \"cv\"\n  )\n\npal &lt;- c( \"#fde725\", \"#5ec962\", \"#21918c\", \"#3b528b\", \"#440154\")\np1 &lt;- shapefile_view(res$result_plot_summ,\n                     attribute = \"cv\",\n                     color_regions = pal)\np2 &lt;- shapefile_view(res$result_indiv,\n                     type = \"centroid\",\n                     attribute = \"area\")\n\n(bm + p1) | p2\n\nThe interactive map above shows the segmented potato plants within each row. Note that some plots were not rendered due to the absence of identified plants. It is important to highlight the structure of the res object:\n\nnames(res)\n\nWhen map_individuals = TRUE is used, the result_individ_map object contains the distances between each plant within the plots. By default, the mapping occurs in the horizontal direction.\n\nres[[\"result_individ_map\"]][[\"distances\"]][[\"B01_P0001\"]]\n\nThe objects means and cvs hold the average distances and coefficients of variation, respectively.\n\nShow me the codelibrary(patchwork)\npmean &lt;-\n  ggplot(res$result_plot_summ, aes(x = mean_distance)) +\n  geom_histogram() +\n  labs(x = \"Average distance between plants\",\n       y = \"Number of plots\")\n\npcv &lt;-\n  ggplot(res$result_plot_summ, aes(x = cv)) +\n  geom_histogram(bins = 10) +\n  labs(x = \"Coefficient of variation (%)\",\n       y = \"Number of plots\")\n\npmean + pcv\n\n\nBelow, we’ll explore two contrasting plots to demonstrate how this information can be valuable for assessing plot uniformity.\n\nlibrary(dplyr)\npar(mfrow = c(2, 1))\np1 &lt;- \n  res$result_indiv |&gt; \n  filter(plot_id == \"P0184\")\n\n\n# plot \np1plot &lt;- \n  res$result_plot_summ |&gt; \n  filter(plot_id == \"P0184\")\n\n\nplot1 &lt;- mosaic_crop(mos, shapefile = p1plot, buffer = 0.2)\ncoords &lt;- p1[, c(\"x\", \"y\")] |&gt; sf::st_drop_geometry() |&gt; arrange(x)\nmosaic_plot_rgb(plot1, main = \"P0184: Average distance: 0.243 m; CV: 14.1%\")\nlines(coords, lwd = 2)\nshapefile_plot(p1plot, add = TRUE, border = \"blue\", lwd = 3)\npoints(p1$x, p1$y, pch = 16,  cex = 2, col = \"red\")\n\n\n\np2 &lt;- \n  res$result_indiv |&gt; \n  filter(plot_id == \"P0204\")\np2plot &lt;- \n  res$result_plot_summ |&gt; \n  filter(plot_id == \"P0204\")\n\nplot2 &lt;- mosaic_crop(mos, shapefile = p2plot, buffer = 0.2)\ncoords2 &lt;- p2[, c(\"x\", \"y\")] |&gt; sf::st_drop_geometry() |&gt; arrange(x)\nmosaic_plot_rgb(plot2, main = \"P0204: Average distance: 0.325 m; CV: 64.0%\")\nlines(coords2, lwd = 2)\nshapefile_plot(p2plot, add = TRUE, border = \"blue\", lwd = 3)\npoints(p2$x, p2$y, pch = 16,  cex = 2, col = \"red\")\n\n\nA Canopy Height Model (CHM) represents the height of vegetation or structures above the ground surface, making it a crucial tool for analyzing vegetation structure and biomass. It is derived by subtracting a Digital Terrain Model (DTM), which shows the bare earth surface, from a Digital Surface Model (DSM), which captures the elevation of all surface objects,like plants. By comparing these two models, the CHM provides detailed insights into the height of vegetation, enabling accurate assessments of canopy cover and plant growth in agricultural or forested landscapes.\n\n\n# Load DSM, DTM, mask and shapefile\ndsm &lt;- mosaic_input(\"dsm/dsm.tif\")\n\nclass       : SpatRaster \nsize        : 2770, 2834, 1  (nrow, ncol, nlyr)\nresolution  : 0.0216565, 0.0216565  (x, y)\nextent      : 734181.2, 734242.5, 4488971, 4489031  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : dsm.tif \nname        :      dsm \nmin value   : 302.4178 \nmax value   : 304.7521 \n\ndtm &lt;- mosaic_input(\"dsm/dtm.tif\")\n\nclass       : SpatRaster \nsize        : 2770, 2834, 1  (nrow, ncol, nlyr)\nresolution  : 0.0216565, 0.0216565  (x, y)\nextent      : 734181.2, 734242.5, 4488971, 4489031  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : dtm.tif \nname        :      dtm \nmin value   : 302.3617 \nmax value   : 303.6896 \n\nmsk &lt;- mosaic_input(\"dsm/mask.tif\")\n\nclass       : SpatRaster \nsize        : 6026, 5669, 1  (nrow, ncol, nlyr)\nresolution  : 0.0108282, 0.0108282  (x, y)\nextent      : 734181.2, 734242.6, 4488971, 4489036  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : mask.tif \nname        : GLI \nmin value   :   0 \nmax value   :   1 \n\northo &lt;- mosaic_input(\"dsm/ortho.tif\")\n\nclass       : SpatRaster \nsize        : 6026, 5669, 3  (nrow, ncol, nlyr)\nresolution  : 0.0108282, 0.0108282  (x, y)\nextent      : 734181.2, 734242.6, 4488971, 4489036  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : ortho.tif \ncolors RGB  : 1, 2, 3 \nnames       : ortho_1, ortho_2, ortho_3 \n\nshp &lt;- shapefile_input(\"dsm/shape.rds\")\n\nSimple feature collection with 728 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 734184.7 ymin: 4488985 xmax: 734238.9 ymax: 4489026\nProjected CRS: WGS 72BE / UTM zone 14N\nFirst 10 features:\n   unique_id block plot_id row column                       geometry\n1          1   B01   P0001   1      1 POLYGON ((734184.7 4489024,...\n2          2   B01   P0028   2      1 POLYGON ((734184.7 4489023,...\n3          3   B01   P0029   3      1 POLYGON ((734184.8 4489023,...\n4          4   B01   P0056   4      1 POLYGON ((734184.8 4489022,...\n5          5   B01   P0057   5      1 POLYGON ((734184.8 4489021,...\n6          6   B01   P0084   6      1 POLYGON ((734184.8 4489020,...\n7          7   B01   P0085   7      1 POLYGON ((734184.9 4489020,...\n8          8   B01   P0112   8      1 POLYGON ((734184.9 4489019,...\n9          9   B01   P0113   9      1 POLYGON ((734184.9 4489018,...\n10        10   B01   P0140  10      1 POLYGON ((734184.9 4489017,...\n\n# Visualize the DSM and DTM side by side. \n# The argument nc = 1 means that the plots will be displayed in a single column.\nmosaic_plot(c(dsm, dtm))\n\n\n\n\n\n\n# Compute the Canopy Height Model (CHM) by subtracting the DTM from the DSM.\n# The `mask` parameter specifies the regions to be used, and `mask_soil = FALSE` \n# means that areas identified by the mask are considered non-soil (i.e., representing the plants).\nres &lt;- mosaic_chm(dsm = dsm,\n                  dtm = dtm,\n                  mask = msk,\n                  mask_soil = FALSE)  \n\n── Canopy Height-Model generation ─────────────────── \"2025-09-03 | 10:27:34\" ──\n\n\nℹ Building the canopy height model...\n\n\n✔ Building the canopy height model [2.5s]\n\n\n\n\n# Extract canopy height values from the CHM using the provided shapefile.\n# This will associate the height values with the polygons in the shapefile.\nchmvals &lt;- mosaic_chm_extract(res, shp)\n\n# Visualize the DSM with a custom color palette to represent different elevation levels.\npal &lt;- custom_palette(c(\"#8B4513\", \"#B2DF8A\", \"forestgreen\"), n = 10)\nbm &lt;- mosaic_view(dsm, color_regions = pal)\n\nℹ Using `downsample = 3` to match the max_pixels constraint.\n\n# Overlay the shapefile on top of the DSM visualization, using the \"coverage\" attribute \n# from the shapefile to define the regions of interest.\nbm + shapefile_view(chmvals, attribute = \"q95\")\n\n\n\n\n\n\nIn field experiments, the Digital Terrain Model (DTM) is frequently obtained before sowing and represents the bare soil. But, if we could derivate DTM from DSM? If a DTM is not provided, mosaic_chm() will derive DTM from DSM using an interpolation strategy.\n\nres2 &lt;- mosaic_chm(\n  dsm,\n  mask = msk,\n  window_size = c(4, 4),\n  mask_soil = FALSE\n)\n\n── Canopy Height-Model generation ─────────────────── \"2025-09-03 | 10:27:49\" ──\n\n\nℹ Extracting ground points for each moving window...\n\n\n✔ Extracting ground points for each moving window [2.4s]\n\n\n\n\n\nℹ Interpolating ground points...\n\n\n✔ Interpolating ground points [4.6s]\n\n\n\n\n\nℹ Resampling and masking the interpolated raster...\n\n\n✔ Resampling and masking the interpolated raster [1.5s]\n\n\n\n\n\nℹ Building the canopy height model...\n\n\n✔ Building the canopy height model [2.1s]\n\n\n\n\n# Extract CHM values\nchmvals2 &lt;- mosaic_chm_extract(res2, shp) \n\n# Quantile 95\nbm + shapefile_view(chmvals2, attribute = \"q95\")\n\n\n\n\n# Entropy\nbm + shapefile_view(chmvals2, attribute = \"entropy\")\n\n\n\n\n# a closer look\nzoom1 &lt;- shp |&gt; filter(plot_id == \"P0267\") |&gt; sf::st_buffer(3)\nzoom2 &lt;- shp |&gt; filter(plot_id == \"P0174\") |&gt; sf::st_buffer(3)\nc1 &lt;- mosaic_crop(ortho, shapefile = zoom1)\nc2 &lt;- mosaic_crop(ortho, shapefile = zoom2)\n\npar(mfrow = c(1, 2))\nmosaic_plot_rgb(c1)\nmosaic_plot_rgb(c2)\n\n\n\n\n\n\npar(mfrow = c(1, 1))\n\n\n\nlibrary(pliman)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.3.0\n✔ purrr     1.1.0     ✔ tidyr     1.3.1\n✔ readr     2.1.5     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ forcats::%&gt;%()               masks stringr::%&gt;%(), purrr::%&gt;%(), tidyr::%&gt;%(), tibble::%&gt;%(), dplyr::%&gt;%(), pliman::%&gt;%()\n✖ tibble::column_to_rownames() masks pliman::column_to_rownames()\n✖ dplyr::filter()              masks stats::filter()\n✖ dplyr::lag()                 masks stats::lag()\n✖ tibble::remove_rownames()    masks pliman::remove_rownames()\n✖ tibble::rownames_to_column() masks pliman::rownames_to_column()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmosaic &lt;- mosaic_input(\"maturity/cropped_09-17-2024.tif\")\n\nclass       : SpatRaster \nsize        : 1435, 10627, 3  (nrow, ncol, nlyr)\nresolution  : 0.03520265, 0.03521962  (x, y)\nextent      : 532444.6, 532818.7, 4575464, 4575514  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 14N (EPSG:32614) \nsource      : cropped_09-17-2024.tif \ncolors RGB  : 1, 2, 3 \nnames       : tmp_aggregate_small_1, tmp_aggregate_small_2, tmp_aggregate_small_3 \nmin values  :                     1,                     1,                     1 \nmax values  :                   254,                   254,                   235 \n\nshapefile &lt;- shapefile_input(\"maturity/shape_mat.rds\")\n\nSimple feature collection with 576 features and 11 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 532449.6 ymin: 4575469 xmax: 532813.7 ymax: 4575509\nProjected CRS: WGS 84 / UTM zone 14N\nFirst 10 features:\n   unique_id block plot_id column row column_field row_field Maturity Date\n1       1345   B02   P0001      1   1            3        19            32\n2       1346   B02   P0007      2   1            4        19            22\n3       1347   B02   P0013      3   1            5        19            27\n4       1348   B02   P0019      4   1            6        19            27\n5       1349   B02   P0025      5   1            7        19            28\n6       1350   B02   P0031      6   1            8        19            27\n7       1351   B02   P0037      7   1            9        19            32\n8       1352   B02   P0043      8   1           10        19            33\n9       1353   B02   P0049      9   1           11        19            30\n10      1354   B02   P0055     10   1           12        19            31\n   Planting Date Baseline Maturity maturity_ground\n1     2024-05-28        2024-08-31             127\n2     2024-05-28        2024-08-31             117\n3     2024-05-28        2024-08-31             122\n4     2024-05-28        2024-08-31             122\n5     2024-05-28        2024-08-31             123\n6     2024-05-28        2024-08-31             122\n7     2024-05-28        2024-08-31             127\n8     2024-05-28        2024-08-31             128\n9     2024-05-28        2024-08-31             125\n10    2024-05-28        2024-08-31             126\n                         geometry\n1  POLYGON ((532449.6 4575484,...\n2  POLYGON ((532453.5 4575484,...\n3  POLYGON ((532457.3 4575484,...\n4  POLYGON ((532461.1 4575485,...\n5  POLYGON ((532464.9 4575485,...\n6  POLYGON ((532468.7 4575485,...\n7  POLYGON ((532472.5 4575485,...\n8  POLYGON ((532476.3 4575486,...\n9  POLYGON ((532480.1 4575486,...\n10 POLYGON ((532483.9 4575486,...\n\nngrdi &lt;-\n  rio::import(\"maturity/time_series_maturity_vndvi5.xlsx\", setclass = \"tbl\") |&gt;\n  select(block, plot_id, maturity) |&gt;\n  rename(mat_vndvi = maturity)\n\n\nmat &lt;-\n  left_join(shapefile, ngrdi) |&gt;\n  mutate(mat_vndvi = mat_vndvi,\n         diff = (mat_vndvi) - maturity_ground) |&gt;\n  mutate(diff_class = case_when(\n    between(abs(diff), 0, 3) ~ \"0 a 3\",\n    between(abs(diff), 3, 6) ~ \"3 a 6\",\n    between(abs(diff), 6, 9) ~ \"6 a 9\",\n    FALSE ~ \"&gt; 9\"\n  )) |&gt;\n  drop_na()\n\nJoining with `by = join_by(block, plot_id)`\n\ndfccc &lt;-\n  mat |&gt;\n  sf::st_drop_geometry() |&gt;\n  as.data.frame() |&gt;\n  ccc(maturity_ground, mat_vndvi) |&gt;\n  mutate(rho = paste0(\"rho[c]:~\", round(ccc, 4)),\n         rmse = paste0(\"RMSE:~\", round(rmse, 4)),\n         r = paste0(\"r:~~~\", round(r, 4)))\n\n\nmatplot &lt;- \n  mat |&gt;\n  ggplot(aes(maturity_ground, mat_vndvi)) +\n  geom_point(size = 3, alpha = 0.7, aes( color = diff_class)) +\n  scale_y_continuous(limits = c(110, 135)) +\n  scale_x_continuous(limits = c(110, 135)) +\n  geom_abline(intercept = 0, slope = 1) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Dias para maturação (observado)\",\n       y = \"Dias para maturação (predito)\") +\n  coord_equal() +\n  theme_minimal(base_size = 20) +\n  geom_text(aes(label=rho),\n            x = 112,\n            y = 135,\n            hjust = 0,\n            size = 4,\n            data = dfccc[1, ],\n            parse = TRUE) +\n  geom_text(aes(label=rmse),\n            x = 112,\n            y = 134,\n            hjust = 0,\n            size = 4,\n            data = dfccc[1, ],\n            parse = TRUE) +\n  geom_text(aes(label=r),\n            x = 112,\n            y = 133,\n            hjust = 0,\n            size = 4,\n            data = dfccc[1, ],\n            parse = TRUE)\n\nmaterr &lt;-\n  mat |&gt;\n  sf::st_drop_geometry() |&gt;\n  as.data.frame() |&gt;\n  group_by(diff_class) |&gt;\n  summarise(n = n())\n\nmaterrp &lt;- \nggplot(materr, aes(\"A\", n, fill = diff_class)) +\n  geom_col() +\n  geom_text(aes(label = n), position = \"stack\",\n            vjust = 1) +\n  theme_minimal(base_size = 14) +\n  theme(axis.text.x = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.x = element_blank()) +\n  labs(y = \"Número de parcelas experimentais\",\n       title = \"Proporção do erro de predição\",\n       fill = \"abs(dias)\")\n\nmatplot + materrp +\n  plot_layout(widths = c(0.8, 0.2))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n# criar shape\n\nbm &lt;- mosaic_view(mosaic,\n                  r = 1, g = 2, b = 3,\n                  max_pixels = 5e6)\n\nℹ The number of pixels is very high, which might slow the rendering process.\nℹ Using `downsample = 2` to match the max_pixels constraint.\n\nbm + shapefile_view(mat |&gt; sf::st_buffer(0.22), attribute = \"mat_vndvi\")\n\n\n\n\n\n\nThe plimanshiny package provides a user-friendly interface for analyzing time series data. The package allows users to import, visualize, and analyze time series data, such as satellite images, drone images, and other remote sensing data.\n\ninstall.packages(\"pak\")\npak::pkg_install(\"NEPEM-UFSC/pliman\")\npak::pkg_install(\"NEPEM-UFSC/plimanshiny\")\n\n# Open the app\nlibrary(plimanshiny)\nrun_app()",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "02_dia2.html#orthomosaics",
    "href": "02_dia2.html#orthomosaics",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "Orthomosaic (SpatRasters) objects can be imported and exported using the functions provided by the package. First, an orthomosaic image is imported as a SpatRaster object using the mosaic_input() function. The image can then be visualized in RGB format using the mosaic_plot_rgb() function. For interactive mapping, the mosaic_view() function can be used, specifying the RGB bands (e.g., R = 3, G = 2, B = 1) to adjust the display of the map. Additionally, the orthomosaic can be exported to a file using the mosaic_export() function.\n\nlibrary(pliman)\n\n╭ Welcome to pliman version \"3.1.1\"! ──────────────────────────────╮\n│                                                                  │\n│   Developed collaboratively by NEPEM &lt;https://nepemufsc.com&gt;     │\n│   Group lead: Prof. Tiago Olivoto                                │\n│   For citation, type `citation('pliman')`                        │\n│   We welcome your feedback and suggestions!                      │\n│                                                                  │\n╰────────────── Simplifying high-throughput plant phenotyping in R ╯\n\n# Import an orthomosaic image as a SpatRaster object\nmosaic &lt;- mosaic_input(\"wheat/wheat_ndsu.tif\")\n\nclass       : SpatRaster \nsize        : 3120, 768, 5  (nrow, ncol, nlyr)\nresolution  : 0.02771201, 0.02771201  (x, y)\nextent      : 755755.9, 755777.2, 5176788, 5176875  (xmin, xmax, ymin, ymax)\ncoord. ref. : +proj=aeqd +lat_0=90 +lon_0=1.35 +x_0=0 +y_0=0 +ellps=sphere +units=m +no_defs \nsource      : wheat_ndsu.tif \nnames       : ndsu_1, ndsu_2, ndsu_3, ndsu_4, ndsu_5 \nmin values  :    299,    548,    513,    574,   2387 \nmax values  :  13511,  13468,   9192,  20950,  48265 \n\nmosaic_plot_rgb(mosaic, stretch = \"lin\")\n\n\n\n\n\n\n# Create an interactive map using the RGB bands (R = 3, G = 2, B = 1)\nbm &lt;- mosaic_view(mosaic, \n                  quantiles = c(0, .97),\n                  max_pixels = 4e6,\n                  r = 3, # Red channel\n                  g = 2, # Green channel\n                  b = 1) # Blue channel\n\nℹ The number of pixels is very high, which might slow the rendering process.\n\n\nWarning in CPL_crs_from_input(x): GDAL Message 1: +init=epsg:XXXX syntax is\ndeprecated. It might return a CRS with a non-EPSG compliant axis order. Further\nmessages of this type will be suppressed.\n\nbm\n\n\n\n\n# Export the mosaic to a file (uncomment the line below to run)\n# mosaic_export(mosaic, \"my_mosaic.tif\")",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "02_dia2.html#shapefile",
    "href": "02_dia2.html#shapefile",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "To create a shapefile grid over the mosaic, the shapefile_build() function is used, specifying the number of rows and columns for the grid. This allows for the segmentation of the mosaic into plots that can be individually analyzed.\n\n# Create a shapefile grid over the mosaic with specified rows and columns\nshp &lt;- shapefile_build(mosaic,\n                       basemap = bm,\n                       layout = \"btlr\",\n                       plot_width = 1.2,\n                       plot_height = 2,\n                       ncol = 11, # Number of columns\n                       nrow = 20) # Number of rows\n\nbm + shapefile_view(shp, attribute = \"plot_id\")\n\n# see the size of plots\nshapefile_measures(shp)\nshapefile_export(shp, \"myfirsshape.shp\")\n\n\nShapefiles can be imported using the shapefile_input() function, which reads shapefile objects from a file. After importing the shapefile, the mosaic can be plotted in RGB using mosaic_plot_rgb(), and the shapefile can be overlaid on the mosaic using the shapefile_plot() function, which allows customization of the line width and other graphical parameters.\n\n# Import a shapefile object from a file\nshp &lt;- shapefile_input(\"wheat/wheat_ndsu_shp.rds\")\n\nSimple feature collection with 220 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 755757.8 ymin: 5176793 xmax: 755775.2 ymax: 5176870\nProjected CRS: PROJCRS[\"unknown\",\n    BASEGEOGCRS[\"unknown\",\n        DATUM[\"Unknown based on Normal Sphere (r=6370997) ellipsoid\",\n            ELLIPSOID[\"Normal Sphere (r=6370997)\",6370997,0,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]]],\n    CONVERSION[\"Modified Azimuthal Equidistant\",\n        METHOD[\"Modified Azimuthal Equidistant\",\n            ID[\"EPSG\",9832]],\n        PARAMETER[\"Latitude of natural origin\",90,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",1.35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"northing\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\nFirst 10 features:\n   unique_id block plot_id row column                       geometry\n1          1   B01   P0001   1      1 POLYGON ((755775.2 5176793,...\n2          2   B01   P0022   2      1 POLYGON ((755775.2 5176797,...\n3          3   B01   P0023   3      1 POLYGON ((755775.2 5176801,...\n4          4   B01   P0044   4      1 POLYGON ((755775.2 5176805,...\n5          5   B01   P0045   5      1 POLYGON ((755775.2 5176809,...\n6          6   B01   P0066   6      1 POLYGON ((755775.2 5176813,...\n7          7   B01   P0067   7      1 POLYGON ((755775.2 5176817,...\n8          8   B01   P0088   8      1 POLYGON ((755775.2 5176821,...\n9          9   B01   P0089   9      1 POLYGON ((755775.2 5176824,...\n10        10   B01   P0110  10      1 POLYGON ((755775.2 5176828,...\n\n# Plot the mosaic in RGB\nmosaic_plot_rgb(mosaic, stretch = \"lin\")\n\n# Overlay the imported shapefile on the mosaic with customized line width\nshapefile_plot(shp, add = TRUE, lwd = 2, col = \"red\")\n\n\n\n\n\n\nbm + shapefile_view(shp, attribute = \"plot_id\")",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "02_dia2.html#vegetation-indexes",
    "href": "02_dia2.html#vegetation-indexes",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "A variety of vegetation indexes are available in pliman, as detailed on Tiago Olivoto’s website. These indexes can be computed using the mosaic_index() function. By specifying the RGB channels of the mosaic (e.g., R = 1, G = 2, B = 3) and selecting the desired indexes (e.g., “NGRDI” and “GLI”), the function calculates the indexes, which can be used for further analysis.\n\n# Calculate vegetation indexes (e.g., NGRDI and GLI) using the mosaic's RGB channels\nind &lt;- mosaic_index(mosaic, \n                    b = 1, # Blue channel\n                    g = 2, # Green channel\n                    r = 3, # Red channel\n                    re = 4, # Red Edge channel\n                    nir = 5, # Near-Infrared channel\n                    index = c(\"NDVI\", \"NDRE\", \"(NIR-R) / (NIR+R)\")) # List of vegetation indexes to compute\n\n── Computing rasters for 3 indices ──────────────────── Started at \"10:26:32\" ──\n\n\nWarning: Index \"(NIR-R) / (NIR+R)\" not available. Trying to compute your own\nindex.\n\n\n── 3 vegetation indices computed ─────────── Ended at \"2025-09-03 | 10:26:34\" ──\n\n\n\n\n\n\n\nmosaic_plot(ind[[1]])\n\n\n\n\n\n\nmosaic_hist(ind[[1]])\n\nWarning: [hist] a sample of 42% of the cells was used\n\n\n\n\n\n\n\n# segment a mosaic\nsegmented &lt;- \n  mosaic_segment(mosaic, \n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 index = \"NDVI\")\n\nmosaic_plot_rgb(segmented, stretch = \"lin\")\n\n\n\n\n\n\n# segment a mosaic and return a mask\nsegmented &lt;- \n  mosaic_segment(mosaic, \n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 index = \"NDVI\",\n                 invert = TRUE,\n                 return = \"mask\")\nmosaic_plot(segmented)\n\n\n\n\n\n\n# extract values for each plot\nindexes &lt;- mosaic_extract(ind, shp)\n\nWarning in .local(x, y, ...): Polygons transformed to raster CRS (EPSG:NA)\n\n\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n  |                                                                            \n  |=                                                                     |   2%\n  |                                                                            \n  |==                                                                    |   2%\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |===                                                                   |   4%\n  |                                                                            \n  |===                                                                   |   5%\n  |                                                                            \n  |====                                                                  |   5%\n  |                                                                            \n  |====                                                                  |   6%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |=====                                                                 |   8%\n  |                                                                            \n  |======                                                                |   8%\n  |                                                                            \n  |======                                                                |   9%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |========                                                              |  12%\n  |                                                                            \n  |=========                                                             |  12%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  14%\n  |                                                                            \n  |==========                                                            |  15%\n  |                                                                            \n  |===========                                                           |  15%\n  |                                                                            \n  |===========                                                           |  16%\n  |                                                                            \n  |============                                                          |  17%\n  |                                                                            \n  |============                                                          |  18%\n  |                                                                            \n  |=============                                                         |  18%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==============                                                        |  20%\n  |                                                                            \n  |===============                                                       |  21%\n  |                                                                            \n  |===============                                                       |  22%\n  |                                                                            \n  |================                                                      |  22%\n  |                                                                            \n  |================                                                      |  23%\n  |                                                                            \n  |=================                                                     |  24%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |==================                                                    |  25%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |===================                                                   |  27%\n  |                                                                            \n  |===================                                                   |  28%\n  |                                                                            \n  |====================                                                  |  28%\n  |                                                                            \n  |====================                                                  |  29%\n  |                                                                            \n  |=====================                                                 |  30%\n  |                                                                            \n  |======================                                                |  31%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=======================                                               |  32%\n  |                                                                            \n  |=======================                                               |  33%\n  |                                                                            \n  |========================                                              |  34%\n  |                                                                            \n  |========================                                              |  35%\n  |                                                                            \n  |=========================                                             |  35%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |==========================                                            |  37%\n  |                                                                            \n  |==========================                                            |  38%\n  |                                                                            \n  |===========================                                           |  38%\n  |                                                                            \n  |===========================                                           |  39%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |=============================                                         |  41%\n  |                                                                            \n  |=============================                                         |  42%\n  |                                                                            \n  |==============================                                        |  42%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |===============================                                       |  44%\n  |                                                                            \n  |===============================                                       |  45%\n  |                                                                            \n  |================================                                      |  45%\n  |                                                                            \n  |================================                                      |  46%\n  |                                                                            \n  |=================================                                     |  47%\n  |                                                                            \n  |=================================                                     |  48%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |==================================                                    |  49%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |====================================                                  |  52%\n  |                                                                            \n  |=====================================                                 |  52%\n  |                                                                            \n  |=====================================                                 |  53%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |======================================                                |  55%\n  |                                                                            \n  |=======================================                               |  55%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |========================================                              |  57%\n  |                                                                            \n  |========================================                              |  58%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |=========================================                             |  59%\n  |                                                                            \n  |==========================================                            |  60%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |===========================================                           |  62%\n  |                                                                            \n  |============================================                          |  62%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |=============================================                         |  65%\n  |                                                                            \n  |==============================================                        |  65%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |===============================================                       |  67%\n  |                                                                            \n  |===============================================                       |  68%\n  |                                                                            \n  |================================================                      |  68%\n  |                                                                            \n  |================================================                      |  69%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |==================================================                    |  72%\n  |                                                                            \n  |===================================================                   |  72%\n  |                                                                            \n  |===================================================                   |  73%\n  |                                                                            \n  |====================================================                  |  74%\n  |                                                                            \n  |====================================================                  |  75%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |=====================================================                 |  76%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |======================================================                |  78%\n  |                                                                            \n  |=======================================================               |  78%\n  |                                                                            \n  |=======================================================               |  79%\n  |                                                                            \n  |========================================================              |  80%\n  |                                                                            \n  |=========================================================             |  81%\n  |                                                                            \n  |=========================================================             |  82%\n  |                                                                            \n  |==========================================================            |  82%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |===========================================================           |  84%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |============================================================          |  85%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |=============================================================         |  87%\n  |                                                                            \n  |=============================================================         |  88%\n  |                                                                            \n  |==============================================================        |  88%\n  |                                                                            \n  |==============================================================        |  89%\n  |                                                                            \n  |===============================================================       |  90%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |================================================================      |  92%\n  |                                                                            \n  |=================================================================     |  92%\n  |                                                                            \n  |=================================================================     |  93%\n  |                                                                            \n  |==================================================================    |  94%\n  |                                                                            \n  |==================================================================    |  95%\n  |                                                                            \n  |===================================================================   |  95%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |====================================================================  |  98%\n  |                                                                            \n  |===================================================================== |  98%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%\n\nindexes\n\nSimple feature collection with 220 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 755757.8 ymin: 5176793 xmax: 755775.2 ymax: 5176870\nProjected CRS: PROJCRS[\"unknown\",\n    BASEGEOGCRS[\"unknown\",\n        DATUM[\"Unknown based on Normal Sphere (r=6370997) ellipsoid\",\n            ELLIPSOID[\"Normal Sphere (r=6370997)\",6370997,0,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]]],\n    CONVERSION[\"Modified Azimuthal Equidistant\",\n        METHOD[\"Modified Azimuthal Equidistant\",\n            ID[\"EPSG\",9832]],\n        PARAMETER[\"Latitude of natural origin\",90,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",1.35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"northing\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\nFirst 10 features:\n   unique_id block plot_id row column median.NDVI median.NDRE\n1          1   B01   P0001   1      1   0.9063697   0.6897340\n2          2   B01   P0022   2      1   0.8729471   0.6278511\n3          3   B01   P0023   3      1   0.8523978   0.5689529\n4          4   B01   P0044   4      1   0.8694811   0.5859919\n5          5   B01   P0045   5      1   0.8880474   0.6595912\n6          6   B01   P0066   6      1   0.9029454   0.6866557\n7          7   B01   P0067   7      1   0.8824696   0.6411043\n8          8   B01   P0088   8      1   0.9076901   0.6771331\n9          9   B01   P0089   9      1   0.9114776   0.6916510\n10        10   B01   P0110  10      1   0.9060094   0.6885610\n   median.(NIR-R) / (NIR+R)                       geometry\n1                 0.9063697 POLYGON ((755775.2 5176793,...\n2                 0.8729471 POLYGON ((755775.2 5176797,...\n3                 0.8523978 POLYGON ((755775.2 5176801,...\n4                 0.8694811 POLYGON ((755775.2 5176805,...\n5                 0.8880474 POLYGON ((755775.2 5176809,...\n6                 0.9029454 POLYGON ((755775.2 5176813,...\n7                 0.8824696 POLYGON ((755775.2 5176817,...\n8                 0.9076901 POLYGON ((755775.2 5176821,...\n9                 0.9114776 POLYGON ((755775.2 5176824,...\n10                0.9060094 POLYGON ((755775.2 5176828,...",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "02_dia2.html#the-mosaic_analyze-function",
    "href": "02_dia2.html#the-mosaic_analyze-function",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "mosaic_analyze() is the cornerstone function in pliman for high-throughput phenotyping. It enables users to efficiently process orthomosaics and extract a wealth of data from satellite or drone imagery with just a few lines of code. In most cases, all you need is an orthomosaic (or even a .jpg image from a cellphone) and the right function parameters to unlock its full potential.\n\n# Analyze the mosaic using the defined shapefile and vegetation indexes\nres &lt;- \n  mosaic_analyze(mosaic,\n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 basemap = bm,                      # Basemap for visualization\n                 shapefile = shp,                   # Shapefile with plots\n                 plot_index = c(\"NDVI\", \"NDRE\"),    # Vegetation indexes to compute\n                 summarize_fun = c(\"median\", \"mean\", \"min\", \"max\"), # Summary statistics for each plot\n                 attribute = \"median.NDVI\")        # Attribute for mapping (e.g., NGRDI color scale)\n\n── Analyzing the mosaic ──────────────────── Started on 2025-09-03 | 10:26:42 ──\n\n\nℹ Cropping the mosaic to the shapefile extent...\n\n\n✔ Cropping the mosaic to the shapefile extent [603ms]\n\n\n\n\n\nℹ Computing vegetation indexes...\n\n\n✔ Computing vegetation indexes [956ms]\n\n\n\n\n\n── Analyzing block 1 ──\n\n\n\n\n\nℹ Extracting plot-level features...\n\n\n✔ Extracting plot-level features [1.3s]\n\n\n\n\n\nℹ Binding the extracted features...\n\n\n✔ Binding the extracted features [227ms]\n\n\n\n\n\nℹ Summarizing the results...\n\n\n── Mosaic successfully analyzed ─────────── Finished on 2025-09-03 | 10:26:46 ──\n\n\nℹ Summarizing the results...\n✔ Summarizing the results [924ms]\n\n# Display the result plot\nres$result_plot\n\nSimple feature collection with 220 features and 13 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 755757.8 ymin: 5176793 xmax: 755775.2 ymax: 5176870\nProjected CRS: PROJCRS[\"unknown\",\n    BASEGEOGCRS[\"unknown\",\n        DATUM[\"Unknown based on Normal Sphere (r=6370997) ellipsoid\",\n            ELLIPSOID[\"Normal Sphere (r=6370997)\",6370997,0,\n                LENGTHUNIT[\"metre\",1,\n                    ID[\"EPSG\",9001]]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433,\n                ID[\"EPSG\",9122]]]],\n    CONVERSION[\"Azimuthal Equidistant\",\n        METHOD[\"Azimuthal Equidistant\",\n            ID[\"EPSG\",1125]],\n        PARAMETER[\"Latitude of natural origin\",90,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",1.35,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"False easting\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"easting\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"northing\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\nFirst 10 features:\n   unique_id block plot_id row column median.NDVI median.NDRE mean.NDVI\n1          1   B01   P0001   1      1   0.9063697   0.6897340 0.9038250\n2          2   B01   P0022   2      1   0.8729471   0.6278511 0.8675194\n3          3   B01   P0023   3      1   0.8523978   0.5689529 0.8472388\n4          4   B01   P0044   4      1   0.8694811   0.5859919 0.8657323\n5          5   B01   P0045   5      1   0.8880474   0.6595912 0.8829148\n6          6   B01   P0066   6      1   0.9029454   0.6866557 0.8993441\n7          7   B01   P0067   7      1   0.8824696   0.6411043 0.8783972\n8          8   B01   P0088   8      1   0.9076901   0.6771331 0.9051014\n9          9   B01   P0089   9      1   0.9114776   0.6916510 0.9052048\n10        10   B01   P0110  10      1   0.9060094   0.6885610 0.9008401\n   mean.NDRE  min.NDVI  min.NDRE  max.NDVI  max.NDRE\n1  0.6871165 0.7621962 0.5361932 0.9345099 0.7634687\n2  0.6247696 0.6205863 0.4595068 0.9209868 0.7154057\n3  0.5668365 0.6182213 0.3848066 0.9107233 0.6940876\n4  0.5837736 0.6504017 0.4302001 0.9132165 0.6815384\n5  0.6548557 0.6766334 0.4856216 0.9194713 0.7331700\n6  0.6817299 0.7367124 0.4884622 0.9332923 0.7663096\n7  0.6382736 0.6655113 0.4731745 0.9233408 0.7468863\n8  0.6745363 0.6969521 0.4251380 0.9326490 0.7383555\n9  0.6846186 0.6435085 0.3790271 0.9324402 0.7592227\n10 0.6857442 0.6479207 0.4932948 0.9335911 0.7672631\n                         geometry\n1  POLYGON ((755775.2 5176793,...\n2  POLYGON ((755775.2 5176797,...\n3  POLYGON ((755775.2 5176801,...\n4  POLYGON ((755775.2 5176805,...\n5  POLYGON ((755775.2 5176809,...\n6  POLYGON ((755775.2 5176813,...\n7  POLYGON ((755775.2 5176817,...\n8  POLYGON ((755775.2 5176821,...\n9  POLYGON ((755775.2 5176824,...\n10 POLYGON ((755775.2 5176828,...\n\n# ndvi plus shapefile\nbm + shapefile_view(res$result_plot, attribute = \"median.NDVI\")",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "02_dia2.html#segment-the-plots",
    "href": "02_dia2.html#segment-the-plots",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "res &lt;- \n  mosaic_analyze(mosaic,\n                 b = 1, # Blue channel\n                 g = 2, # Green channel\n                 r = 3, # Red channel\n                 re = 4, # Red Edge channel\n                 nir = 5, # Near-Infrared channel\n                 basemap = bm,  # Basemap for visualization\n                 shapefile = shp,\n                 plot_index = \"NDVI\",   \n                 attribute = \"median.NDVI\",\n                 segment_plot = TRUE)   # compute a mask and canopy coverage\n\n── Analyzing the mosaic ──────────────────── Started on 2025-09-03 | 10:26:49 ──\n\n\nℹ Cropping the mosaic to the shapefile extent...\n\n\n✔ Cropping the mosaic to the shapefile extent [374ms]\n\n\n\n\n\nℹ Computing vegetation indexes...\n\n\n✔ Computing vegetation indexes [334ms]\n\n\n\n\n\n── Analyzing block 1 ──\n\n\n\n\n\nℹ Masking vegetation from ground...\n\n\n✔ Vegetation masking completed [1.4s]\n\n\n\n\n\nℹ Extracting plot-level features...\n\n\n✔ Extracting plot-level features [322ms]\n\n\n\n\n\nℹ Binding the extracted features...\n\n\n✔ Binding the extracted features [133ms]\n\n\n\n\n\nℹ Summarizing the results...\n\n\n── Mosaic successfully analyzed ─────────── Finished on 2025-09-03 | 10:26:52 ──\n\n\nℹ Summarizing the results...\n✔ Summarizing the results [343ms]\n\nbm +\n  shapefile_view(res$result_plot, attribute = \"coverage\")",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "02_dia2.html#count-and-measure-plants",
    "href": "02_dia2.html#count-and-measure-plants",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "In the example below, mosaic_analyze() is used to count, measure, and extract image indices at the block, plot, and individual levels in a lettuce trial. This process is based on an orthomosaic image, as described in this paper.\n\nA big thank you to the authors for providing the full-resolution .tif file, which enabled me to advance several functionalities in pliman, including high-throughput image analysis and data extraction at multiple levels. This kind of data sharing is invaluable for driving further innovation and tool development.\n\nThe trial was conducted using a randomized complete block design with four blocks. The researchers tested the effects of Aspergillus niger application (six different levels, combining both concentration and formulation) and three levels of phosphorus (0%, 50%, 100%) on lettuce growth.\n\n\nField Experiment\n\nIn the plimans shapefile, each plot within the four blocks is represented by a unique plot_id, such as “P0001,” “P0002,” etc. These correspond to the following treatments:\n\n\nPlot ID\nInoculant\nPhosphorus (%)\n\n\n\nP0001\nNI\n0\n\n\nP0002\nNI\n50\n\n\nP0003\nNI\n100\n\n\nP0004\nTS\n0\n\n\nP0005\nTS\n50\n\n\nP0006\nTS\n100\n\n\nP0007\nGR2\n0\n\n\nP0008\nGR2\n50\n\n\nP0009\nGR2\n100\n\n\nP0010\nGR6\n0\n\n\nP0011\nGR6\n50\n\n\nP0012\nGR6\n100\n\n\nP0013\nSC2\n0\n\n\nP0014\nSC2\n50\n\n\nP0015\nSC2\n100\n\n\nP0016\nSC6\n0\n\n\nP0017\nSC6\n50\n\n\nP0018\nSC6\n100\n\n\n\n\nThe mosaic_input() function is used to load the mosaic of a lettuce field, and the shapefile_input() function is used to load the corresponding shapefile that delineates the plots. You can also create a shapefile with shapefile_build() (as in the previous section) or simply define the nrow and ncol arguments in mosaic_analyze().\nIn this example, a basemap is created using a mosaic image to serve as the foundation for further visualizations. While creating a basemap is not mandatory, it can significantly speed up the process, as functions like mosaic_analyze(), shapefile_build(), and shapefile_edit() will automatically render a leaflet map if one is not provided. By pre-creating the basemap, you avoid the overhead of rendering multiple maps, making the workflow more efficient.\nAdditionally, a shapefile layer is overlaid on top of the basemap to display the levels of the inoculante factor.\n\nmos &lt;-    mosaic_input(\"lettuce/lettuce.tif\")\n\nclass       : SpatRaster \nsize        : 2998, 1456, 3  (nrow, ncol, nlyr)\nresolution  : 0.01, 0.01  (x, y)\nextent      : 236480.6, 236495.2, 7929165, 7929195  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 23S (EPSG:32723) \nsource      : lettuce.tif \nnames       : lettuce_1, lettuce_2, lettuce_3 \nmin values  :         1,         0,         0 \nmax values  :       255,       255,       255 \n\nshp &lt;- shapefile_input(\"lettuce/lettuce.rds\")\n\nSimple feature collection with 72 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 236484.2 ymin: 7929167 xmax: 236491.5 ymax: 7929194\nProjected CRS: WGS 84 / UTM zone 23S\nFirst 10 features:\n   unique_id block plot_id row column inoculante   p\n1          1    B1   B0016   1      1        SC6   0\n2          2    B1   B0011   2      1        GR6  50\n3          3    B1   B0006   3      1         TS 100\n4          4    B1   B0003   4      1         NI 100\n5          5    B1   B0013   5      1        SC2   0\n6          6    B1   B0017   6      1        SC6  50\n7          7    B1   B0009   7      1        GR2 100\n8          8    B1   B0015   8      1        SC2 100\n9          9    B1   B0010   9      1        GR6   0\n10        10    B1   B0005  10      1         TS  50\n                         geometry\n1  POLYGON ((236484.2 7929194,...\n2  POLYGON ((236484.2 7929192,...\n3  POLYGON ((236484.3 7929191,...\n4  POLYGON ((236484.4 7929189,...\n5  POLYGON ((236484.5 7929188,...\n6  POLYGON ((236484.6 7929186,...\n7  POLYGON ((236484.7 7929185,...\n8  POLYGON ((236484.8 7929183,...\n9  POLYGON ((236484.9 7929182,...\n10 POLYGON ((236485 7929180, 2...\n\n# create a basemap\nbm &lt;- mosaic_view(mos, \n                  r = 1, g = 2, b = 3,\n                  max_pixels = 2e6) # defaults is 1e6.. so here, a bit higher resolution is used\n\nℹ Using `downsample = 2` to match the max_pixels constraint.\n\nbm + shapefile_view(shp, attribute = \"p\", color_regions = ggplot_color(3))\n\n\n\n\n\n\nThere function mosaic_analyze() is all you need now. The vegetation indexes computed for each plant are defined in the object indexes. Here, the Normalized Green Red Difference Index (NGRDI), Green Leaf Index (GLI), and Blue Green Index (BGI) are used. You can find a list with all build-in vegetation indexes in pliman here.\nBy setting segment_individuals = TRUE, mosaic_analyze() shifts its focus to the individual plant level. Using a threshold-based segmentation method, it isolates each plant within a plot, enabling precise counting and measurement, provided that a higher contrast between plant and soi. While the function can also handle complex backgrounds with additional arguments, that’s not the focus here. Instead, the power of this approach lies in its ability to break down each plot into individual components, providing a detailed analysis of plant morphology, size, and distribution. This transforms high-throughput phenotyping by moving from a broad plot-level perspective to an in-depth examination of each plant, unlocking a new level of precision and insight.\n\nFor context, in the original study, the researchers manually measured the diameter of the four central plants in each plot. With mosaic_analyze(), this process is not only automated but also expanded to include every plant in the plot, providing more comprehensive data in a fraction of the time.\n\nUsing segment_index = \"GLI\", we configure the analysis to segment soil and identify individual plants based on the GLI index. The analysis will return both summary statistics for each plot and a map showing the segmented individual plants.\n\nindexes &lt;- c(\"NGRDI\", \"vNDVI\")\nan &lt;- mosaic_analyze(\n  mosaic = mos,\n  basemap = bm,\n  r = 1,\n  g = 2,\n  b = 3,\n  shapefile = shp,\n  plot_index = indexes,\n  segment_individuals = TRUE,\n  segment_index = \"GLI\"\n)\n\n── Analyzing the mosaic ──────────────────── Started on 2025-09-03 | 10:27:05 ──\n\n\nℹ Cropping the mosaic to the shapefile extent...\n\n\nWarning: ! ``segment_plot`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``segment_individuals`` must have length 1 or 4 (the number of drawn\n  polygons).\n\n\nWarning: ! ``threshold`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``watershed`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``segment_index`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``invert`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``includeopt`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\nWarning: ! ``opening`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``closing`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``filter`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``erode`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``dilate`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``grid`` must have length 1 or 4 (the number of drawn polygons).\n\n\nWarning: ! ``lower_noise`` must have length 1 or 4 (the number of drawn\npolygons).\n\n\n✔ Cropping the mosaic to the shapefile extent [833ms]\n\n\n\n\n\nℹ Computing vegetation indexes...\n\n\n✔ Computing vegetation indexes [2s]\n\n\n\n\n\n── Analyzing block 1 ──\n\n\n\n\n\nℹ Segmenting individuals within plots...\n\n\n✔ Segmenting individuals within plots [2.3s]\n\n\n\n\n\nℹ Extracting features from segmented individuals...\n\n\n✔ Extracting features from segmented individuals [258ms]\n\n\n\n\n\nℹ Extracting plot-level features...\n\n\n✔ Extracting plot-level features [201ms]\n\n\n\n\n\nℹ Binding the extracted features...\n\n\n── Analyzing block 2 ──\n\n\nℹ Binding the extracted features...\nℹ Binding the extracted features...\n✔ Binding the extracted features [294ms]\n\nℹ Segmenting individuals within plots...\n✔ Segmenting individuals within plots [1.8s]\n\nℹ Extracting features from segmented individuals...\n✔ Extracting features from segmented individuals [353ms]\n\nℹ Extracting plot-level features...\n✔ Extracting plot-level features [276ms]\n\nℹ Binding the extracted features...\n── Analyzing block 3 ──\nℹ Binding the extracted features...\nℹ Binding the extracted features...\n✔ Binding the extracted features [419ms]\n\nℹ Segmenting individuals within plots...\n✔ Segmenting individuals within plots [2.3s]\n\nℹ Extracting features from segmented individuals...\n✔ Extracting features from segmented individuals [266ms]\n\nℹ Extracting plot-level features...\n✔ Extracting plot-level features [192ms]\n\nℹ Binding the extracted features...\n── Analyzing block 4 ──\nℹ Binding the extracted features...\nℹ Binding the extracted features...\n✔ Binding the extracted features [317ms]\n\nℹ Segmenting individuals within plots...\n✔ Segmenting individuals within plots [1.8s]\n\nℹ Extracting features from segmented individuals...\n✔ Extracting features from segmented individuals [266ms]\n\nℹ Extracting plot-level features...\n✔ Extracting plot-level features [208ms]\n\nℹ Binding the extracted features...\n✔ Binding the extracted features [121ms]\n\nℹ Summarizing the results...\n── Mosaic successfully analyzed ─────────── Finished on 2025-09-03 | 10:27:20 ──\nℹ Summarizing the results...\n✔ Summarizing the results [1.2s]\n\nbm + shapefile_view(an$result_indiv,\n                    attribute = \"diam_mean\")\n\n\n\n\n\nBelow, you can see the results at the individual plant level. Each plant within a plot is identified, segmented, and color-coded based on its measured characteristics (e.g., mean vegetation indices). While you can use the attribute argument in mosaic_analyze() to control these visualizations, there’s no need to worry—new plots can easily be generated after the results are computed, giving you full flexibility in how the data is displayed.\nFor each plot, detailed summary statistics are also returned, allowing for in-depth analysis of plant performance across the entire experiment.\n\nan$map_indiv\n\n\n\n\n\nWe can gain deeper insights by utilizing the results generated from mosaic_analyze(). Below, the data is grouped by the different levels of the inoculante factor to explore how it influences the analysis.\n\n# see the results averaged by the combination of inoculante and p factors\nlibrary(dplyr)\n\n\nAnexando pacote: 'dplyr'\n\n\nO seguinte objeto é mascarado por 'package:pliman':\n\n    %&gt;%\n\n\nOs seguintes objetos são mascarados por 'package:stats':\n\n    filter, lag\n\n\nOs seguintes objetos são mascarados por 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(emmeans)\n\nWelcome to emmeans.\nCaution: You lose important information if you filter this package's results.\nSee '? untidy'\n\nlibrary(ggplot2)\ndfino &lt;- \n  an$result_plot_summ |&gt; \n  group_by(plot_id, inoculante, p) |&gt; \n  summarise(across(where(is.numeric), mean))\n\n`summarise()` has grouped output by 'plot_id', 'inoculante'. You can override\nusing the `.groups` argument.\n\n# inoculante levels\nbm + shapefile_view(dfino, attribute = \"inoculante\", color_regions = ggplot_color(6))\n\n\n\n\n# phospurus level\nbm + shapefile_view(dfino, attribute = \"p\", color_regions = ggplot_color(3))\n\n\n\n\n# Analysis of variance\ndfanova &lt;- \n  an$result_plot_summ |&gt; \n  mutate(across(c(p, column, inoculante), as.factor))\n\nmod &lt;- aov(diam_mean ~ inoculante * p + column, data = dfanova)\nanova(mod)\n\nAnalysis of Variance Table\n\nResponse: diam_mean\n             Df   Sum Sq   Mean Sq  F value    Pr(&gt;F)    \ninoculante    5 0.001806 0.0003612   4.0183 0.0037715 ** \np             2 0.055823 0.0279113 310.4862 &lt; 2.2e-16 ***\ncolumn        3 0.001750 0.0005832   6.4875 0.0008372 ***\ninoculante:p 10 0.001330 0.0001330   1.4799 0.1742390    \nResiduals    51 0.004585 0.0000899                       \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nemm_ino &lt;- emmeans(mod, ~ inoculante)\n\nNOTE: Results may be misleading due to involvement in interactions\n\nemm_p &lt;- emmeans(mod, ~ p)\n\nNOTE: Results may be misleading due to involvement in interactions\n\npin &lt;- \n  plot(emm_ino, comparisons = TRUE, CIs = FALSE) +\n  xlim(0.15, 0.23) +\n  labs(x = \"Mean diameter (cm)\", y = \"Inoculante\")\n\npp &lt;- \n  plot(emm_p, comparisons = TRUE, CIs = FALSE) +\n  xlim(0.15, 0.23) +\n  labs(x = \"Mean diameter (cm)\", y = \"Phosphorus level (%)\")\n\nlibrary(patchwork)\npin/ pp",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "02_dia2.html#mapping-plants-within-plots",
    "href": "02_dia2.html#mapping-plants-within-plots",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "In this example, we use an RGB orthomosaic from a potato field to analyze and segment individual plants within the plots. The analysis involves loading the mosaic and corresponding shapefile, cropping the mosaic to the area defined by the shapefile, and then segmenting individual plants using a custom vegetation index. When map_individuals = TRUE is used, important metrics such as the average distance between plants and the coefficient of variation for each cropping row are also computed.\n\n# Load orthomosaic and shapefile\nmos &lt;-    mosaic_input(\"potato/potato.tif\")\nshp &lt;- shapefile_input(\"potato/potato_shp.rds\")\n\nbm &lt;- mosaic_view(mos, max_pixels = 6e6)\nbm + shapefile_view(shp)\n\nres &lt;-\n  mosaic_analyze(\n    mosaic = mos,\n    basemap = bm,\n    shapefile = shp,\n    plot_index = \"GLI\",\n    segment_individuals = TRUE,\n    map_individuals = TRUE,\n    map_direction = \"horizontal\",    # default\n    attribute = \"cv\"\n  )\n\npal &lt;- c( \"#fde725\", \"#5ec962\", \"#21918c\", \"#3b528b\", \"#440154\")\np1 &lt;- shapefile_view(res$result_plot_summ,\n                     attribute = \"cv\",\n                     color_regions = pal)\np2 &lt;- shapefile_view(res$result_indiv,\n                     type = \"centroid\",\n                     attribute = \"area\")\n\n(bm + p1) | p2\n\nThe interactive map above shows the segmented potato plants within each row. Note that some plots were not rendered due to the absence of identified plants. It is important to highlight the structure of the res object:\n\nnames(res)\n\nWhen map_individuals = TRUE is used, the result_individ_map object contains the distances between each plant within the plots. By default, the mapping occurs in the horizontal direction.\n\nres[[\"result_individ_map\"]][[\"distances\"]][[\"B01_P0001\"]]\n\nThe objects means and cvs hold the average distances and coefficients of variation, respectively.\n\nShow me the codelibrary(patchwork)\npmean &lt;-\n  ggplot(res$result_plot_summ, aes(x = mean_distance)) +\n  geom_histogram() +\n  labs(x = \"Average distance between plants\",\n       y = \"Number of plots\")\n\npcv &lt;-\n  ggplot(res$result_plot_summ, aes(x = cv)) +\n  geom_histogram(bins = 10) +\n  labs(x = \"Coefficient of variation (%)\",\n       y = \"Number of plots\")\n\npmean + pcv\n\n\nBelow, we’ll explore two contrasting plots to demonstrate how this information can be valuable for assessing plot uniformity.\n\nlibrary(dplyr)\npar(mfrow = c(2, 1))\np1 &lt;- \n  res$result_indiv |&gt; \n  filter(plot_id == \"P0184\")\n\n\n# plot \np1plot &lt;- \n  res$result_plot_summ |&gt; \n  filter(plot_id == \"P0184\")\n\n\nplot1 &lt;- mosaic_crop(mos, shapefile = p1plot, buffer = 0.2)\ncoords &lt;- p1[, c(\"x\", \"y\")] |&gt; sf::st_drop_geometry() |&gt; arrange(x)\nmosaic_plot_rgb(plot1, main = \"P0184: Average distance: 0.243 m; CV: 14.1%\")\nlines(coords, lwd = 2)\nshapefile_plot(p1plot, add = TRUE, border = \"blue\", lwd = 3)\npoints(p1$x, p1$y, pch = 16,  cex = 2, col = \"red\")\n\n\n\np2 &lt;- \n  res$result_indiv |&gt; \n  filter(plot_id == \"P0204\")\np2plot &lt;- \n  res$result_plot_summ |&gt; \n  filter(plot_id == \"P0204\")\n\nplot2 &lt;- mosaic_crop(mos, shapefile = p2plot, buffer = 0.2)\ncoords2 &lt;- p2[, c(\"x\", \"y\")] |&gt; sf::st_drop_geometry() |&gt; arrange(x)\nmosaic_plot_rgb(plot2, main = \"P0204: Average distance: 0.325 m; CV: 64.0%\")\nlines(coords2, lwd = 2)\nshapefile_plot(p2plot, add = TRUE, border = \"blue\", lwd = 3)\npoints(p2$x, p2$y, pch = 16,  cex = 2, col = \"red\")",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "02_dia2.html#canopy-height-models",
    "href": "02_dia2.html#canopy-height-models",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "A Canopy Height Model (CHM) represents the height of vegetation or structures above the ground surface, making it a crucial tool for analyzing vegetation structure and biomass. It is derived by subtracting a Digital Terrain Model (DTM), which shows the bare earth surface, from a Digital Surface Model (DSM), which captures the elevation of all surface objects,like plants. By comparing these two models, the CHM provides detailed insights into the height of vegetation, enabling accurate assessments of canopy cover and plant growth in agricultural or forested landscapes.\n\n\n# Load DSM, DTM, mask and shapefile\ndsm &lt;- mosaic_input(\"dsm/dsm.tif\")\n\nclass       : SpatRaster \nsize        : 2770, 2834, 1  (nrow, ncol, nlyr)\nresolution  : 0.0216565, 0.0216565  (x, y)\nextent      : 734181.2, 734242.5, 4488971, 4489031  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : dsm.tif \nname        :      dsm \nmin value   : 302.4178 \nmax value   : 304.7521 \n\ndtm &lt;- mosaic_input(\"dsm/dtm.tif\")\n\nclass       : SpatRaster \nsize        : 2770, 2834, 1  (nrow, ncol, nlyr)\nresolution  : 0.0216565, 0.0216565  (x, y)\nextent      : 734181.2, 734242.5, 4488971, 4489031  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : dtm.tif \nname        :      dtm \nmin value   : 302.3617 \nmax value   : 303.6896 \n\nmsk &lt;- mosaic_input(\"dsm/mask.tif\")\n\nclass       : SpatRaster \nsize        : 6026, 5669, 1  (nrow, ncol, nlyr)\nresolution  : 0.0108282, 0.0108282  (x, y)\nextent      : 734181.2, 734242.6, 4488971, 4489036  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : mask.tif \nname        : GLI \nmin value   :   0 \nmax value   :   1 \n\northo &lt;- mosaic_input(\"dsm/ortho.tif\")\n\nclass       : SpatRaster \nsize        : 6026, 5669, 3  (nrow, ncol, nlyr)\nresolution  : 0.0108282, 0.0108282  (x, y)\nextent      : 734181.2, 734242.6, 4488971, 4489036  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 72BE / UTM zone 14N (EPSG:32414) \nsource      : ortho.tif \ncolors RGB  : 1, 2, 3 \nnames       : ortho_1, ortho_2, ortho_3 \n\nshp &lt;- shapefile_input(\"dsm/shape.rds\")\n\nSimple feature collection with 728 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 734184.7 ymin: 4488985 xmax: 734238.9 ymax: 4489026\nProjected CRS: WGS 72BE / UTM zone 14N\nFirst 10 features:\n   unique_id block plot_id row column                       geometry\n1          1   B01   P0001   1      1 POLYGON ((734184.7 4489024,...\n2          2   B01   P0028   2      1 POLYGON ((734184.7 4489023,...\n3          3   B01   P0029   3      1 POLYGON ((734184.8 4489023,...\n4          4   B01   P0056   4      1 POLYGON ((734184.8 4489022,...\n5          5   B01   P0057   5      1 POLYGON ((734184.8 4489021,...\n6          6   B01   P0084   6      1 POLYGON ((734184.8 4489020,...\n7          7   B01   P0085   7      1 POLYGON ((734184.9 4489020,...\n8          8   B01   P0112   8      1 POLYGON ((734184.9 4489019,...\n9          9   B01   P0113   9      1 POLYGON ((734184.9 4489018,...\n10        10   B01   P0140  10      1 POLYGON ((734184.9 4489017,...\n\n# Visualize the DSM and DTM side by side. \n# The argument nc = 1 means that the plots will be displayed in a single column.\nmosaic_plot(c(dsm, dtm))\n\n\n\n\n\n\n# Compute the Canopy Height Model (CHM) by subtracting the DTM from the DSM.\n# The `mask` parameter specifies the regions to be used, and `mask_soil = FALSE` \n# means that areas identified by the mask are considered non-soil (i.e., representing the plants).\nres &lt;- mosaic_chm(dsm = dsm,\n                  dtm = dtm,\n                  mask = msk,\n                  mask_soil = FALSE)  \n\n── Canopy Height-Model generation ─────────────────── \"2025-09-03 | 10:27:34\" ──\n\n\nℹ Building the canopy height model...\n\n\n✔ Building the canopy height model [2.5s]\n\n\n\n\n# Extract canopy height values from the CHM using the provided shapefile.\n# This will associate the height values with the polygons in the shapefile.\nchmvals &lt;- mosaic_chm_extract(res, shp)\n\n# Visualize the DSM with a custom color palette to represent different elevation levels.\npal &lt;- custom_palette(c(\"#8B4513\", \"#B2DF8A\", \"forestgreen\"), n = 10)\nbm &lt;- mosaic_view(dsm, color_regions = pal)\n\nℹ Using `downsample = 3` to match the max_pixels constraint.\n\n# Overlay the shapefile on top of the DSM visualization, using the \"coverage\" attribute \n# from the shapefile to define the regions of interest.\nbm + shapefile_view(chmvals, attribute = \"q95\")\n\n\n\n\n\n\nIn field experiments, the Digital Terrain Model (DTM) is frequently obtained before sowing and represents the bare soil. But, if we could derivate DTM from DSM? If a DTM is not provided, mosaic_chm() will derive DTM from DSM using an interpolation strategy.\n\nres2 &lt;- mosaic_chm(\n  dsm,\n  mask = msk,\n  window_size = c(4, 4),\n  mask_soil = FALSE\n)\n\n── Canopy Height-Model generation ─────────────────── \"2025-09-03 | 10:27:49\" ──\n\n\nℹ Extracting ground points for each moving window...\n\n\n✔ Extracting ground points for each moving window [2.4s]\n\n\n\n\n\nℹ Interpolating ground points...\n\n\n✔ Interpolating ground points [4.6s]\n\n\n\n\n\nℹ Resampling and masking the interpolated raster...\n\n\n✔ Resampling and masking the interpolated raster [1.5s]\n\n\n\n\n\nℹ Building the canopy height model...\n\n\n✔ Building the canopy height model [2.1s]\n\n\n\n\n# Extract CHM values\nchmvals2 &lt;- mosaic_chm_extract(res2, shp) \n\n# Quantile 95\nbm + shapefile_view(chmvals2, attribute = \"q95\")\n\n\n\n\n# Entropy\nbm + shapefile_view(chmvals2, attribute = \"entropy\")\n\n\n\n\n# a closer look\nzoom1 &lt;- shp |&gt; filter(plot_id == \"P0267\") |&gt; sf::st_buffer(3)\nzoom2 &lt;- shp |&gt; filter(plot_id == \"P0174\") |&gt; sf::st_buffer(3)\nc1 &lt;- mosaic_crop(ortho, shapefile = zoom1)\nc2 &lt;- mosaic_crop(ortho, shapefile = zoom2)\n\npar(mfrow = c(1, 2))\nmosaic_plot_rgb(c1)\nmosaic_plot_rgb(c2)\n\n\n\n\n\n\npar(mfrow = c(1, 1))",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "02_dia2.html#plant-maturity",
    "href": "02_dia2.html#plant-maturity",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "library(pliman)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.4     ✔ tibble    3.3.0\n✔ purrr     1.1.0     ✔ tidyr     1.3.1\n✔ readr     2.1.5     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ forcats::%&gt;%()               masks stringr::%&gt;%(), purrr::%&gt;%(), tidyr::%&gt;%(), tibble::%&gt;%(), dplyr::%&gt;%(), pliman::%&gt;%()\n✖ tibble::column_to_rownames() masks pliman::column_to_rownames()\n✖ dplyr::filter()              masks stats::filter()\n✖ dplyr::lag()                 masks stats::lag()\n✖ tibble::remove_rownames()    masks pliman::remove_rownames()\n✖ tibble::rownames_to_column() masks pliman::rownames_to_column()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nmosaic &lt;- mosaic_input(\"maturity/cropped_09-17-2024.tif\")\n\nclass       : SpatRaster \nsize        : 1435, 10627, 3  (nrow, ncol, nlyr)\nresolution  : 0.03520265, 0.03521962  (x, y)\nextent      : 532444.6, 532818.7, 4575464, 4575514  (xmin, xmax, ymin, ymax)\ncoord. ref. : WGS 84 / UTM zone 14N (EPSG:32614) \nsource      : cropped_09-17-2024.tif \ncolors RGB  : 1, 2, 3 \nnames       : tmp_aggregate_small_1, tmp_aggregate_small_2, tmp_aggregate_small_3 \nmin values  :                     1,                     1,                     1 \nmax values  :                   254,                   254,                   235 \n\nshapefile &lt;- shapefile_input(\"maturity/shape_mat.rds\")\n\nSimple feature collection with 576 features and 11 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 532449.6 ymin: 4575469 xmax: 532813.7 ymax: 4575509\nProjected CRS: WGS 84 / UTM zone 14N\nFirst 10 features:\n   unique_id block plot_id column row column_field row_field Maturity Date\n1       1345   B02   P0001      1   1            3        19            32\n2       1346   B02   P0007      2   1            4        19            22\n3       1347   B02   P0013      3   1            5        19            27\n4       1348   B02   P0019      4   1            6        19            27\n5       1349   B02   P0025      5   1            7        19            28\n6       1350   B02   P0031      6   1            8        19            27\n7       1351   B02   P0037      7   1            9        19            32\n8       1352   B02   P0043      8   1           10        19            33\n9       1353   B02   P0049      9   1           11        19            30\n10      1354   B02   P0055     10   1           12        19            31\n   Planting Date Baseline Maturity maturity_ground\n1     2024-05-28        2024-08-31             127\n2     2024-05-28        2024-08-31             117\n3     2024-05-28        2024-08-31             122\n4     2024-05-28        2024-08-31             122\n5     2024-05-28        2024-08-31             123\n6     2024-05-28        2024-08-31             122\n7     2024-05-28        2024-08-31             127\n8     2024-05-28        2024-08-31             128\n9     2024-05-28        2024-08-31             125\n10    2024-05-28        2024-08-31             126\n                         geometry\n1  POLYGON ((532449.6 4575484,...\n2  POLYGON ((532453.5 4575484,...\n3  POLYGON ((532457.3 4575484,...\n4  POLYGON ((532461.1 4575485,...\n5  POLYGON ((532464.9 4575485,...\n6  POLYGON ((532468.7 4575485,...\n7  POLYGON ((532472.5 4575485,...\n8  POLYGON ((532476.3 4575486,...\n9  POLYGON ((532480.1 4575486,...\n10 POLYGON ((532483.9 4575486,...\n\nngrdi &lt;-\n  rio::import(\"maturity/time_series_maturity_vndvi5.xlsx\", setclass = \"tbl\") |&gt;\n  select(block, plot_id, maturity) |&gt;\n  rename(mat_vndvi = maturity)\n\n\nmat &lt;-\n  left_join(shapefile, ngrdi) |&gt;\n  mutate(mat_vndvi = mat_vndvi,\n         diff = (mat_vndvi) - maturity_ground) |&gt;\n  mutate(diff_class = case_when(\n    between(abs(diff), 0, 3) ~ \"0 a 3\",\n    between(abs(diff), 3, 6) ~ \"3 a 6\",\n    between(abs(diff), 6, 9) ~ \"6 a 9\",\n    FALSE ~ \"&gt; 9\"\n  )) |&gt;\n  drop_na()\n\nJoining with `by = join_by(block, plot_id)`\n\ndfccc &lt;-\n  mat |&gt;\n  sf::st_drop_geometry() |&gt;\n  as.data.frame() |&gt;\n  ccc(maturity_ground, mat_vndvi) |&gt;\n  mutate(rho = paste0(\"rho[c]:~\", round(ccc, 4)),\n         rmse = paste0(\"RMSE:~\", round(rmse, 4)),\n         r = paste0(\"r:~~~\", round(r, 4)))\n\n\nmatplot &lt;- \n  mat |&gt;\n  ggplot(aes(maturity_ground, mat_vndvi)) +\n  geom_point(size = 3, alpha = 0.7, aes( color = diff_class)) +\n  scale_y_continuous(limits = c(110, 135)) +\n  scale_x_continuous(limits = c(110, 135)) +\n  geom_abline(intercept = 0, slope = 1) +\n  geom_smooth(method = \"lm\") +\n  labs(x = \"Dias para maturação (observado)\",\n       y = \"Dias para maturação (predito)\") +\n  coord_equal() +\n  theme_minimal(base_size = 20) +\n  geom_text(aes(label=rho),\n            x = 112,\n            y = 135,\n            hjust = 0,\n            size = 4,\n            data = dfccc[1, ],\n            parse = TRUE) +\n  geom_text(aes(label=rmse),\n            x = 112,\n            y = 134,\n            hjust = 0,\n            size = 4,\n            data = dfccc[1, ],\n            parse = TRUE) +\n  geom_text(aes(label=r),\n            x = 112,\n            y = 133,\n            hjust = 0,\n            size = 4,\n            data = dfccc[1, ],\n            parse = TRUE)\n\nmaterr &lt;-\n  mat |&gt;\n  sf::st_drop_geometry() |&gt;\n  as.data.frame() |&gt;\n  group_by(diff_class) |&gt;\n  summarise(n = n())\n\nmaterrp &lt;- \nggplot(materr, aes(\"A\", n, fill = diff_class)) +\n  geom_col() +\n  geom_text(aes(label = n), position = \"stack\",\n            vjust = 1) +\n  theme_minimal(base_size = 14) +\n  theme(axis.text.x = element_blank(),\n        axis.title.x = element_blank(),\n        axis.ticks.x = element_blank()) +\n  labs(y = \"Número de parcelas experimentais\",\n       title = \"Proporção do erro de predição\",\n       fill = \"abs(dias)\")\n\nmatplot + materrp +\n  plot_layout(widths = c(0.8, 0.2))\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 1 row containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n# criar shape\n\nbm &lt;- mosaic_view(mosaic,\n                  r = 1, g = 2, b = 3,\n                  max_pixels = 5e6)\n\nℹ The number of pixels is very high, which might slow the rendering process.\nℹ Using `downsample = 2` to match the max_pixels constraint.\n\nbm + shapefile_view(mat |&gt; sf::st_buffer(0.22), attribute = \"mat_vndvi\")",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "02_dia2.html#timeseries-plimanshiny",
    "href": "02_dia2.html#timeseries-plimanshiny",
    "title": "Scripts - 04/09/2025",
    "section": "",
    "text": "The plimanshiny package provides a user-friendly interface for analyzing time series data. The package allows users to import, visualize, and analyze time series data, such as satellite images, drone images, and other remote sensing data.\n\ninstall.packages(\"pak\")\npak::pkg_install(\"NEPEM-UFSC/pliman\")\npak::pkg_install(\"NEPEM-UFSC/plimanshiny\")\n\n# Open the app\nlibrary(plimanshiny)\nrun_app()",
    "crumbs": [
      "About",
      "Scripts - 04/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html",
    "href": "01_dia1.html",
    "title": "Scripts - 03/09/2025",
    "section": "",
    "text": "library(pliman)\nlibrary(tidyverse)\nlibrary(ggridges)",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#import-and-display",
    "href": "01_dia1.html#import-and-display",
    "title": "Scripts - 03/09/2025",
    "section": "\n2.1 Import and Display",
    "text": "2.1 Import and Display\n\n2.1.1 Import Images\n\nimg &lt;- image_import(\"20231001_153711.jpg\")\nplot(img)\n\n\n\n\n\n\n\nTo import a list of images, use a vector of image names or the pattern argument. In the latter case, all images matching the specified pattern will be imported into a list.\n\nimg_list1 &lt;- image_import(c(\"20231001_153711.jpg\", \"20231001_160425.jpg\"))\n\n\n2.1.2 Display Images\nIndividual images are displayed with plot(). To combine images, use the image_combine() function. Users can input a comma-separated list of objects or a list of objects of the Image class.\n\n# Individual images\nplot(img)\n\n\n\n\n\n\n\n\n# Combine images\nimage_combine(img_list1)\n\n\n\n\n\n\n\npliman provides a set of image_*() functions for performing image manipulation and transformation of single images or a list of images based on the EBImage package.",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#resolution",
    "href": "01_dia1.html#resolution",
    "title": "Scripts - 03/09/2025",
    "section": "\n2.2 Resolution",
    "text": "2.2 Resolution\n\n2.2.1 Image Resolution (DPI)\nThe dpi() function performs an interactive function to calculate the image resolution based on a known distance entered by the user. To calculate the image resolution (DPI), the user should use the left mouse button to create a known distance line. This can be done, for example, using a known distance model, as follows.\n\n#  this only works in an interactive section\n(imgres &lt;- dpi(img))\n\n\n2.2.2 Resize an Image\nSometimes, it is necessary to resize high-resolution images to reduce computational effort and processing time. The image_resize() function is used to resize an image. The rel_size argument can be used to resize the image by relative size. For example, setting rel_size = 50 for a 1280 x 720 pixels image, the new image will have a size of 640 x 360 pixels.\n\nimage_dimension(img)\n\n── Image dimension ─────────────────────────────────────────────────────────────\n\n\nWidth : 799\n\n\nHeight: 600\n\nimg_resized &lt;- image_resize(img, rel_size = 50)\nimage_dimension(img_resized)\n\n── Image dimension ─────────────────────────────────────────────────────────────\n\n\nWidth : 400\n\n\nHeight: 300",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#apply-a-function-to-images",
    "href": "01_dia1.html#apply-a-function-to-images",
    "title": "Scripts - 03/09/2025",
    "section": "\n2.3 Apply a Function to Images",
    "text": "2.3 Apply a Function to Images\n\napply_fun_to_imgs(pattern = \"2023\",\n                  image_resize,\n                  rel_size = 50,\n                  dir_processed = \"smaller\",\n                  plot = FALSE)\n\n── Sequential processing of 6 images ───── Started on \"2025-09-03 | 10:20:15\" ──\n\n\n── Function `image_resize()` successfully applied to the images ────────────────",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#export",
    "href": "01_dia1.html#export",
    "title": "Scripts - 03/09/2025",
    "section": "\n2.4 Export",
    "text": "2.4 Export\nTo export images to the current directory, use the image_export() function. If a list of images is exported, the images will be saved considering the name and extension present in the list. If no extension is present, the images will be saved as *.jpg files.\n\nimage_export(img, \"img_exported.jpg\")\n\n# or a subfolder\nimage_export(img, \"test/img_exported.jpg\")",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#image-indexes",
    "href": "01_dia1.html#image-indexes",
    "title": "Scripts - 03/09/2025",
    "section": "\n3.1 Image Indexes",
    "text": "3.1 Image Indexes\nThe image_index() function constructs image indices using Red, Green, Blue, Red-Edge, and NIR bands.\n\n# Calculate indices\nindexes &lt;- image_index(img, index = c(\"R, G, B, GRAY, L, B-G/(B+G)\"))\n\nℹ Index \"B-G/(B+G)\" is not available. Trying to compute your own index.\n\n\n\n\n\n\n\n# Create a histogram with RGB values\nplot(indexes, type = \"density\")\n\n\n\n\n\n\n\nIn the case of the R index, the two peaks represent the leaf + reference (smaller peak) and the background (larger peak). The clearer the difference between these peaks, the better the image segmentation.",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#binary-images",
    "href": "01_dia1.html#binary-images",
    "title": "Scripts - 03/09/2025",
    "section": "\n3.2 Binary Images",
    "text": "3.2 Binary Images\nTo segment objects, pliman uses the threshold technique (Otsu, 1979)1, i.e., a cutoff point (considering pixel values) is chosen and the image is classified into two classes (foreground and background). Then, we have a binary image. We can produce this image with image_binary(). This binarization is the key process for all object analysis steps. The better t…\n\nimage_index(img, index = \"GRAY\")\n\n\n\n\n\n\notsu(indexes$GRAY)\n\n[1] 0.4567649\n\nbin &lt;- \n  image_binary(img,  \n               index = \"GRAY\")\n\n\n\n\n\n\n\nNote that some leaf pixels were considered background and some background pixels were considered foreground. We can improve this binarization by applying a morphological operation (such as median filter or oppening) and filling the holes with fill_hull = TRUE. See how changing the filter argument impacts the results.\n\nbin &lt;- image_binary(img, \n                    index = \"GRAY\", \n                    fill_hull = TRUE,\n                    plot =  FALSE)[[1]]\nbin2 &lt;- image_binary(img, \n                     index = \"GRAY\", \n                     fill_hull = TRUE,\n                     filter = 10,\n                     plot =  FALSE)[[1]]\nbin3 &lt;- image_binary(img, \n                     index = \"GRAY\",\n                     fill_hull = TRUE,\n                     opening = 10,\n                     plot =  FALSE)[[1]]\n\nimage_combine(bin, bin2, bin3, ncol = 3)",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#segmentation",
    "href": "01_dia1.html#segmentation",
    "title": "Scripts - 03/09/2025",
    "section": "\n3.3 Segmentation",
    "text": "3.3 Segmentation\nIn pliman, the following functions can be used to segment objects in images.\nimage_segment() to produce a segmented image (objects in the image and a white background). image_segment_iter() to segment an image interactively. image_segment_kmeans() to segment an image using the k-means algorithm. image_segment_manual() to segment an image manually. image_segment_mask() to segment an image with a mask.\nBoth functions segment the image based on the value of some image index, which can be one of the RGB channels or any operation with these channels.\n\n3.3.1 Image Indices\n\nimage_segment(img,\n              index = \"G\",\n              fill_hull = TRUE,\n              opening = 5)",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#object-analysis",
    "href": "01_dia1.html#object-analysis",
    "title": "Scripts - 03/09/2025",
    "section": "\n3.4 Object Analysis",
    "text": "3.4 Object Analysis\nThe key is to obtain the contour of the objects, so we work with polygons!\n\nA ‘polygon’ is a plane figure described by a finite number of straight line segments connected to form a closed chain (Singer, 1993)2.\n\nWe can then conclude that image objects can be expressed as polygons with n vertices. Pliman has a family of poly_*() functions that can be used to analyze polygons.\n\nsquare &lt;- draw_square() |&gt; poly_close()\n\n\n\n\n\n\npoly_area(square)\n\n[1] 4\n\npoly_perimeter(square)\n\n[1] 8\n\npolygon &lt;- draw_n_tagon(6)\n\n\n\n\n\n\npoly_area(polygon)\n\n[1] 2.598076\n\n\nn &lt;- c(6, 10, 50, 100, 1000, 100000)\nsapply(n, function(x){\n  draw_n_tagon(x) |&gt; poly_area()\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n[1] 2.598076 2.938926 3.133331 3.139526 3.141572 3.141593\n\n\n\n\n3.4.1 Contour\n\nimg &lt;- image_import(\"leaves.jpg\")\nplot(img)\n\n# extract the contour\ncont &lt;- object_contour(img, index = \"B\", watershed = FALSE)\n\n\n\n\n\n\n# Number of contour pixels\nnrow(cont[[1]])\n\n[1] 980\n\n# contour coordinates\nhead(cont[[1]])\n\n     [,1] [,2]\n[1,]  194   24\n[2,]  194   25\n[3,]  193   26\n[4,]  192   26\n[5,]  191   26\n[6,]  190   26\n\n# polygon\nplot_polygon(cont[[1]])\n\n\n\n\n\n\n\n\n3.4.2 Measures\nIn the current version of pliman, you can calculate the following measures. For more details, see Chen & Wang (2005)3, Claude (2008)4, and Montero et al. (2009)5.\n\nArea\n\nThe area of a shape is calculated using the Shoelace formula (Lee and Lim, 2017)6, as follows:\n\\[\nA=\\frac{1}{2}\\left |\\sum_{i=1}^{n}\\left(x_{i} y_{i+1}-x_{i+1}y_{i}\\right)\\right|\n\\]\n\npoly_area(cont)\n\n[1] 60631.0 44430.5 44580.5 38990.0 93424.0 76965.5\n\n\n\nPerimeter\n\nThe perimeter is calculated as the sum of the Euclidean distance between all points of a shape. The distances can be obtained with poly_distpts().\n\npoly_perimeter(cont)\n\n       1        2        3        5       11       14 \n1153.798 2330.010 1139.602 1215.323 1188.651 1266.621 \n\n# perimeter of a circle with radius 2\ncircle &lt;- draw_circle(radius = 2, plot = FALSE)\npoly_perimeter(circle)\n\n[1] 12.56635\n\n# check the result\n2*pi*2\n\n[1] 12.56637\n\n\n\nCenter of mass\n\nThe center of mass of a shape, especially in two-dimensional space, represents the average position of all the points within that shape, weighted by their area (or mass if considering physical objects). It’s the point at which the entire area (or mass) of the shape can be thought to be concentrated. In practical terms, if you were to balance a cut-out of the shape on a pinpoint, the center of mass is the location where it would balance perfectly.\nIn a polygon (a shape made of straight-line segments), the center of mass is calculated by considering each segment’s contribution to the overall shape, and its coordinates (\\(C_x\\) and \\(C_y\\)) are given by\n\\[\n\\begin{aligned}\nC_x & =\\frac{1}{6 A} \\sum_{i=1}^n\\left(x_i+x_{i+1}\\right)\\left(x_i y_{i+1}-x_{i+1} y_i\\right) \\\\\nC_y & =\\frac{1}{6 A} \\sum_{i=1}^n\\left(y_i+y_{i+1}\\right)\\left(x_i y_{i+1}-x_{i+1} y_i\\right)\n\\end{aligned}\n\\] Where A, is the area given above.\n\nplot_polygon(cont[[1]])\n# centroid\ncent &lt;- apply(cont[[1]], 2, mean)\npoints(cent[1], cent[2], col = \"red\", pch = 19)  # Red dot for centroid\n\n# Center of mass\ncm &lt;- poly_mass(cont[[1]])\npoints(cm[1], cm[2], col = \"blue\", pch = 19)  # Blue dot for center of mass\nlegend(\"topright\",\n       legend = c(\"Centroid\", \"Center of Mass\"), \n       col = c(\"red\", \"blue\"), pch = 19)\n\n\n\n\n\n\n\n\nRadius\n\nThe radius of a pixel in the object’s contour is calculated as its distance to the center of mass of the object. These distances can be obtained with poly_centdist().\n\ndist &lt;- poly_centdist_mass(cont[[1]])\nx &lt;- c(cm[1], cont[[1]][1, 1])\ny &lt;- c(cm[2], cont[[1]][1, 2])\nd1 &lt;- sqrt(diff(x)^2 + diff(y)^2)\ndist[[1]]\n\n[1] 178.4624\n\nplot_polygon(cont[[1]])\npoints(cm[1], cm[2], col = \"blue\", pch = 19)  # Blue dot for center of mass\nsegments(x[1], y[1], x[2], y[2], col = \"blue\", lwd = 2)\n\n\n\n\n\n\nplot(dist, type = \"l\")\n\n\n\n\n\n\n\n\nLength and Width\n\nThe length and width of an object are calculated with poly_lw(), as the difference between the maximum and minimum of the x and y coordinates after the object has been aligned with poly_align().\n\n# wrong measures\nplot_polygon(cont[[1]])\nlw &lt;- apply(cont[[1]], 2, \\(x){range(x)})\nabline(v = lw[[1]], col = \"red\")\nabline(v = lw[[2]], col = \"red\")\nabline(h = lw[[3]], col = \"blue\")\nabline(h = lw[[4]], col = \"blue\")\n\n\n\n\n\n\n# Correct measures\naligned &lt;- poly_align(cont[[1]])\nlw &lt;- apply(aligned, 2, \\(x){range(x)})\nabline(v = lw[[1]], col = \"red\")\nabline(v = lw[[2]], col = \"red\")\nabline(h = lw[[3]], col = \"blue\")\nabline(h = lw[[4]], col = \"blue\")\n\n\n\n\n\n\ndiff(lw)\n\n         [,1]     [,2]\n[1,] 190.3641 475.6255\n\n# with poly_lw()\npoly_lw(cont[[1]])\n\n       length    width\n[1,] 475.6255 190.3641\n\n\n\nCircularity and Elongation\n\nCircularity (Montero et al. 2009)7 is also called shape compactness or a measure of the roundness of an object. It is given by \\(C = P^2 / A\\), where \\(P\\) is the perimeter and \\(A\\) is the area of the object.\n\npoly_perimeter(cont) ^2 / poly_area(cont)\n\n        1         2         3         5        11        14 \n 21.95659 122.18968  29.13142  37.88176  15.12343  20.84479 \n\npoly_circularity(cont)\n\n        1         2         3         5        11        14 \n 21.95659 122.18968  29.13142  37.88176  15.12343  20.84479 \n\n\nAs the above measurement depends on scale, normalized circularity can be used. In this case, it is assumed that a perfect circle has a circularity equal to 1. This measure is invariant under translation, rotation, and scale transformations, given by \\(Cn = P^2 / 4 \\pi A\\)\n\npoly_perimeter(circle) ^2 / (4 * pi * poly_area(circle))\n\n[1] 1.000003\n\npoly_circularity_norm(circle)\n\n[1] 0.9999967\n\npoly_circularity_norm(cont)\n\n        1         2         3         5        11        14 \n0.5723279 0.1028431 0.4313683 0.3317261 0.8309208 0.6028541 \n\n\npoly_elongation() Calculates the elongation of an object as 1 - width / length\n\npoly_elongation(circle)\n\n              [,1]\n[1,] -1.236173e-06\n\npoly_elongation(cont)\n\n           [,1]\n[1,] 0.59976047\n[2,] 0.07475182\n[3,] 0.47262292\n[4,] 0.77301835\n[5,] 0.15421772\n[6,] 0.34880080\n\n\n\nPerimeter Complexity (PVC)\n\nThe PVC is first calculated by smoothing the input contour using a specified number of iterations. The smoothed contour is then used to calculate the distances between corresponding points in the original and smoothed coordinates. These distances reflect the variations in contour shape after smoothing. The sum of these distances represents the global magnitude of the variations. Next, the sum of the distances is multiplied by the standard deviation of the distances to capture the dispersion or spread of th…\n\npoly_pcv(circle)\n\n[1] 7.878397e-05\n\npoly_pcv(cont)\n\n        1         2         3         5        11        14 \n0.4765559 2.0312072 2.2185019 0.7703953 0.3572519 0.7428847",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#known-resolution",
    "href": "01_dia1.html#known-resolution",
    "title": "Scripts - 03/09/2025",
    "section": "\n5.1 Known Resolution",
    "text": "5.1 Known Resolution\n\ndpi(leaves)\ncorrected &lt;- get_measures(leaves_meas, dpi = 416)\n# plot width and length\nplot_measures(corrected,\n              measure = \"width\",\n              col = \"green\",\n              hjust = -90)\nplot_measures(corrected, \n              measure = \"length\", \n              vjust = 60,\n              col = \"red\")",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#reference-object-color",
    "href": "01_dia1.html#reference-object-color",
    "title": "Scripts - 03/09/2025",
    "section": "\n5.2 Reference Object (color)",
    "text": "5.2 Reference Object (color)\nThe reference argument can now be used to correct the measurements of objects even when images with different capture distances are used. This differs from the previous example in a subtle but crucial aspect: when reference is informed, batch processing can be used! In this example, the leaf area of the leaves image is quantified and corrected considering a 4 x 5 (20 cm\\(^2\\)) rectangle as a reference object. When reference = TRUE is informed in analyze_objects(), the function will perform a two-step object segmentation process:\nThe first step consists of segmenting the foreground (leaves and reference object) from the background. For this, an image index is used and can be declared in the back_fore_index argument. The default (back_fore_index = \"R/(G/B)\") is optimized to segment white backgrounds of green leaves and a blue reference object. Let’s see the performance of this index in this example.\n\nind &lt;- image_index(leaves, index = \"R/(G/B)\", plot =  FALSE)[[1]]\n\nℹ Index \"R/(G/B)\" is not available. Trying to compute your own index.\n\nbin &lt;- image_binary(leaves, index = \"R/(G/B)\", plot =  FALSE)[[1]]\n\nℹ Index \"R/(G/B)\" is not available. Trying to compute your own index.\n\nimage_combine(ind, bin)\n\n\n\n\n\n\n# Segmenting the image\nseg1 &lt;- image_segment(leaves, index = \"R/(G/B)\")\n\n\n\n\n\n\n\nGood job! Now, we remove the background. The next step is to segment the objects and the reference model. Basically, we need to repeat the previous step isolating the reference.\n\nimage_segment(seg1, \"B-R\")\n\n\n\n\n\n\nseg2 &lt;- \n  image_binary(seg1,\n               index = \"B-R\")\n\nℹ Index \"B-R\" is not available. Trying to compute your own index.\n\n\n\n\n\n\n\n# number of pixels in the reference object\nlength(which(seg2$`B-R` != 1))\n\n[1] 517741\n\n\nNow that we know the indices to be used for each segmentation, we can use the analyze_objects function to obtain the corrected measurements based on the reference object.\n\nres2 &lt;- \n  analyze_objects(leaves, \n                  index = \"B\",\n                  reference = TRUE,\n                  reference_area = 20,\n                  back_fore_index = \"R/(G/B)\", # default\n                  fore_ref_index = \"B-R\",      # default\n                  marker = \"width\")\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [3.7s]",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#reference-object-size",
    "href": "01_dia1.html#reference-object-size",
    "title": "Scripts - 03/09/2025",
    "section": "\n5.3 Reference Object (size)",
    "text": "5.3 Reference Object (size)\nA second option for correcting the measurements is to use a reference object that is smaller or larger than all the objects in the image. When this is the case, the reference_larger and reference_smaller arguments can be used to indicate when the largest/smallest object in the image should be used as a reference object. This is only valid when reference is set to TRUE and reference_area indicates the area of the reference object. IMPORTANT. When reference_smaller is used, objects with an area smaller than 1% of the average of all objects are ignored. This is used to remove possible noise in the image, such as dust. Therefore, make sure that the reference object has an area that will not be removed by this cutoff point.\n\nflaxref &lt;- image_import(\"flax_ref.jpg\", plot = TRUE)\n\n\n\n\n\n\nres2 &lt;- \n  analyze_objects(flaxref,\n                  index = \"GRAY\",\n                  reference = TRUE,\n                  reference_area = 6,\n                  reference_larger = TRUE,\n                  show_contour = FALSE,\n                  marker = \"point\")\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [1.1s]\n\n\n\n\nplot(res2)\n\n\n\n\n\n\nimage_view(flaxref, object = res2)\n\nWarning in CPL_crs_from_input(x): GDAL Message 1: +init=epsg:XXXX syntax is\ndeprecated. It might return a CRS with a non-EPSG compliant axis order. Further\nmessages of this type will be suppressed.\n\n\nWarning: Found less unique colors (5) than unique zcol values (44)! \nInterpolating color vector to match number of zcol values.",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#flax-leaves",
    "href": "01_dia1.html#flax-leaves",
    "title": "Scripts - 03/09/2025",
    "section": "\n7.1 Flax leaves",
    "text": "7.1 Flax leaves\nTo obtain the RGB/HSV intensity of each object in the image, use the argument object_rgb = TRUE in the function analyze_objects().In the following example, we use the R, G, and B bands and their normalized values.The function pliman_indexes() returns the indexes available in the package.\nTo calculate a specific index, simply insert a formula containing the values of R, G, or B (e.g., object_index = “B/G+R”).\n\nimg &lt;- image_import(\"flax.jpg\", plot = TRUE)\nplot(img)\n(indx &lt;- pliman_indexes_rgb())\n\n [1] \"B\"     \"BGI\"   \"BI\"    \"BI2\"   \"CI\"    \"CIVE\"  \"EGVI\"  \"ERVI\"  \"G\"    \n[10] \"GB\"    \"GD\"    \"GLAI\"  \"GLI\"   \"GR\"    \"GRAY\"  \"GRAY2\" \"HI\"    \"HUE\"  \n[19] \"HUE2\"  \"I\"     \"L\"     \"MGVRI\" \"NB\"    \"NG\"    \"NGBDI\" \"NGRDI\" \"NR\"   \n[28] \"R\"     \"RB\"    \"RI\"    \"S\"     \"SAVI\"  \"SCI\"   \"SHP\"   \"SI\"    \"VARI\" \n[37] \"BCC\"   \"BRVI\"  \"GCC\"   \"GRVI2\" \"IPCA\"  \"MVARI\" \"NDI\"   \"RCC\"   \"RGBVI\"\n[46] \"TGI\"   \"VEG\"   \"vNDVI\" \"WI\"   \n\nflax_leaves &lt;-\n  analyze_objects(img,\n                  index = \"B\",\n                  opening = 5,\n                  object_index = c(\"DGCI\", \"CIVE\", \"ERVI\", \"EGVI\", \"R\", \"G\", \"B\"),\n                  pixel_level_index = TRUE,\n                  marker = \"id\")\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [6.2s]\n\n\n\n\n# PCA with the indexes\nind &lt;- summary_index(flax_leaves, type=\"var\")\n\nWarning in sqrt(eigenvalue): NaNs produzidos\n\n\n\n\n\n\n\n\nNow, let’s plot the DGCI (Dark Green Color Index) on each object. The DGCI is based on the HSB (Hue, Saturation, and Brightness) spatial color and has been used as an indicator of green shade 9\n\nimage_view(img, \n           object = flax_leaves,\n           color_regions = custom_palette(c(\"yellow\", \"darkgreen\")),\n           attribute = \"DGCI\")\n\nℹ Using downsample = 2 so that the number of rendered pixels approximates max_pixels.\n\n\nWarning: Found less unique colors (5) than unique zcol values (170)! \nInterpolating color vector to match number of zcol values.",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#color-texture",
    "href": "01_dia1.html#color-texture",
    "title": "Scripts - 03/09/2025",
    "section": "\n7.2 Color Texture",
    "text": "7.2 Color Texture\nDefinitions and interpretations of various texture features calculated from the Gray Level Co-occurrence Matrix (GLCM).\n\nASM (Angular Second Moment):\nDefinition: Measures the uniformity or energy of the texture, calculated as the sum of squared elements in the GLCM.\nInterpretation: Higher values indicate a more uniform texture; lower values suggest more variation.\nCON (Contrast):\nDefinition: Measures local variations in the GLCM, calculating intensity contrast between a pixel and its neighbor.\nInterpretation: High values indicate textures with sharp edges or strong intensity variations.\nCOR (Correlation):\nDefinition: Assesses the linear dependency of gray levels between neighboring pixels, measuring how correlated a pixel is to its neighbors.\nInterpretation: High values indicate strong correlation, suggesting a predictable texture pattern.\nVAR (Variance):\nDefinition: Measures the dispersion of gray levels in the GLCM, quantifying how much gray levels differ from the mean.\nInterpretation: High variance indicates a wide range of intensity values, suggesting a more complex texture.\nIDM (Inverse Difference Moment) or Local Homogeneity:\nDefinition: Measures the homogeneity of the texture, assigning higher weights to smaller gray-level differences.\nInterpretation: Higher values indicate a more homogenous texture.\nSAV (Sum Average):\nDefinition: Calculates the average of the sums of gray levels in the GLCM.\nInterpretation: Reflects the average intensity of pixel pairs.\nSVA (Sum Variance):\nDefinition: Measures the variability of the sum distribution in the GLCM.\nInterpretation: High values indicate a wide spread of the sum distribution.\nSEN (Sum Entropy):\nDefinition: Measures the randomness of the sum distribution in the GLCM.\nInterpretation: High values indicate high randomness in the texture.\nDVA (Difference Variance):\nDefinition: Measures the variability of the difference distribution in the GLCM.\nInterpretation: High values suggest varied and complex texture patterns.\nDEN (Difference Entropy):\nDefinition: Measures the randomness of the difference distribution in the GLCM.\nInterpretation: High values indicate high unpredictability in the texture differences.\nF12 (Difference Variance):\nDefinition: Another representation of Difference Variance, measuring the spread of differences in gray levels.\nF13 (Angular Second Moment):\nDefinition: Another representation of ASM, measuring the uniformity of the texture.\n\nThese features help in analyzing textures by quantifying uniformity, contrast, and randomness, crucial in applications like image classification and pattern recognition.\n\nimgtest &lt;- \n  image_import(c(\"beans/G166.jpg\",\n                 \"beans/G799.jpg\"),\n               plot = TRUE)\n\n\n\n\n\n\n# Gray images\nimage_index(imgtest[[1]], \"GRAY\")\n\n\n\n\n\n\nimage_index(imgtest[[2]], \"GRAY\")\n\n\n\n\n\n\n# Angular Second Moment\nres &lt;- \n  lapply(imgtest, function(x){\n    analyze_objects(x,\n                    index = \"B-R\",\n                    haralick = TRUE, # texture features\n                    har_band = \"GRAY\",\n                    marker = \"dva\",\n                    marker_col = \"green\", \n                    marker_size = 3,\n                    opening = 3,\n                    watershed = FALSE)\n  })\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [426ms]\n\n\n\n\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [489ms]\n\n\n\n\n# Batch Processing\nres &lt;- \n  analyze_objects(pattern = \"G\",\n                  dir_original = \"beans\",\n                  index = \"B-R\",\n                  haralick = TRUE, # texture features\n                  marker_col = \"green\", \n                  opening = 10,\n                  watershed = FALSE,\n                  object_index = c(\"L\", \"a\", \"b*\"),\n                  parallel = TRUE)\n\n── Parallel processing using 3 cores ─────── Started on 2025-09-03 | 10:21:40 ──\n\n\nℹ Processing 55 images found on 'D:/htp_cbmp2025/beans'. Please, wait.\n\n\n███████████████████████████████    2% | ETA:  7m\n\n\n███████████████████████████████    4% | ETA:  4m\n\n\n███████████████████████████████   18% | ETA:  1m\n\n\n███████████████████████████████   36% | ETA: 26s\n\n\n███████████████████████████████   49% | ETA: 18s\n\n\n███████████████████████████████   60% | ETA: 13s\n\n\n███████████████████████████████   82% | ETA:  5s\n\n\n███████████████████████████████   96% | ETA:  1s\n\n\n███████████████████████████████  100% | ETA:  0s\n\n\nℹ Processing 55 images found on 'D:/htp_cbmp2025/beans'. Please, wait.\n✔ Batch processing finished [28.7s]\n\n⠙ Binding the results.\n\n\n┌ Global statistics  ──────────────────────────────────────────────┐\n│                                                                  │\n│   Total objects: 281            Total area: 7950970              │\n│   Overall mean area: 28295.27   Overall SD: 9217.13              │\n│   Min area: 6358                Max area: 51688                  │\n│                                                                  │\n└──────────────────────────────────────────────────────────────────┘\n┌ Across-image statistics (per-image averages) ────────────────────┐\n│                                                                  │\n│   Avg objects: 5.11             Avg sum area: 144563.09          │\n│   Min objects: 5                Max objects: 9                   │\n│   Avg area: 28465.66            Avg SD area: 4603.52             │\n│   Min mean area: 8219           Max mean area: 40847.6           │\n│                                                                  │\n└────────────────────────────────────────────── Based on 55 images ┘\n\n\n── Processing successfully finished ──────────────── on 2025-09-03 | 10:22:09 ──\n⠙ Binding the results.\n✔ Binding the results. [239ms]\n\ndfpca &lt;- \n  left_join(res$results, res$object_index) |&gt; \n  select(img, L, a, `b*`, ent) |&gt; \n  group_by(img) |&gt; \n  summarise(across(where(is.numeric), mean)) |&gt; \n  column_to_rownames(\"img\")\n\nJoining with `by = join_by(img, id)`\n\nlibrary(factoextra)\n\nWelcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa\n\nlibrary(FactoMineR)\n\na &lt;- metan::clustering(dfpca, scale = TRUE)\n\nfviz_dend(a$hc, k = 5)\n\nWarning: The `&lt;scale&gt;` argument of `guides()` cannot be `FALSE`. Use \"none\" instead as\nof ggplot2 3.3.4.\nℹ The deprecated feature was likely used in the factoextra package.\n  Please report the issue at &lt;https://github.com/kassambara/factoextra/issues&gt;.\n\n\n\n\n\n\n\npcam &lt;- PCA(dfpca, graph = FALSE)\nfviz_pca_biplot(pcam, repel = TRUE)\n\n\n\n\n\n\n\n\nimg &lt;- image_import(\"feijoes.jpg\", resize = 50)\nscatt &lt;-\n  object_scatter(\n    img,\n    index = \"B-R\",\n    watershed = FALSE,\n    erosion = 15,\n    filter = 10,\n    object_index = c(\"L\", \"a\", \"b*\"),\n    x = \"L\",\n    y = \"ent\",\n    haralick = TRUE,\n    show_id = FALSE,\n    xlab = \"Luminosidade\",\n    ylab = \"Entropia da GLCM\",\n    scale = 0.15,\n    xy_ratio = 1.5\n  )\n\nℹ Getting cached data...\n\n\n✔ Getting cached data... [2.4s]\n\n\n\n\n\nℹ Putting objects in their positions...\n\n\n\n\n\n\n\n\n✔ Putting objects in their positions... [342ms]",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#pollen-counting-and-viability",
    "href": "01_dia1.html#pollen-counting-and-viability",
    "title": "Scripts - 03/09/2025",
    "section": "\n8.1 Pollen Counting and Viability",
    "text": "8.1 Pollen Counting and Viability\nImage available in this discussion\n\nimg &lt;- image_import(\"pollen.jpg\", plot = TRUE)\nres &lt;-\n  analyze_objects(img,\n                  filter = 2,\n                  tolerance = 0.5,\n                  lower_noise = 0.3,\n                  show_contour = FALSE,\n                  index = \"L*\")\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [1.5s]\n\n\n\n\nsize &lt;- res$results\nids &lt;- size[size$area &gt; 580, ]\nids2 &lt;- size[size$area &lt;= 580, ]\npoints(ids$x, ids$y, pch = 16)\npoints(ids2$x, ids2$y, pch = 16, col = \"yellow\")\n\n\nlegend(\"top\",\n       c(\"Viable\", \"Not Viable\"),\n       pch = 16,\n       ncol = 2,\n       col = c(\"black\", \"yellow\"))\nprop &lt;- nrow(ids) / (nrow(ids) + nrow(ids2)) * 100\ntext(1020, -100,\n     labels = paste0(\"Count:\", res$statistics$value[1]))\ntext(1100, -60,\n     labels = paste0(\"Viable Pollen: \", round(prop, 3), \"%\"))",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#counting-corn-kernels-on-cobs",
    "href": "01_dia1.html#counting-corn-kernels-on-cobs",
    "title": "Scripts - 03/09/2025",
    "section": "\n8.2 Counting Corn Kernels on Cobs",
    "text": "8.2 Counting Corn Kernels on Cobs\n\nimg &lt;- image_import(\"maize.jpg\", plot = TRUE)\n\n\n\n\n\n\ncrop &lt;- \n  img |&gt; \n  image_crop(height = 52:1006,\n             plot = TRUE)\n\nres &lt;-\n  analyze_objects(crop,\n                  filter = 10,\n                  index = \"R\",\n                  show_lw = TRUE,\n                  invert = TRUE,\n                  width_at = TRUE,\n                  watershed = FALSE)\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [1.5s]\n\n\n\n\n# largura ao longo do comprimento\npar(mfrow = c(1, 4))\na &lt;- lapply(res$contours, poly_width_at, at = \"height\", plot = TRUE)\n\n\n\n\n\n\npar(mfrow = c(1,1))\n\n# Counting the Kernels\nseg &lt;- image_segment(crop,\n                     filter = 20,\n                     index = \"R-B\",\n                     col_background = \"gray\",\n                     invert = TRUE)\n\n\n\n\n\n\nimage_index(seg, \"L*\")\n\n\n\n\n\n\nres &lt;-\n  analyze_objects_shp(seg,\n                      ncol = 4,\n                      threshold = \"adaptive\",\n                      windowsize = 33,\n                      tolerance = 1,\n                      index = \"L*-a\",\n                      marker = \"point\",\n                      marker_col = \"black\",\n                      invert = TRUE,\n                      plot = TRUE,\n                      upper_size = 1200)\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [2.2s]\n\n\n\n\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [757ms]\n\n\n\n\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [878ms]\n\n\n\n\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [606ms]\n\n\n\n\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [590ms]\n\n\n\n\n# A correction factor will be needed here. Note that only nearly a half of the ear is analyzed\nres$statistics |&gt; \n  filter(stat == \"n\")\n\n   img stat value\n1 shp1    n   233\n2 shp2    n   219\n3 shp3    n   180\n4 shp4    n   202",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#fourier-descriptors",
    "href": "01_dia1.html#fourier-descriptors",
    "title": "Scripts - 03/09/2025",
    "section": "\n8.3 Fourier Descriptors",
    "text": "8.3 Fourier Descriptors\nThe available functions for contour analysis using Elliptical Fourier Descriptors were adapted from Claude (2088)10\nThe following example shows how to extract Fourier descriptors from sweet potato leaves, derived from an experiment conducted by the NEOSC group at UFSC.\n\nimg &lt;- image_import(\"potato.jpg\") \n\n# Contours\ncont &lt;- object_contour(img,\n                       index = \"R\",\n                       plot = FALSE,\n                       watershed = FALSE)\n# removing the reference\nplot_polygon(cont)\n\n\n\n\n\n\ncont &lt;- cont[-which(names(cont) == \"9\")]\nplot_polygon(cont)\n\n\n\n\n\n\n# Compute the Fourier descriptors\nfourier &lt;- efourier(cont, nharm = 30)\nfourier_inv5 &lt;- efourier_inv(fourier, nharm = 5)\nfourier_inv10 &lt;- efourier_inv(fourier, nharm = 10)\nfourier_inv20 &lt;- efourier_inv(fourier, nharm = 20)\n\n# Plot the estimated contour with different harmonics\nplot(img)\nplot_contour(cont, col = \"red\", lwd = 1)\nplot_contour(fourier_inv5, col = \"blue\", lwd = 3)\nplot_contour(fourier_inv10, col = \"green\", lwd = 3)\nplot_contour(fourier_inv20, col = \"salmon\", lwd = 3)\n\n\n\n\n\n\n# or using the analyze_objects() function\n# Contours\nres &lt;- \n  analyze_objects(img, \n                  marker = \"id\",\n                  watershed = FALSE,\n                  reference = TRUE,\n                  reference_area = 20,\n                  efourier = TRUE,\n                  nharm = 15,\n                  plot = FALSE)\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [2.9s]\n\n\n\n\nimage_view(img,\n           object = res,\n           alpha = 0.3,\n           attribute = \"solidity\")\n\nℹ Using downsample = 2 so that the number of rendered pixels approximates max_pixels.\n\n\nWarning: Found less unique colors (5) than unique zcol values (7)! \nInterpolating color vector to match number of zcol values.\n\n\n\n\n\ncoefs &lt;- res$efourier_norm\n\npca &lt;- \n  coefs |&gt; \n  select(id:D15) |&gt; \n  pliman::column_to_rownames(\"id\") |&gt; \n  select(-A1)\n\nlibrary(factoextra)\nlibrary(FactoMineR)\npcam &lt;- PCA(pca, graph = FALSE)\nfviz_pca_ind(pcam)",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#using-color-palettes",
    "href": "01_dia1.html#using-color-palettes",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.1 Using Color Palettes",
    "text": "9.1 Using Color Palettes\nColor palettes can be created simply by manually sampling small areas of representative images and producing a composite image representing each desired class (background, healthy tissue, and symptomatic tissue). The following image11 shows symptoms of anthracnose (Elsinoë ampelina) on grape leaves.\n\nimg &lt;- image_import(pattern = \"videira\", plot = TRUE)\n\n\n\n\n\n\n# putting image names into quotes \"\" says to pliman to search such image in the working directory\nsev &lt;- measure_disease(\"videira\",\n                       img_healthy = \"videira_healthy\",\n                       img_symptoms = \"videira_disease\",\n                       img_background = \"videira_background\")\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [1.9s]\n\n\n\n\nsev$severity\n\n   healthy symptomatic\n1 85.13759    14.86241",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#using-image-indices",
    "href": "01_dia1.html#using-image-indices",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.2 Using Image Indices",
    "text": "9.2 Using Image Indices\n\ngrape &lt;- img$videira.png\nimage_index(grape, c(\"B\", \"R\", \"G\", \"NGRDI\"))\n\n\n\n\n\n\nseg &lt;- image_segment(as_image(grape@.Data[,,1:3]), \"B\",\n                     fill_hull = TRUE)\n\n\n\n\n\n\nsev2 &lt;-\n  measure_disease(\"videira\",\n                  index_lb = \"G\",\n                  index_dh = \"NGRDI\",\n                  contour_col = \"red\",\n                  opening = c(0, 5),\n                  threshold = c(\"Otsu\", 0),\n                  # show_original = FALSE,\n                  show_features = TRUE,\n                  save_image = TRUE,\n                  show_segmentation = TRUE,\n                  watershed = TRUE)\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [1.4s]\n\n\n\n\nsev2$severity\n\n   healthy symptomatic\n1 89.55889    10.44111",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#batch-processing-1",
    "href": "01_dia1.html#batch-processing-1",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.3 Batch Processing",
    "text": "9.3 Batch Processing\nTo analyze multiple images from a directory, use the pattern argument to declare a pattern for file names. Here, 50 soybean leaves available in the repository https://osf.io/4hbr6, a database of plant disease severity annotation images, will be used. Thanks to Emerson M. Del Ponte and his collaborators for making this project publicly available. Using the save_image = TRUE argument saves the processed images in a temporary directory defined by tempdir().\n\n# create a temporary directory\n\nsev_batch &lt;-\n  measure_disease(pattern = \"soy\",\n                  dir_original = \"sevsoja\",\n                  dir_processed = \"sevproc\",\n                  index_lb = \"B\",\n                  index_dh = \"NGRDI\",\n                  threshold = c(\"Otsu\", -0.03),\n                  plot =  FALSE,\n                  # save_image = TRUE,\n                  parallel = TRUE)\n\n── Parallel processing using 3 cores ───── Started on \"2025-09-03 | 10:23:10\" ──\n\n\nℹ Processing 50 images in parallel...\n\n\n███████████████████████████████    2% | ETA:  7m\n\n\n███████████████████████████████   16% | ETA:  1m\n\n\n███████████████████████████████   34% | ETA: 30s\n\n\n███████████████████████████████   54% | ETA: 15s\n\n\n███████████████████████████████   72% | ETA:  8s\n\n\n███████████████████████████████   92% | ETA:  2s\n\n\n███████████████████████████████  100% | ETA:  0s\n\n\nℹ Processing 50 images in parallel...\n── Processing successfully finished ──────────────── on 2025-09-03 | 10:23:36 ──\nℹ Processing 50 images in parallel...\n✔ Batch processing finished [26.1s]\n\nsev_batch$severity |&gt;\n  ggplot(aes(x = symptomatic)) +\n  geom_histogram(bins = 8)",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#leafhopper",
    "href": "01_dia1.html#leafhopper",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.4 Leafhopper",
    "text": "9.4 Leafhopper",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#multiple-leaves-in-an-image",
    "href": "01_dia1.html#multiple-leaves-in-an-image",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.5 Multiple Leaves in an Image",
    "text": "9.5 Multiple Leaves in an Image\nWhen multiple leaves are present in an image, the measure_disease function returns the average severity of the leaves in the image. To quantify severity per leaf, the measure_disease_byl() function can be used.\nThis function calculates the percentage of symptomatic leaf area using color palettes or RGB indices for each leaf (byl) in an image. This allows, for example, processing replicates of the same treatment and obtaining results for each replicate with a single image.\nIn the following example, images of orange leaves, kindly provided by Gabriele de Jesus, are processed.\n\nimg &lt;- image_import(\"sev_leaves.jpg\", plot = TRUE)\n\n\n\n\n\n\nsev &lt;-\n  measure_disease_byl(img,\n                      index = \"B\",\n                      index_lb = \"B\",\n                      index_dh = \"NGRDI\")\n\nℹ Processing a single image. Please, wait.\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [585ms]\n\n\n\n\n\nℹ Processing a single image. Please, wait.\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [656ms]\n\nℹ Processing a single image. Please, wait.\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [631ms]\n\nℹ Processing a single image. Please, wait.\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [613ms]\n\nℹ Processing a single image. Please, wait.\n✔ Image Successfully analyzed! [4s]\n\nsev$severity\n\n  img leaf  healthy symptomatic\n1 img    1 59.26646    40.73354\n2 img    2 59.62619    40.37381\n3 img    3 60.08614    39.91386\n4 img    4 57.36590    42.63410",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#dose-response-curves",
    "href": "01_dia1.html#dose-response-curves",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.6 Dose-Response Curves",
    "text": "9.6 Dose-Response Curves\nThe provided script deals with data analysis of a dose-response experiment to evaluate the effectiveness of different products in reducing the severity of a plant disease. The use of images is authorized by SUMITOMO-SA.\nThe first step is to quantify the severity within each petri dish, which represents a dose of a particular product. Subsequently, to fit the curves, the analysis is performed using the drda library in R, which is a tool for dose-response data analysis.\nThe script fits nonlinear regression models to dose-response data using the drda() function for each product. The specified model is a 4-parameter log-logistic regression (“ll4”).\n\n# DOSE-RESPONSE\n# Compute severity per leaf\nsev &lt;-\n  measure_disease_byl(pattern = \"img\",\n                      index = \"B\",\n                      index_dh = \"NGRDI\",\n                      dir_original = \"dose_response\",\n                      parallel = TRUE,\n                      opening = c(25, 0))\n\nmirai: initial sync with dispatcher [10 secs elapsed]\n\n\n── Parallel processing of 14 images ────── Started at \"2025-09-03 | 10:23:56\" ──\n\n\nℹ Dispatching batches...\n\n\n███████████████████████████████    7% | ETA:  4m\n\n\n███████████████████████████████   50% | ETA: 27s\n\n\n███████████████████████████████   64% | ETA: 16s\n\n\n███████████████████████████████   93% | ETA:  2s\n\n\n███████████████████████████████  100% | ETA:  0s\n\n\nℹ Dispatching batches...\n✔ All batches complete! [32.3s]\n\nres &lt;- \n  map_dfr(sev, function(x){\n    x$severity\n  })\n\nsevres &lt;- \n  res |&gt;\n  separate(img, into = c(\"img\", \"product\", \"dose\"), sep = \"_\") |&gt;\n  mutate(dose = as.numeric(str_replace_all(dose, \",\", \".\")),\n         symptomatic = symptomatic / 100)\n\nmodels &lt;-\n  sevres |&gt;\n  group_by(product) |&gt;\n  nest() |&gt;\n  mutate(models = map(data,\n                      ~drda(symptomatic ~ dose,\n                            data = .,\n                            mean_function = \"ll4\"))) |&gt; # define the model here\n  dplyr::select(-data)\n\n# function to obtain the coefficients\nget_results &lt;- function(model,\n                        resplevel = 0.5,\n                        type = \"relative\"){\n  coefs &lt;- coef(model) |&gt; t()\n  ed &lt;- effective_dose(model, y = resplevel) |&gt; as.data.frame()\n  integ &lt;- data.frame(nauc = nauc(model, range(model$model[[2]])))\n  cbind(coefs, ed, integ)\n}\n\n# Obtain the coefficients\n# alpha:  the value of the function at x = 0\n# delta: height of the curve\n# eta: the steepness (growth rate) of the curve\n# phi: the x value at which the curve is equal to its mid-point\n\ncoefs &lt;-\n  models |&gt;\n  mutate(coefs = map_dfr(\n    .x = models,\n    .f = ~get_results(., resplevel = 0.5)) # DL50\n  ) |&gt;\n  dplyr::select(-models) |&gt;\n  unnest(coefs) |&gt;\n  ungroup() |&gt;\n  as.data.frame()\n\ncoefs\n\n  product     alpha      delta       eta       phi  Estimate Lower .95\n1      P1 0.3968639 -0.3864929 1.3703455 1.8071352 1.8071352 1.1849347\n2      P2 0.3821491 -0.3715773 0.9932846 0.4335226 0.4335226 0.2893241\n  Upper .95       nauc\n1 2.4293356 0.02744016\n2 0.5777211 0.01948812\n\nplot(models$models[[1]], models$models[[2]],\n     level = 0,\n     base = \"10\",\n     ylim = c(0, 0.5),\n     xlim = c(0, 100),\n     legend = c(\"P1\", \"P2\"),\n     xlab = \"Dose (ppm)\",\n     ylab = \"Disease Severity\",\n     col = metan::ggplot_color(2),\n     cex = 2)\n\n\n\n\n\n\n# derivative with respect to dose of the model\nD(expression(alpha + delta * x^eta / (x^eta + phi^eta)), \"x\")\n\ndelta * (x^(eta - 1) * eta)/(x^eta + phi^eta) - delta * x^eta * \n    (x^(eta - 1) * eta)/(x^eta + phi^eta)^2\n\ndy &lt;- function(x,alpha,  delta,   eta,   phi){\n  delta * (x^(eta - 1) * eta)/(x^eta + phi^eta) - delta * x^eta *\n    (x^(eta - 1) * eta)/(x^eta + phi^eta)^2\n}\n\n# First derivative\nggplot(data.frame(x = c(0, 5)), aes(x = x)) +\n  pmap(coefs |&gt; select(product:phi), function(product, alpha, delta, eta, phi) {\n    stat_function(fun = function(x) dy(x, alpha, delta, eta, phi),\n                  aes(color = product),\n                  linewidth = 1)\n  }) +\n  geom_vline(aes(xintercept = phi,\n                 color = product),\n             data = coefs,\n             linetype = 2) +\n  labs(x = \"Dose (ppm)\",\n       y = \"Severity Reduction Rate (% per ppm)\",\n       color = \"Product\") +\n  ggthemes::theme_base()\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_function()`).",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#fungi-in-petri-dishes",
    "href": "01_dia1.html#fungi-in-petri-dishes",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.7 Fungi in Petri Dishes",
    "text": "9.7 Fungi in Petri Dishes\n\n# fungi in petri dish\nfungi &lt;- image_import(\"fungi.jpg\", plot = TRUE)\n\n\n\n\n\n\nimage_index(fungi, \"L\")\n\n\n\n\n\n\nanalyze_objects(fungi,\n                index = \"L\",\n                filter  = 15,\n                watershed = FALSE,\n                contour_size  = 3,\n                invert = TRUE) |&gt;\n  get_measures(dpi = 90) |&gt;\n  plot_measures(measure = \"area\",\n                col = \"black\",\n                size = 2)\n\nℹ Processing a single image. Please, wait.\n\n\n✔ Image Successfully analyzed! [956ms]",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#bacteria",
    "href": "01_dia1.html#bacteria",
    "title": "Scripts - 03/09/2025",
    "section": "\n9.8 Bacteria",
    "text": "9.8 Bacteria\n\nbac &lt;- image_import(\"bacteria.jpg\", plot = TRUE)\nres &lt;- \n  analyze_objects(bac,\n                  index = \"L*\",\n                  threshold = 0.3,\n                  marker = \"point\")\n\nℹ Processing a single image. Please, wait.\n\n\n\n\n\n\n\n\n✔ Image Successfully analyzed! [824ms]\n\n\n\n\nres$statistics\n\n       stat        value\n1         n 1.780000e+02\n2  min_area 3.000000e+00\n3 mean_area 2.754494e+01\n4  max_area 8.200000e+01\n5   sd_area 1.467735e+01\n6  sum_area 4.903000e+03\n7  coverage 3.064375e-02",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  },
  {
    "objectID": "01_dia1.html#footnotes",
    "href": "01_dia1.html#footnotes",
    "title": "Scripts - 03/09/2025",
    "section": "Footnotes",
    "text": "Footnotes\n\nOtsu, N. 1979. Threshold selection method from gray-level histograms. IEEE Trans Syst Man Cybern SMC-9(1): 62–66. doi: 10.1109/tsmc.1979.4310076.↩︎\nSource: http://gazeta-rs.com.br/as-principais-doencas-da-videira-na-primavera/#prettyPhoto↩︎\nKarcher, D.E., and M.D. Richardson. 2003. Quantifying Turfgrass Color Using Digital Image Analysis. Crop Science 43(3): 943–951. doi: 10.2135/cropsci2003.9430↩︎\nClaude, J. 2008. Morphometrics with R https://link.springer.com/book/10.1007/978-0-387-77789-4↩︎\nMontero, RS, E. Bribiesca, R. Santiago, and E. Bribiesca. 2009. State of the Art of Compactness and Circularity Measures. International Mathematical Forum 4(27): 1305–1335.↩︎\nLee, Y., and W. Lim. 2017. Shoelace Formula: Connecting the Area of a Polygon and the Vector Cross Product. The Mathematics Teacher 110(8): 631–636. doi: 10.5951/MATHTEACHER.110.8.0631.↩︎\nMontero, R.S., E. Bribiesca, R. Santiago, and E. Bribiesca. 2009. State of the Art of Compactness and Circularity Measures. International Mathematical Forum 4(27): 1305–1335↩︎\nSource: http://gazeta-rs.com.br/as-principais-doencas-da-videira-na-primavera/#prettyPhoto↩︎\nKarcher, D.E., and M.D. Richardson. 2003. Quantifying Turfgrass Color Using Digital Image Analysis. Crop Science 43(3): 943–951. doi: 10.2135/cropsci2003.9430↩︎\nClaude, J. 2008. Morphometrics with R https://link.springer.com/book/10.1007/978-0-387-77789-4↩︎\nSource: http://gazeta-rs.com.br/as-principais-doencas-da-videira-na-primavera/#prettyPhoto↩︎",
    "crumbs": [
      "About",
      "Scripts - 03/09/2025"
    ]
  }
]